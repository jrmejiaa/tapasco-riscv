//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa)
//
// On Mon Apr 10 19:03:19 CEST 2023
//
//
// Ports:
// Name                         I/O  size props
// core_imem_arready              O     1
// core_imem_rvalid               O     1
// core_imem_rid                  O     1
// core_imem_rdata                O    32
// core_imem_rresp                O     2
// core_imem_rlast                O     1
// core_imem_awready              O     1
// core_imem_wready               O     1
// core_imem_bvalid               O     1
// core_imem_bresp                O     2
// core_imem_bid                  O     1
// core_dmem_arready              O     1
// core_dmem_rvalid               O     1
// core_dmem_rid                  O     1
// core_dmem_rdata                O    32
// core_dmem_rresp                O     2
// core_dmem_rlast                O     1
// core_dmem_awready              O     1
// core_dmem_wready               O     1
// core_dmem_bvalid               O     1
// core_dmem_bresp                O     2
// core_dmem_bid                  O     1
// imem_arvalid                   O     1
// imem_arid                      O     1
// imem_araddr                    O    32
// imem_arlen                     O     8
// imem_arsize                    O     3
// imem_arburst                   O     2
// imem_arlock                    O     1
// imem_arcache                   O     4
// imem_arprot                    O     3
// imem_arqos                     O     4
// imem_arregion                  O     4
// imem_rready                    O     1
// imem_awvalid                   O     1
// imem_awid                      O     1
// imem_awaddr                    O    32
// imem_awlen                     O     8
// imem_awsize                    O     3
// imem_awburst                   O     2
// imem_awlock                    O     1
// imem_awcache                   O     4
// imem_awprot                    O     3
// imem_awqos                     O     4
// imem_awregion                  O     4
// imem_wvalid                    O     1
// imem_wdata                     O    32
// imem_wstrb                     O     4
// imem_wlast                     O     1
// imem_bready                    O     1
// dmem_arvalid                   O     1
// dmem_arid                      O     1
// dmem_araddr                    O    32
// dmem_arlen                     O     8
// dmem_arsize                    O     3
// dmem_arburst                   O     2
// dmem_arlock                    O     1
// dmem_arcache                   O     4
// dmem_arprot                    O     3
// dmem_arqos                     O     4
// dmem_arregion                  O     4
// dmem_rready                    O     1
// dmem_awvalid                   O     1
// dmem_awid                      O     1
// dmem_awaddr                    O    32
// dmem_awlen                     O     8
// dmem_awsize                    O     3
// dmem_awburst                   O     2
// dmem_awlock                    O     1
// dmem_awcache                   O     4
// dmem_awprot                    O     3
// dmem_awqos                     O     4
// dmem_awregion                  O     4
// dmem_wvalid                    O     1
// dmem_wdata                     O    32
// dmem_wstrb                     O     4
// dmem_wlast                     O     1
// dmem_bready                    O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// core_imem_arvalid              I     1
// core_imem_arid                 I     1
// core_imem_araddr               I    32
// core_imem_arlen                I     8
// core_imem_arsize               I     3
// core_imem_arburst              I     2
// core_imem_arlock               I     1
// core_imem_arcache              I     4
// core_imem_arprot               I     3
// core_imem_arqos                I     4
// core_imem_arregion             I     4
// core_imem_rready               I     1
// core_imem_awvalid              I     1
// core_imem_awid                 I     1
// core_imem_awaddr               I    32
// core_imem_awlen                I     8
// core_imem_awsize               I     3
// core_imem_awburst              I     2
// core_imem_awlock               I     1
// core_imem_awcache              I     4
// core_imem_awprot               I     3
// core_imem_awqos                I     4
// core_imem_awregion             I     4
// core_imem_wvalid               I     1
// core_imem_wdata                I    32
// core_imem_wstrb                I     4
// core_imem_wlast                I     1
// core_imem_bready               I     1
// core_dmem_arvalid              I     1
// core_dmem_arid                 I     1
// core_dmem_araddr               I    32
// core_dmem_arlen                I     8
// core_dmem_arsize               I     3
// core_dmem_arburst              I     2
// core_dmem_arlock               I     1
// core_dmem_arcache              I     4
// core_dmem_arprot               I     3
// core_dmem_arqos                I     4
// core_dmem_arregion             I     4
// core_dmem_rready               I     1
// core_dmem_awvalid              I     1
// core_dmem_awid                 I     1
// core_dmem_awaddr               I    32
// core_dmem_awlen                I     8
// core_dmem_awsize               I     3
// core_dmem_awburst              I     2
// core_dmem_awlock               I     1
// core_dmem_awcache              I     4
// core_dmem_awprot               I     3
// core_dmem_awqos                I     4
// core_dmem_awregion             I     4
// core_dmem_wvalid               I     1
// core_dmem_wdata                I    32
// core_dmem_wstrb                I     4
// core_dmem_wlast                I     1
// core_dmem_bready               I     1
// imem_arready                   I     1
// imem_rvalid                    I     1
// imem_rid                       I     1
// imem_rdata                     I    32
// imem_rresp                     I     2
// imem_rlast                     I     1
// imem_awready                   I     1
// imem_wready                    I     1
// imem_bvalid                    I     1
// imem_bresp                     I     2
// imem_bid                       I     1
// dmem_arready                   I     1
// dmem_rvalid                    I     1
// dmem_rid                       I     1
// dmem_rdata                     I    32
// dmem_rresp                     I     2
// dmem_rlast                     I     1
// dmem_awready                   I     1
// dmem_wready                    I     1
// dmem_bvalid                    I     1
// dmem_bresp                     I     2
// dmem_bid                       I     1
//
// Combinational paths from inputs to outputs:
//   (core_imem_wvalid,
//    core_imem_wdata,
//    core_imem_wstrb,
//    core_imem_wlast) -> core_imem_bvalid
//   (core_imem_wvalid,
//    core_imem_wdata,
//    core_imem_wstrb,
//    core_imem_wlast) -> core_imem_bresp
//   (core_imem_wvalid,
//    core_imem_wdata,
//    core_imem_wstrb,
//    core_imem_wlast) -> core_imem_bid
//   (core_imem_wvalid,
//    core_imem_wdata,
//    core_imem_wstrb,
//    core_imem_wlast) -> core_imem_buser
//   (core_dmem_wvalid,
//    core_dmem_wdata,
//    core_dmem_wstrb,
//    core_dmem_wlast) -> core_dmem_bvalid
//   (core_dmem_wvalid,
//    core_dmem_wdata,
//    core_dmem_wstrb,
//    core_dmem_wlast) -> core_dmem_bresp
//   (core_dmem_wvalid,
//    core_dmem_wdata,
//    core_dmem_wstrb,
//    core_dmem_wlast) -> core_dmem_bid
//   (core_dmem_wvalid,
//    core_dmem_wdata,
//    core_dmem_wstrb,
//    core_dmem_wlast) -> core_dmem_buser
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCacheSystem(CLK,
		     RST_N,

		     core_imem_arvalid,

		     core_imem_arready,

		     core_imem_arid,
		     core_imem_araddr,
		     core_imem_arlen,
		     core_imem_arsize,
		     core_imem_arburst,
		     core_imem_arlock,
		     core_imem_arcache,
		     core_imem_arprot,
		     core_imem_arqos,
		     core_imem_arregion,

		     core_imem_rready,

		     core_imem_rvalid,

		     core_imem_rid,

		     core_imem_rdata,

		     core_imem_rresp,

		     core_imem_rlast,

		     core_imem_awready,

		     core_imem_awvalid,

		     core_imem_awid,
		     core_imem_awaddr,
		     core_imem_awlen,
		     core_imem_awsize,
		     core_imem_awburst,
		     core_imem_awlock,
		     core_imem_awcache,
		     core_imem_awprot,
		     core_imem_awqos,
		     core_imem_awregion,

		     core_imem_wready,

		     core_imem_wvalid,

		     core_imem_wdata,
		     core_imem_wstrb,
		     core_imem_wlast,

		     core_imem_bready,

		     core_imem_bvalid,

		     core_imem_bresp,

		     core_imem_bid,

		     core_dmem_arvalid,

		     core_dmem_arready,

		     core_dmem_arid,
		     core_dmem_araddr,
		     core_dmem_arlen,
		     core_dmem_arsize,
		     core_dmem_arburst,
		     core_dmem_arlock,
		     core_dmem_arcache,
		     core_dmem_arprot,
		     core_dmem_arqos,
		     core_dmem_arregion,

		     core_dmem_rready,

		     core_dmem_rvalid,

		     core_dmem_rid,

		     core_dmem_rdata,

		     core_dmem_rresp,

		     core_dmem_rlast,

		     core_dmem_awready,

		     core_dmem_awvalid,

		     core_dmem_awid,
		     core_dmem_awaddr,
		     core_dmem_awlen,
		     core_dmem_awsize,
		     core_dmem_awburst,
		     core_dmem_awlock,
		     core_dmem_awcache,
		     core_dmem_awprot,
		     core_dmem_awqos,
		     core_dmem_awregion,

		     core_dmem_wready,

		     core_dmem_wvalid,

		     core_dmem_wdata,
		     core_dmem_wstrb,
		     core_dmem_wlast,

		     core_dmem_bready,

		     core_dmem_bvalid,

		     core_dmem_bresp,

		     core_dmem_bid,

		     imem_arvalid,

		     imem_arready,

		     imem_arid,

		     imem_araddr,

		     imem_arlen,

		     imem_arsize,

		     imem_arburst,

		     imem_arlock,

		     imem_arcache,

		     imem_arprot,

		     imem_arqos,

		     imem_arregion,

		     imem_rready,

		     imem_rvalid,

		     imem_rid,
		     imem_rdata,
		     imem_rresp,
		     imem_rlast,

		     imem_awready,

		     imem_awvalid,

		     imem_awid,

		     imem_awaddr,

		     imem_awlen,

		     imem_awsize,

		     imem_awburst,

		     imem_awlock,

		     imem_awcache,

		     imem_awprot,

		     imem_awqos,

		     imem_awregion,

		     imem_wready,

		     imem_wvalid,

		     imem_wdata,

		     imem_wstrb,

		     imem_wlast,

		     imem_bvalid,

		     imem_bready,

		     imem_bresp,
		     imem_bid,

		     dmem_arvalid,

		     dmem_arready,

		     dmem_arid,

		     dmem_araddr,

		     dmem_arlen,

		     dmem_arsize,

		     dmem_arburst,

		     dmem_arlock,

		     dmem_arcache,

		     dmem_arprot,

		     dmem_arqos,

		     dmem_arregion,

		     dmem_rready,

		     dmem_rvalid,

		     dmem_rid,
		     dmem_rdata,
		     dmem_rresp,
		     dmem_rlast,

		     dmem_awready,

		     dmem_awvalid,

		     dmem_awid,

		     dmem_awaddr,

		     dmem_awlen,

		     dmem_awsize,

		     dmem_awburst,

		     dmem_awlock,

		     dmem_awcache,

		     dmem_awprot,

		     dmem_awqos,

		     dmem_awregion,

		     dmem_wready,

		     dmem_wvalid,

		     dmem_wdata,

		     dmem_wstrb,

		     dmem_wlast,

		     dmem_bvalid,

		     dmem_bready,

		     dmem_bresp,
		     dmem_bid);
  input  CLK;
  input  RST_N;

  // action method core_imem_rd_parvalid
  input  core_imem_arvalid;

  // value method core_imem_rd_arready
  output core_imem_arready;

  // action method core_imem_rd_parchannel
  input  core_imem_arid;
  input  [31 : 0] core_imem_araddr;
  input  [7 : 0] core_imem_arlen;
  input  [2 : 0] core_imem_arsize;
  input  [1 : 0] core_imem_arburst;
  input  core_imem_arlock;
  input  [3 : 0] core_imem_arcache;
  input  [2 : 0] core_imem_arprot;
  input  [3 : 0] core_imem_arqos;
  input  [3 : 0] core_imem_arregion;

  // action method core_imem_rd_prready
  input  core_imem_rready;

  // value method core_imem_rd_rvalid
  output core_imem_rvalid;

  // value method core_imem_rd_rid
  output core_imem_rid;

  // value method core_imem_rd_rdata
  output [31 : 0] core_imem_rdata;

  // value method core_imem_rd_rresp
  output [1 : 0] core_imem_rresp;

  // value method core_imem_rd_rlast
  output core_imem_rlast;

  // value method core_imem_rd_ruser

  // value method core_imem_wr_awready
  output core_imem_awready;

  // action method core_imem_wr_pawvalid
  input  core_imem_awvalid;

  // action method core_imem_wr_pawchannel
  input  core_imem_awid;
  input  [31 : 0] core_imem_awaddr;
  input  [7 : 0] core_imem_awlen;
  input  [2 : 0] core_imem_awsize;
  input  [1 : 0] core_imem_awburst;
  input  core_imem_awlock;
  input  [3 : 0] core_imem_awcache;
  input  [2 : 0] core_imem_awprot;
  input  [3 : 0] core_imem_awqos;
  input  [3 : 0] core_imem_awregion;

  // value method core_imem_wr_wready
  output core_imem_wready;

  // action method core_imem_wr_pwvalid
  input  core_imem_wvalid;

  // action method core_imem_wr_pwchannel
  input  [31 : 0] core_imem_wdata;
  input  [3 : 0] core_imem_wstrb;
  input  core_imem_wlast;

  // action method core_imem_wr_pbready
  input  core_imem_bready;

  // value method core_imem_wr_bvalid
  output core_imem_bvalid;

  // value method core_imem_wr_bresp
  output [1 : 0] core_imem_bresp;

  // value method core_imem_wr_bid
  output core_imem_bid;

  // value method core_imem_wr_buser

  // action method core_dmem_rd_parvalid
  input  core_dmem_arvalid;

  // value method core_dmem_rd_arready
  output core_dmem_arready;

  // action method core_dmem_rd_parchannel
  input  core_dmem_arid;
  input  [31 : 0] core_dmem_araddr;
  input  [7 : 0] core_dmem_arlen;
  input  [2 : 0] core_dmem_arsize;
  input  [1 : 0] core_dmem_arburst;
  input  core_dmem_arlock;
  input  [3 : 0] core_dmem_arcache;
  input  [2 : 0] core_dmem_arprot;
  input  [3 : 0] core_dmem_arqos;
  input  [3 : 0] core_dmem_arregion;

  // action method core_dmem_rd_prready
  input  core_dmem_rready;

  // value method core_dmem_rd_rvalid
  output core_dmem_rvalid;

  // value method core_dmem_rd_rid
  output core_dmem_rid;

  // value method core_dmem_rd_rdata
  output [31 : 0] core_dmem_rdata;

  // value method core_dmem_rd_rresp
  output [1 : 0] core_dmem_rresp;

  // value method core_dmem_rd_rlast
  output core_dmem_rlast;

  // value method core_dmem_rd_ruser

  // value method core_dmem_wr_awready
  output core_dmem_awready;

  // action method core_dmem_wr_pawvalid
  input  core_dmem_awvalid;

  // action method core_dmem_wr_pawchannel
  input  core_dmem_awid;
  input  [31 : 0] core_dmem_awaddr;
  input  [7 : 0] core_dmem_awlen;
  input  [2 : 0] core_dmem_awsize;
  input  [1 : 0] core_dmem_awburst;
  input  core_dmem_awlock;
  input  [3 : 0] core_dmem_awcache;
  input  [2 : 0] core_dmem_awprot;
  input  [3 : 0] core_dmem_awqos;
  input  [3 : 0] core_dmem_awregion;

  // value method core_dmem_wr_wready
  output core_dmem_wready;

  // action method core_dmem_wr_pwvalid
  input  core_dmem_wvalid;

  // action method core_dmem_wr_pwchannel
  input  [31 : 0] core_dmem_wdata;
  input  [3 : 0] core_dmem_wstrb;
  input  core_dmem_wlast;

  // action method core_dmem_wr_pbready
  input  core_dmem_bready;

  // value method core_dmem_wr_bvalid
  output core_dmem_bvalid;

  // value method core_dmem_wr_bresp
  output [1 : 0] core_dmem_bresp;

  // value method core_dmem_wr_bid
  output core_dmem_bid;

  // value method core_dmem_wr_buser

  // value method imem_rd_arvalid
  output imem_arvalid;

  // action method imem_rd_parready
  input  imem_arready;

  // value method imem_rd_arid
  output imem_arid;

  // value method imem_rd_araddr
  output [31 : 0] imem_araddr;

  // value method imem_rd_arlen
  output [7 : 0] imem_arlen;

  // value method imem_rd_arsize
  output [2 : 0] imem_arsize;

  // value method imem_rd_arburst
  output [1 : 0] imem_arburst;

  // value method imem_rd_arlock
  output imem_arlock;

  // value method imem_rd_arcache
  output [3 : 0] imem_arcache;

  // value method imem_rd_arprot
  output [2 : 0] imem_arprot;

  // value method imem_rd_arqos
  output [3 : 0] imem_arqos;

  // value method imem_rd_arregion
  output [3 : 0] imem_arregion;

  // value method imem_rd_aruser

  // value method imem_rd_rready
  output imem_rready;

  // action method imem_rd_prvalid
  input  imem_rvalid;

  // action method imem_rd_prchannel
  input  imem_rid;
  input  [31 : 0] imem_rdata;
  input  [1 : 0] imem_rresp;
  input  imem_rlast;

  // action method imem_wr_pawready
  input  imem_awready;

  // value method imem_wr_awvalid
  output imem_awvalid;

  // value method imem_wr_awid
  output imem_awid;

  // value method imem_wr_awaddr
  output [31 : 0] imem_awaddr;

  // value method imem_wr_awlen
  output [7 : 0] imem_awlen;

  // value method imem_wr_awsize
  output [2 : 0] imem_awsize;

  // value method imem_wr_awburst
  output [1 : 0] imem_awburst;

  // value method imem_wr_awlock
  output imem_awlock;

  // value method imem_wr_awcache
  output [3 : 0] imem_awcache;

  // value method imem_wr_awprot
  output [2 : 0] imem_awprot;

  // value method imem_wr_awqos
  output [3 : 0] imem_awqos;

  // value method imem_wr_awregion
  output [3 : 0] imem_awregion;

  // value method imem_wr_awuser

  // action method imem_wr_pwready
  input  imem_wready;

  // value method imem_wr_wvalid
  output imem_wvalid;

  // value method imem_wr_wdata
  output [31 : 0] imem_wdata;

  // value method imem_wr_wstrb
  output [3 : 0] imem_wstrb;

  // value method imem_wr_wlast
  output imem_wlast;

  // value method imem_wr_wuser

  // action method imem_wr_pbvalid
  input  imem_bvalid;

  // value method imem_wr_bready
  output imem_bready;

  // action method imem_wr_bin
  input  [1 : 0] imem_bresp;
  input  imem_bid;

  // value method dmem_rd_arvalid
  output dmem_arvalid;

  // action method dmem_rd_parready
  input  dmem_arready;

  // value method dmem_rd_arid
  output dmem_arid;

  // value method dmem_rd_araddr
  output [31 : 0] dmem_araddr;

  // value method dmem_rd_arlen
  output [7 : 0] dmem_arlen;

  // value method dmem_rd_arsize
  output [2 : 0] dmem_arsize;

  // value method dmem_rd_arburst
  output [1 : 0] dmem_arburst;

  // value method dmem_rd_arlock
  output dmem_arlock;

  // value method dmem_rd_arcache
  output [3 : 0] dmem_arcache;

  // value method dmem_rd_arprot
  output [2 : 0] dmem_arprot;

  // value method dmem_rd_arqos
  output [3 : 0] dmem_arqos;

  // value method dmem_rd_arregion
  output [3 : 0] dmem_arregion;

  // value method dmem_rd_aruser

  // value method dmem_rd_rready
  output dmem_rready;

  // action method dmem_rd_prvalid
  input  dmem_rvalid;

  // action method dmem_rd_prchannel
  input  dmem_rid;
  input  [31 : 0] dmem_rdata;
  input  [1 : 0] dmem_rresp;
  input  dmem_rlast;

  // action method dmem_wr_pawready
  input  dmem_awready;

  // value method dmem_wr_awvalid
  output dmem_awvalid;

  // value method dmem_wr_awid
  output dmem_awid;

  // value method dmem_wr_awaddr
  output [31 : 0] dmem_awaddr;

  // value method dmem_wr_awlen
  output [7 : 0] dmem_awlen;

  // value method dmem_wr_awsize
  output [2 : 0] dmem_awsize;

  // value method dmem_wr_awburst
  output [1 : 0] dmem_awburst;

  // value method dmem_wr_awlock
  output dmem_awlock;

  // value method dmem_wr_awcache
  output [3 : 0] dmem_awcache;

  // value method dmem_wr_awprot
  output [2 : 0] dmem_awprot;

  // value method dmem_wr_awqos
  output [3 : 0] dmem_awqos;

  // value method dmem_wr_awregion
  output [3 : 0] dmem_awregion;

  // value method dmem_wr_awuser

  // action method dmem_wr_pwready
  input  dmem_wready;

  // value method dmem_wr_wvalid
  output dmem_wvalid;

  // value method dmem_wr_wdata
  output [31 : 0] dmem_wdata;

  // value method dmem_wr_wstrb
  output [3 : 0] dmem_wstrb;

  // value method dmem_wr_wlast
  output dmem_wlast;

  // value method dmem_wr_wuser

  // action method dmem_wr_pbvalid
  input  dmem_bvalid;

  // value method dmem_wr_bready
  output dmem_bready;

  // action method dmem_wr_bin
  input  [1 : 0] dmem_bresp;
  input  dmem_bid;

  // signals for module outputs
  wire [31 : 0] core_dmem_rdata,
		core_imem_rdata,
		dmem_araddr,
		dmem_awaddr,
		dmem_wdata,
		imem_araddr,
		imem_awaddr,
		imem_wdata;
  wire [7 : 0] dmem_arlen, dmem_awlen, imem_arlen, imem_awlen;
  wire [3 : 0] dmem_arcache,
	       dmem_arqos,
	       dmem_arregion,
	       dmem_awcache,
	       dmem_awqos,
	       dmem_awregion,
	       dmem_wstrb,
	       imem_arcache,
	       imem_arqos,
	       imem_arregion,
	       imem_awcache,
	       imem_awqos,
	       imem_awregion,
	       imem_wstrb;
  wire [2 : 0] dmem_arprot,
	       dmem_arsize,
	       dmem_awprot,
	       dmem_awsize,
	       imem_arprot,
	       imem_arsize,
	       imem_awprot,
	       imem_awsize;
  wire [1 : 0] core_dmem_bresp,
	       core_dmem_rresp,
	       core_imem_bresp,
	       core_imem_rresp,
	       dmem_arburst,
	       dmem_awburst,
	       imem_arburst,
	       imem_awburst;
  wire core_dmem_arready,
       core_dmem_awready,
       core_dmem_bid,
       core_dmem_bvalid,
       core_dmem_rid,
       core_dmem_rlast,
       core_dmem_rvalid,
       core_dmem_wready,
       core_imem_arready,
       core_imem_awready,
       core_imem_bid,
       core_imem_bvalid,
       core_imem_rid,
       core_imem_rlast,
       core_imem_rvalid,
       core_imem_wready,
       dmem_arid,
       dmem_arlock,
       dmem_arvalid,
       dmem_awid,
       dmem_awlock,
       dmem_awvalid,
       dmem_bready,
       dmem_rready,
       dmem_wlast,
       dmem_wvalid,
       imem_arid,
       imem_arlock,
       imem_arvalid,
       imem_awid,
       imem_awlock,
       imem_awvalid,
       imem_bready,
       imem_rready,
       imem_wlast,
       imem_wvalid;

  // inlined wires
  wire [257 : 0] i_cache_rsp_fifo_rv$port0__write_1,
		 i_cache_rsp_fifo_rv$port1__read,
		 i_cache_rsp_fifo_rv$port2__read;
  wire [62 : 0] d_backend_axi_m_mem_rd_in_rv$port0__write_1,
		d_backend_axi_m_mem_rd_in_rv$port1__read,
		d_backend_axi_m_mem_rd_in_rv$port2__read,
		d_backend_axi_m_mem_wr_in_addr_rv$port1__read,
		d_backend_axi_m_mem_wr_in_addr_rv$port2__read,
		d_frontend_axi_s_core_rd_in_rv$port0__write_1,
		d_frontend_axi_s_core_rd_in_rv$port1__read,
		d_frontend_axi_s_core_rd_in_rv$port2__read,
		d_frontend_axi_s_core_wr_in_addr_rv$port0__write_1,
		d_frontend_axi_s_core_wr_in_addr_rv$port1__read,
		d_frontend_axi_s_core_wr_in_addr_rv$port2__read,
		i_backend_axi_m_mem_rd_in_rv$port0__write_1,
		i_backend_axi_m_mem_rd_in_rv$port1__read,
		i_backend_axi_m_mem_rd_in_rv$port2__read,
		i_backend_axi_m_mem_wr_in_addr_rv$port1__read,
		i_backend_axi_m_mem_wr_in_addr_rv$port2__read,
		i_frontend_axi_s_core_rd_in_rv$port0__write_1,
		i_frontend_axi_s_core_rd_in_rv$port1__read,
		i_frontend_axi_s_core_rd_in_rv$port2__read,
		i_frontend_axi_s_core_wr_in_addr_rv$port0__write_1,
		i_frontend_axi_s_core_wr_in_addr_rv$port1__read,
		i_frontend_axi_s_core_wr_in_addr_rv$port2__read;
  wire [61 : 0] d_frontend_axi_s_core_rd_arinpkg$wget,
		d_frontend_axi_s_core_wr_arinpkg_addr$wget,
		i_frontend_axi_s_core_rd_arinpkg$wget,
		i_frontend_axi_s_core_wr_arinpkg_addr$wget;
  wire [37 : 0] d_backend_axi_m_mem_wr_in_data_rv$port0__write_1,
		d_backend_axi_m_mem_wr_in_data_rv$port1__read,
		d_backend_axi_m_mem_wr_in_data_rv$port2__read,
		d_frontend_axi_s_core_wr_in_data_rv$port0__write_1,
		d_frontend_axi_s_core_wr_in_data_rv$port1__read,
		d_frontend_axi_s_core_wr_in_data_rv$port2__read,
		i_backend_axi_m_mem_wr_in_data_rv$port0__write_1,
		i_backend_axi_m_mem_wr_in_data_rv$port1__read,
		i_backend_axi_m_mem_wr_in_data_rv$port2__read,
		i_frontend_axi_s_core_wr_in_data_rv$port0__write_1,
		i_frontend_axi_s_core_wr_in_data_rv$port1__read,
		i_frontend_axi_s_core_wr_in_data_rv$port2__read;
  wire [36 : 0] d_backend_axi_m_mem_rd_out_rv$port0__write_1,
		d_backend_axi_m_mem_rd_out_rv$port1__read,
		d_backend_axi_m_mem_rd_out_rv$port2__read,
		d_frontend_axi_s_core_rd_out_rv$port0__write_1,
		d_frontend_axi_s_core_rd_out_rv$port1__read,
		d_frontend_axi_s_core_rd_out_rv$port2__read,
		d_frontend_axi_s_core_wr_arinpkg_data$wget,
		i_backend_axi_m_mem_rd_out_rv$port0__write_1,
		i_backend_axi_m_mem_rd_out_rv$port1__read,
		i_backend_axi_m_mem_rd_out_rv$port2__read,
		i_frontend_axi_s_core_rd_out_rv$port0__write_1,
		i_frontend_axi_s_core_rd_out_rv$port1__read,
		i_frontend_axi_s_core_rd_out_rv$port2__read,
		i_frontend_axi_s_core_wr_arinpkg_data$wget;
  wire [35 : 0] d_backend_axi_m_mem_rd_rinpkg$wget,
		i_backend_axi_m_mem_rd_rinpkg$wget;
  wire [3 : 0] d_backend_axi_m_mem_wr_out_rv$port0__write_1,
	       d_backend_axi_m_mem_wr_out_rv$port1__read,
	       d_backend_axi_m_mem_wr_out_rv$port2__read,
	       d_frontend_axi_s_core_wr_out_rv$port0__write_1,
	       d_frontend_axi_s_core_wr_out_rv$port1__read,
	       d_frontend_axi_s_core_wr_out_rv$port2__read,
	       i_backend_axi_m_mem_wr_out_rv$port0__write_1,
	       i_backend_axi_m_mem_wr_out_rv$port1__read,
	       i_backend_axi_m_mem_wr_out_rv$port2__read,
	       i_frontend_axi_s_core_wr_out_rv$port0__write_1,
	       i_frontend_axi_s_core_wr_out_rv$port1__read,
	       i_frontend_axi_s_core_wr_out_rv$port2__read;
  wire [2 : 0] d_backend_axi_m_mem_wr_rinpkg$wget,
	       i_backend_axi_m_mem_wr_rinpkg$wget;
  wire [1 : 0] d_cache_cache_mem_bram_serverAdapter_s1_1$wget,
	       d_cache_cache_mem_bram_serverAdapter_writeWithResp$wget,
	       i_cache_cache_mem_bram_serverAdapter_s1_1$wget,
	       i_cache_cache_mem_bram_serverAdapter_writeWithResp$wget;
  wire d_backend_axi_m_mem_rd_in_rv$EN_port1__write,
       d_backend_axi_m_mem_rd_out_rv$EN_port0__write,
       d_backend_axi_m_mem_wr_in_addr_rv$EN_port1__write,
       d_backend_axi_m_mem_wr_in_data_rv$EN_port1__write,
       d_backend_axi_m_mem_wr_out_rv$EN_port0__write,
       d_cache_cache_mem_bram_serverAdapter_cnt_1$whas,
       d_cache_cache_mem_bram_serverAdapter_outData_enqw$whas,
       d_cache_cache_mem_bram_serverAdapter_writeWithResp$whas,
       d_frontend_axi_s_core_rd_in_rv$EN_port0__write,
       d_frontend_axi_s_core_rd_out_rv$EN_port0__write,
       d_frontend_axi_s_core_rd_out_rv$EN_port1__write,
       d_frontend_axi_s_core_wr_in_addr_rv$EN_port0__write,
       d_frontend_axi_s_core_wr_in_data_rv$EN_port0__write,
       d_frontend_axi_s_core_wr_out_rv$EN_port1__write,
       i_backend_axi_m_mem_rd_in_rv$EN_port1__write,
       i_backend_axi_m_mem_rd_out_rv$EN_port0__write,
       i_backend_axi_m_mem_wr_in_addr_rv$EN_port1__write,
       i_backend_axi_m_mem_wr_in_data_rv$EN_port1__write,
       i_backend_axi_m_mem_wr_out_rv$EN_port0__write,
       i_cache_cache_mem_bram_serverAdapter_cnt_1$whas,
       i_cache_cache_mem_bram_serverAdapter_outData_enqw$whas,
       i_cache_cache_mem_bram_serverAdapter_writeWithResp$whas,
       i_cache_rsp_fifo_rv$EN_port0__write,
       i_cache_rsp_fifo_rv$EN_port1__write,
       i_frontend_axi_s_core_rd_in_rv$EN_port0__write,
       i_frontend_axi_s_core_rd_out_rv$EN_port0__write,
       i_frontend_axi_s_core_rd_out_rv$EN_port1__write,
       i_frontend_axi_s_core_wr_in_addr_rv$EN_port0__write,
       i_frontend_axi_s_core_wr_in_data_rv$EN_port0__write,
       i_frontend_axi_s_core_wr_out_rv$EN_port1__write;

  // register d_backend_axi_cnt_burst
  reg [7 : 0] d_backend_axi_cnt_burst;
  wire [7 : 0] d_backend_axi_cnt_burst$D_IN;
  wire d_backend_axi_cnt_burst$EN;

  // register d_backend_axi_cnt_wr_rsp
  reg [7 : 0] d_backend_axi_cnt_wr_rsp;
  wire [7 : 0] d_backend_axi_cnt_wr_rsp$D_IN;
  wire d_backend_axi_cnt_wr_rsp$EN;

  // register d_backend_axi_line_chunk
  reg [2 : 0] d_backend_axi_line_chunk;
  wire [2 : 0] d_backend_axi_line_chunk$D_IN;
  wire d_backend_axi_line_chunk$EN;

  // register d_backend_axi_line_reg
  reg [255 : 0] d_backend_axi_line_reg;
  wire [255 : 0] d_backend_axi_line_reg$D_IN;
  wire d_backend_axi_line_reg$EN;

  // register d_backend_axi_m_mem_rd_in_rv
  reg [62 : 0] d_backend_axi_m_mem_rd_in_rv;
  wire [62 : 0] d_backend_axi_m_mem_rd_in_rv$D_IN;
  wire d_backend_axi_m_mem_rd_in_rv$EN;

  // register d_backend_axi_m_mem_rd_isRst_isInReset
  reg d_backend_axi_m_mem_rd_isRst_isInReset;
  wire d_backend_axi_m_mem_rd_isRst_isInReset$D_IN,
       d_backend_axi_m_mem_rd_isRst_isInReset$EN;

  // register d_backend_axi_m_mem_rd_out_rv
  reg [36 : 0] d_backend_axi_m_mem_rd_out_rv;
  wire [36 : 0] d_backend_axi_m_mem_rd_out_rv$D_IN;
  wire d_backend_axi_m_mem_rd_out_rv$EN;

  // register d_backend_axi_m_mem_wr_in_addr_rv
  reg [62 : 0] d_backend_axi_m_mem_wr_in_addr_rv;
  wire [62 : 0] d_backend_axi_m_mem_wr_in_addr_rv$D_IN;
  wire d_backend_axi_m_mem_wr_in_addr_rv$EN;

  // register d_backend_axi_m_mem_wr_in_data_rv
  reg [37 : 0] d_backend_axi_m_mem_wr_in_data_rv;
  wire [37 : 0] d_backend_axi_m_mem_wr_in_data_rv$D_IN;
  wire d_backend_axi_m_mem_wr_in_data_rv$EN;

  // register d_backend_axi_m_mem_wr_isRst_isInReset
  reg d_backend_axi_m_mem_wr_isRst_isInReset;
  wire d_backend_axi_m_mem_wr_isRst_isInReset$D_IN,
       d_backend_axi_m_mem_wr_isRst_isInReset$EN;

  // register d_backend_axi_m_mem_wr_out_rv
  reg [3 : 0] d_backend_axi_m_mem_wr_out_rv;
  wire [3 : 0] d_backend_axi_m_mem_wr_out_rv$D_IN;
  wire d_backend_axi_m_mem_wr_out_rv$EN;

  // register d_backend_axi_req_reg
  reg [322 : 0] d_backend_axi_req_reg;
  wire [322 : 0] d_backend_axi_req_reg$D_IN;
  wire d_backend_axi_req_reg$EN;

  // register d_backend_axi_state
  reg [1 : 0] d_backend_axi_state;
  reg [1 : 0] d_backend_axi_state$D_IN;
  wire d_backend_axi_state$EN;

  // register d_backend_axi_tot_burst
  reg [7 : 0] d_backend_axi_tot_burst;
  wire [7 : 0] d_backend_axi_tot_burst$D_IN;
  wire d_backend_axi_tot_burst$EN;

  // register d_backend_axi_wr_rsp_complete
  reg d_backend_axi_wr_rsp_complete;
  wire d_backend_axi_wr_rsp_complete$D_IN, d_backend_axi_wr_rsp_complete$EN;

  // register d_cache_cache_mem_bram_serverAdapter_cnt
  reg [2 : 0] d_cache_cache_mem_bram_serverAdapter_cnt;
  wire [2 : 0] d_cache_cache_mem_bram_serverAdapter_cnt$D_IN;
  wire d_cache_cache_mem_bram_serverAdapter_cnt$EN;

  // register d_cache_cache_mem_bram_serverAdapter_s1
  reg [1 : 0] d_cache_cache_mem_bram_serverAdapter_s1;
  wire [1 : 0] d_cache_cache_mem_bram_serverAdapter_s1$D_IN;
  wire d_cache_cache_mem_bram_serverAdapter_s1$EN;

  // register d_cache_cache_mem_mem_req
  reg [322 : 0] d_cache_cache_mem_mem_req;
  wire [322 : 0] d_cache_cache_mem_mem_req$D_IN;
  wire d_cache_cache_mem_mem_req$EN;

  // register d_cache_cache_mem_prev_line
  reg [255 : 0] d_cache_cache_mem_prev_line;
  wire [255 : 0] d_cache_cache_mem_prev_line$D_IN;
  wire d_cache_cache_mem_prev_line$EN;

  // register d_cache_cache_mem_state
  reg [1 : 0] d_cache_cache_mem_state;
  reg [1 : 0] d_cache_cache_mem_state$D_IN;
  wire d_cache_cache_mem_state$EN;

  // register d_cache_miss_req
  reg [322 : 0] d_cache_miss_req;
  wire [322 : 0] d_cache_miss_req$D_IN;
  wire d_cache_miss_req$EN;

  // register d_cache_state
  reg [2 : 0] d_cache_state;
  reg [2 : 0] d_cache_state$D_IN;
  wire d_cache_state$EN;

  // register d_cache_wb_addr
  reg [31 : 0] d_cache_wb_addr;
  wire [31 : 0] d_cache_wb_addr$D_IN;
  wire d_cache_wb_addr$EN;

  // register d_cache_write_miss
  reg d_cache_write_miss;
  wire d_cache_write_miss$D_IN, d_cache_write_miss$EN;

  // register d_frontend_axi_axi_state
  reg [1 : 0] d_frontend_axi_axi_state;
  reg [1 : 0] d_frontend_axi_axi_state$D_IN;
  wire d_frontend_axi_axi_state$EN;

  // register d_frontend_axi_cache_wr_req
  reg [389 : 0] d_frontend_axi_cache_wr_req;
  reg [389 : 0] d_frontend_axi_cache_wr_req$D_IN;
  wire d_frontend_axi_cache_wr_req$EN;

  // register d_frontend_axi_cnt_bits
  reg [12 : 0] d_frontend_axi_cnt_bits;
  wire [12 : 0] d_frontend_axi_cnt_bits$D_IN;
  wire d_frontend_axi_cnt_bits$EN;

  // register d_frontend_axi_cnt_req
  reg [31 : 0] d_frontend_axi_cnt_req;
  reg [31 : 0] d_frontend_axi_cnt_req$D_IN;
  wire d_frontend_axi_cnt_req$EN;

  // register d_frontend_axi_core_state
  reg [2 : 0] d_frontend_axi_core_state;
  reg [2 : 0] d_frontend_axi_core_state$D_IN;
  wire d_frontend_axi_core_state$EN;

  // register d_frontend_axi_curr_info
  reg [45 : 0] d_frontend_axi_curr_info;
  wire [45 : 0] d_frontend_axi_curr_info$D_IN;
  wire d_frontend_axi_curr_info$EN;

  // register d_frontend_axi_last_req
  reg d_frontend_axi_last_req;
  reg d_frontend_axi_last_req$D_IN;
  wire d_frontend_axi_last_req$EN;

  // register d_frontend_axi_rd_addr
  reg [31 : 0] d_frontend_axi_rd_addr;
  wire [31 : 0] d_frontend_axi_rd_addr$D_IN;
  wire d_frontend_axi_rd_addr$EN;

  // register d_frontend_axi_rd_line
  reg [255 : 0] d_frontend_axi_rd_line;
  wire [255 : 0] d_frontend_axi_rd_line$D_IN;
  wire d_frontend_axi_rd_line$EN;

  // register d_frontend_axi_s_core_rd_in_rv
  reg [62 : 0] d_frontend_axi_s_core_rd_in_rv;
  wire [62 : 0] d_frontend_axi_s_core_rd_in_rv$D_IN;
  wire d_frontend_axi_s_core_rd_in_rv$EN;

  // register d_frontend_axi_s_core_rd_isRst_isInReset
  reg d_frontend_axi_s_core_rd_isRst_isInReset;
  wire d_frontend_axi_s_core_rd_isRst_isInReset$D_IN,
       d_frontend_axi_s_core_rd_isRst_isInReset$EN;

  // register d_frontend_axi_s_core_rd_out_rv
  reg [36 : 0] d_frontend_axi_s_core_rd_out_rv;
  wire [36 : 0] d_frontend_axi_s_core_rd_out_rv$D_IN;
  wire d_frontend_axi_s_core_rd_out_rv$EN;

  // register d_frontend_axi_s_core_wr_in_addr_rv
  reg [62 : 0] d_frontend_axi_s_core_wr_in_addr_rv;
  wire [62 : 0] d_frontend_axi_s_core_wr_in_addr_rv$D_IN;
  wire d_frontend_axi_s_core_wr_in_addr_rv$EN;

  // register d_frontend_axi_s_core_wr_in_data_rv
  reg [37 : 0] d_frontend_axi_s_core_wr_in_data_rv;
  wire [37 : 0] d_frontend_axi_s_core_wr_in_data_rv$D_IN;
  wire d_frontend_axi_s_core_wr_in_data_rv$EN;

  // register d_frontend_axi_s_core_wr_isRst_isInReset
  reg d_frontend_axi_s_core_wr_isRst_isInReset;
  wire d_frontend_axi_s_core_wr_isRst_isInReset$D_IN,
       d_frontend_axi_s_core_wr_isRst_isInReset$EN;

  // register d_frontend_axi_s_core_wr_out_rv
  reg [3 : 0] d_frontend_axi_s_core_wr_out_rv;
  wire [3 : 0] d_frontend_axi_s_core_wr_out_rv$D_IN;
  wire d_frontend_axi_s_core_wr_out_rv$EN;

  // register d_frontend_axi_total_req
  reg [31 : 0] d_frontend_axi_total_req;
  wire [31 : 0] d_frontend_axi_total_req$D_IN;
  wire d_frontend_axi_total_req$EN;

  // register d_frontend_axi_v_axi_data
  reg [96 : 0] d_frontend_axi_v_axi_data;
  reg [96 : 0] d_frontend_axi_v_axi_data$D_IN;
  wire d_frontend_axi_v_axi_data$EN;

  // register d_frontend_axi_wr_req
  reg [61 : 0] d_frontend_axi_wr_req;
  reg [61 : 0] d_frontend_axi_wr_req$D_IN;
  wire d_frontend_axi_wr_req$EN;

  // register i_backend_axi_cnt_burst
  reg [7 : 0] i_backend_axi_cnt_burst;
  wire [7 : 0] i_backend_axi_cnt_burst$D_IN;
  wire i_backend_axi_cnt_burst$EN;

  // register i_backend_axi_cnt_wr_rsp
  reg [7 : 0] i_backend_axi_cnt_wr_rsp;
  wire [7 : 0] i_backend_axi_cnt_wr_rsp$D_IN;
  wire i_backend_axi_cnt_wr_rsp$EN;

  // register i_backend_axi_line_chunk
  reg [2 : 0] i_backend_axi_line_chunk;
  wire [2 : 0] i_backend_axi_line_chunk$D_IN;
  wire i_backend_axi_line_chunk$EN;

  // register i_backend_axi_line_reg
  reg [255 : 0] i_backend_axi_line_reg;
  wire [255 : 0] i_backend_axi_line_reg$D_IN;
  wire i_backend_axi_line_reg$EN;

  // register i_backend_axi_m_mem_rd_in_rv
  reg [62 : 0] i_backend_axi_m_mem_rd_in_rv;
  wire [62 : 0] i_backend_axi_m_mem_rd_in_rv$D_IN;
  wire i_backend_axi_m_mem_rd_in_rv$EN;

  // register i_backend_axi_m_mem_rd_isRst_isInReset
  reg i_backend_axi_m_mem_rd_isRst_isInReset;
  wire i_backend_axi_m_mem_rd_isRst_isInReset$D_IN,
       i_backend_axi_m_mem_rd_isRst_isInReset$EN;

  // register i_backend_axi_m_mem_rd_out_rv
  reg [36 : 0] i_backend_axi_m_mem_rd_out_rv;
  wire [36 : 0] i_backend_axi_m_mem_rd_out_rv$D_IN;
  wire i_backend_axi_m_mem_rd_out_rv$EN;

  // register i_backend_axi_m_mem_wr_in_addr_rv
  reg [62 : 0] i_backend_axi_m_mem_wr_in_addr_rv;
  wire [62 : 0] i_backend_axi_m_mem_wr_in_addr_rv$D_IN;
  wire i_backend_axi_m_mem_wr_in_addr_rv$EN;

  // register i_backend_axi_m_mem_wr_in_data_rv
  reg [37 : 0] i_backend_axi_m_mem_wr_in_data_rv;
  wire [37 : 0] i_backend_axi_m_mem_wr_in_data_rv$D_IN;
  wire i_backend_axi_m_mem_wr_in_data_rv$EN;

  // register i_backend_axi_m_mem_wr_isRst_isInReset
  reg i_backend_axi_m_mem_wr_isRst_isInReset;
  wire i_backend_axi_m_mem_wr_isRst_isInReset$D_IN,
       i_backend_axi_m_mem_wr_isRst_isInReset$EN;

  // register i_backend_axi_m_mem_wr_out_rv
  reg [3 : 0] i_backend_axi_m_mem_wr_out_rv;
  wire [3 : 0] i_backend_axi_m_mem_wr_out_rv$D_IN;
  wire i_backend_axi_m_mem_wr_out_rv$EN;

  // register i_backend_axi_req_reg
  reg [322 : 0] i_backend_axi_req_reg;
  wire [322 : 0] i_backend_axi_req_reg$D_IN;
  wire i_backend_axi_req_reg$EN;

  // register i_backend_axi_state
  reg [1 : 0] i_backend_axi_state;
  reg [1 : 0] i_backend_axi_state$D_IN;
  wire i_backend_axi_state$EN;

  // register i_backend_axi_tot_burst
  reg [7 : 0] i_backend_axi_tot_burst;
  wire [7 : 0] i_backend_axi_tot_burst$D_IN;
  wire i_backend_axi_tot_burst$EN;

  // register i_backend_axi_wr_rsp_complete
  reg i_backend_axi_wr_rsp_complete;
  wire i_backend_axi_wr_rsp_complete$D_IN, i_backend_axi_wr_rsp_complete$EN;

  // register i_cache_cache_mem_bram_serverAdapter_cnt
  reg [2 : 0] i_cache_cache_mem_bram_serverAdapter_cnt;
  wire [2 : 0] i_cache_cache_mem_bram_serverAdapter_cnt$D_IN;
  wire i_cache_cache_mem_bram_serverAdapter_cnt$EN;

  // register i_cache_cache_mem_bram_serverAdapter_s1
  reg [1 : 0] i_cache_cache_mem_bram_serverAdapter_s1;
  wire [1 : 0] i_cache_cache_mem_bram_serverAdapter_s1$D_IN;
  wire i_cache_cache_mem_bram_serverAdapter_s1$EN;

  // register i_cache_cache_mem_mem_req
  reg [322 : 0] i_cache_cache_mem_mem_req;
  wire [322 : 0] i_cache_cache_mem_mem_req$D_IN;
  wire i_cache_cache_mem_mem_req$EN;

  // register i_cache_cache_mem_prev_line
  reg [255 : 0] i_cache_cache_mem_prev_line;
  wire [255 : 0] i_cache_cache_mem_prev_line$D_IN;
  wire i_cache_cache_mem_prev_line$EN;

  // register i_cache_cache_mem_state
  reg [1 : 0] i_cache_cache_mem_state;
  reg [1 : 0] i_cache_cache_mem_state$D_IN;
  wire i_cache_cache_mem_state$EN;

  // register i_cache_rsp_cb_i
  reg [3 : 0] i_cache_rsp_cb_i;
  wire [3 : 0] i_cache_rsp_cb_i$D_IN;
  wire i_cache_rsp_cb_i$EN;

  // register i_cache_rsp_cb_o
  reg [3 : 0] i_cache_rsp_cb_o;
  wire [3 : 0] i_cache_rsp_cb_o$D_IN;
  wire i_cache_rsp_cb_o$EN;

  // register i_cache_rsp_fifo_rv
  reg [257 : 0] i_cache_rsp_fifo_rv;
  wire [257 : 0] i_cache_rsp_fifo_rv$D_IN;
  wire i_cache_rsp_fifo_rv$EN;

  // register i_cache_state
  reg [2 : 0] i_cache_state;
  wire [2 : 0] i_cache_state$D_IN;
  wire i_cache_state$EN;

  // register i_cache_token_hit
  reg [3 : 0] i_cache_token_hit;
  wire [3 : 0] i_cache_token_hit$D_IN;
  wire i_cache_token_hit$EN;

  // register i_frontend_axi_axi_state
  reg [1 : 0] i_frontend_axi_axi_state;
  reg [1 : 0] i_frontend_axi_axi_state$D_IN;
  wire i_frontend_axi_axi_state$EN;

  // register i_frontend_axi_cache_wr_req
  reg [389 : 0] i_frontend_axi_cache_wr_req;
  reg [389 : 0] i_frontend_axi_cache_wr_req$D_IN;
  wire i_frontend_axi_cache_wr_req$EN;

  // register i_frontend_axi_cnt_bits
  reg [12 : 0] i_frontend_axi_cnt_bits;
  wire [12 : 0] i_frontend_axi_cnt_bits$D_IN;
  wire i_frontend_axi_cnt_bits$EN;

  // register i_frontend_axi_cnt_req
  reg [31 : 0] i_frontend_axi_cnt_req;
  reg [31 : 0] i_frontend_axi_cnt_req$D_IN;
  wire i_frontend_axi_cnt_req$EN;

  // register i_frontend_axi_core_state
  reg [2 : 0] i_frontend_axi_core_state;
  reg [2 : 0] i_frontend_axi_core_state$D_IN;
  wire i_frontend_axi_core_state$EN;

  // register i_frontend_axi_curr_info
  reg [45 : 0] i_frontend_axi_curr_info;
  wire [45 : 0] i_frontend_axi_curr_info$D_IN;
  wire i_frontend_axi_curr_info$EN;

  // register i_frontend_axi_last_req
  reg i_frontend_axi_last_req;
  reg i_frontend_axi_last_req$D_IN;
  wire i_frontend_axi_last_req$EN;

  // register i_frontend_axi_rd_addr
  reg [31 : 0] i_frontend_axi_rd_addr;
  wire [31 : 0] i_frontend_axi_rd_addr$D_IN;
  wire i_frontend_axi_rd_addr$EN;

  // register i_frontend_axi_rd_line
  reg [255 : 0] i_frontend_axi_rd_line;
  wire [255 : 0] i_frontend_axi_rd_line$D_IN;
  wire i_frontend_axi_rd_line$EN;

  // register i_frontend_axi_s_core_rd_in_rv
  reg [62 : 0] i_frontend_axi_s_core_rd_in_rv;
  wire [62 : 0] i_frontend_axi_s_core_rd_in_rv$D_IN;
  wire i_frontend_axi_s_core_rd_in_rv$EN;

  // register i_frontend_axi_s_core_rd_isRst_isInReset
  reg i_frontend_axi_s_core_rd_isRst_isInReset;
  wire i_frontend_axi_s_core_rd_isRst_isInReset$D_IN,
       i_frontend_axi_s_core_rd_isRst_isInReset$EN;

  // register i_frontend_axi_s_core_rd_out_rv
  reg [36 : 0] i_frontend_axi_s_core_rd_out_rv;
  wire [36 : 0] i_frontend_axi_s_core_rd_out_rv$D_IN;
  wire i_frontend_axi_s_core_rd_out_rv$EN;

  // register i_frontend_axi_s_core_wr_in_addr_rv
  reg [62 : 0] i_frontend_axi_s_core_wr_in_addr_rv;
  wire [62 : 0] i_frontend_axi_s_core_wr_in_addr_rv$D_IN;
  wire i_frontend_axi_s_core_wr_in_addr_rv$EN;

  // register i_frontend_axi_s_core_wr_in_data_rv
  reg [37 : 0] i_frontend_axi_s_core_wr_in_data_rv;
  wire [37 : 0] i_frontend_axi_s_core_wr_in_data_rv$D_IN;
  wire i_frontend_axi_s_core_wr_in_data_rv$EN;

  // register i_frontend_axi_s_core_wr_isRst_isInReset
  reg i_frontend_axi_s_core_wr_isRst_isInReset;
  wire i_frontend_axi_s_core_wr_isRst_isInReset$D_IN,
       i_frontend_axi_s_core_wr_isRst_isInReset$EN;

  // register i_frontend_axi_s_core_wr_out_rv
  reg [3 : 0] i_frontend_axi_s_core_wr_out_rv;
  wire [3 : 0] i_frontend_axi_s_core_wr_out_rv$D_IN;
  wire i_frontend_axi_s_core_wr_out_rv$EN;

  // register i_frontend_axi_total_req
  reg [31 : 0] i_frontend_axi_total_req;
  wire [31 : 0] i_frontend_axi_total_req$D_IN;
  wire i_frontend_axi_total_req$EN;

  // register i_frontend_axi_v_axi_data
  reg [96 : 0] i_frontend_axi_v_axi_data;
  reg [96 : 0] i_frontend_axi_v_axi_data$D_IN;
  wire i_frontend_axi_v_axi_data$EN;

  // register i_frontend_axi_wr_req
  reg [61 : 0] i_frontend_axi_wr_req;
  reg [61 : 0] i_frontend_axi_wr_req$D_IN;
  wire i_frontend_axi_wr_req$EN;

  // ports of submodule d_backend_axi_mem_req_fifo
  wire [322 : 0] d_backend_axi_mem_req_fifo$D_IN,
		 d_backend_axi_mem_req_fifo$D_OUT;
  wire d_backend_axi_mem_req_fifo$CLR,
       d_backend_axi_mem_req_fifo$DEQ,
       d_backend_axi_mem_req_fifo$EMPTY_N,
       d_backend_axi_mem_req_fifo$ENQ,
       d_backend_axi_mem_req_fifo$FULL_N;

  // ports of submodule d_backend_axi_mem_rsp_fifo
  wire [256 : 0] d_backend_axi_mem_rsp_fifo$D_IN,
		 d_backend_axi_mem_rsp_fifo$D_OUT;
  wire d_backend_axi_mem_rsp_fifo$CLR,
       d_backend_axi_mem_rsp_fifo$DEQ,
       d_backend_axi_mem_rsp_fifo$EMPTY_N,
       d_backend_axi_mem_rsp_fifo$ENQ,
       d_backend_axi_mem_rsp_fifo$FULL_N;

  // ports of submodule d_cache_cache_mem_bram_memory
  wire [255 : 0] d_cache_cache_mem_bram_memory$DI,
		 d_cache_cache_mem_bram_memory$DO;
  wire [4 : 0] d_cache_cache_mem_bram_memory$ADDR;
  wire d_cache_cache_mem_bram_memory$EN, d_cache_cache_mem_bram_memory$WE;

  // ports of submodule d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq
  wire d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$D_IN,
       d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$EN,
       d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$Q_OUT;

  // ports of submodule d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq
  wire d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$D_IN,
       d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$EN,
       d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$Q_OUT;

  // ports of submodule d_cache_cache_mem_bram_serverAdapter_outData_ff
  wire [255 : 0] d_cache_cache_mem_bram_serverAdapter_outData_ff$D_IN,
		 d_cache_cache_mem_bram_serverAdapter_outData_ff$D_OUT;
  wire d_cache_cache_mem_bram_serverAdapter_outData_ff$CLR,
       d_cache_cache_mem_bram_serverAdapter_outData_ff$DEQ,
       d_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N,
       d_cache_cache_mem_bram_serverAdapter_outData_ff$ENQ,
       d_cache_cache_mem_bram_serverAdapter_outData_ff$FULL_N;

  // ports of submodule d_cache_cache_mem_req_fifo
  reg [322 : 0] d_cache_cache_mem_req_fifo$D_IN;
  wire [322 : 0] d_cache_cache_mem_req_fifo$D_OUT;
  wire d_cache_cache_mem_req_fifo$CLR,
       d_cache_cache_mem_req_fifo$DEQ,
       d_cache_cache_mem_req_fifo$EMPTY_N,
       d_cache_cache_mem_req_fifo$ENQ,
       d_cache_cache_mem_req_fifo$FULL_N;

  // ports of submodule d_cache_cache_mem_rsp_fifo
  wire [256 : 0] d_cache_cache_mem_rsp_fifo$D_IN,
		 d_cache_cache_mem_rsp_fifo$D_OUT;
  wire d_cache_cache_mem_rsp_fifo$CLR,
       d_cache_cache_mem_rsp_fifo$DEQ,
       d_cache_cache_mem_rsp_fifo$EMPTY_N,
       d_cache_cache_mem_rsp_fifo$ENQ,
       d_cache_cache_mem_rsp_fifo$FULL_N;

  // ports of submodule d_cache_dirty_array
  wire [7 : 0] d_cache_dirty_array$D_IN, d_cache_dirty_array$D_OUT_1;
  wire [4 : 0] d_cache_dirty_array$ADDR_1,
	       d_cache_dirty_array$ADDR_2,
	       d_cache_dirty_array$ADDR_3,
	       d_cache_dirty_array$ADDR_4,
	       d_cache_dirty_array$ADDR_5,
	       d_cache_dirty_array$ADDR_IN;
  wire d_cache_dirty_array$WE;

  // ports of submodule d_cache_mem_req_fifo
  reg [322 : 0] d_cache_mem_req_fifo$D_IN;
  wire [322 : 0] d_cache_mem_req_fifo$D_OUT;
  wire d_cache_mem_req_fifo$CLR,
       d_cache_mem_req_fifo$DEQ,
       d_cache_mem_req_fifo$EMPTY_N,
       d_cache_mem_req_fifo$ENQ,
       d_cache_mem_req_fifo$FULL_N;

  // ports of submodule d_cache_mem_rsp_fifo
  wire [256 : 0] d_cache_mem_rsp_fifo$D_IN, d_cache_mem_rsp_fifo$D_OUT;
  wire d_cache_mem_rsp_fifo$CLR,
       d_cache_mem_rsp_fifo$DEQ,
       d_cache_mem_rsp_fifo$EMPTY_N,
       d_cache_mem_rsp_fifo$ENQ,
       d_cache_mem_rsp_fifo$FULL_N;

  // ports of submodule d_cache_req_fifo
  wire [322 : 0] d_cache_req_fifo$D_IN, d_cache_req_fifo$D_OUT;
  wire d_cache_req_fifo$CLR,
       d_cache_req_fifo$DEQ,
       d_cache_req_fifo$EMPTY_N,
       d_cache_req_fifo$ENQ,
       d_cache_req_fifo$FULL_N;

  // ports of submodule d_cache_rsp_fifo
  wire [256 : 0] d_cache_rsp_fifo$D_IN, d_cache_rsp_fifo$D_OUT;
  wire d_cache_rsp_fifo$CLR,
       d_cache_rsp_fifo$DEQ,
       d_cache_rsp_fifo$EMPTY_N,
       d_cache_rsp_fifo$ENQ,
       d_cache_rsp_fifo$FULL_N;

  // ports of submodule d_cache_tag_array
  wire [22 : 0] d_cache_tag_array$D_IN, d_cache_tag_array$D_OUT_1;
  wire [4 : 0] d_cache_tag_array$ADDR_1,
	       d_cache_tag_array$ADDR_2,
	       d_cache_tag_array$ADDR_3,
	       d_cache_tag_array$ADDR_4,
	       d_cache_tag_array$ADDR_5,
	       d_cache_tag_array$ADDR_IN;
  wire d_cache_tag_array$WE;

  // ports of submodule d_frontend_axi_rd_req_fifo
  wire [45 : 0] d_frontend_axi_rd_req_fifo$D_IN,
		d_frontend_axi_rd_req_fifo$D_OUT;
  wire d_frontend_axi_rd_req_fifo$CLR,
       d_frontend_axi_rd_req_fifo$DEQ,
       d_frontend_axi_rd_req_fifo$EMPTY_N,
       d_frontend_axi_rd_req_fifo$ENQ,
       d_frontend_axi_rd_req_fifo$FULL_N;

  // ports of submodule d_frontend_axi_req_fifo
  reg [322 : 0] d_frontend_axi_req_fifo$D_IN;
  wire [322 : 0] d_frontend_axi_req_fifo$D_OUT;
  wire d_frontend_axi_req_fifo$CLR,
       d_frontend_axi_req_fifo$DEQ,
       d_frontend_axi_req_fifo$EMPTY_N,
       d_frontend_axi_req_fifo$ENQ,
       d_frontend_axi_req_fifo$FULL_N;

  // ports of submodule d_frontend_axi_rsp_fifo
  wire [256 : 0] d_frontend_axi_rsp_fifo$D_IN, d_frontend_axi_rsp_fifo$D_OUT;
  wire d_frontend_axi_rsp_fifo$CLR,
       d_frontend_axi_rsp_fifo$DEQ,
       d_frontend_axi_rsp_fifo$EMPTY_N,
       d_frontend_axi_rsp_fifo$ENQ,
       d_frontend_axi_rsp_fifo$FULL_N;

  // ports of submodule i_backend_axi_mem_req_fifo
  wire [322 : 0] i_backend_axi_mem_req_fifo$D_IN,
		 i_backend_axi_mem_req_fifo$D_OUT;
  wire i_backend_axi_mem_req_fifo$CLR,
       i_backend_axi_mem_req_fifo$DEQ,
       i_backend_axi_mem_req_fifo$EMPTY_N,
       i_backend_axi_mem_req_fifo$ENQ,
       i_backend_axi_mem_req_fifo$FULL_N;

  // ports of submodule i_backend_axi_mem_rsp_fifo
  wire [256 : 0] i_backend_axi_mem_rsp_fifo$D_IN,
		 i_backend_axi_mem_rsp_fifo$D_OUT;
  wire i_backend_axi_mem_rsp_fifo$CLR,
       i_backend_axi_mem_rsp_fifo$DEQ,
       i_backend_axi_mem_rsp_fifo$EMPTY_N,
       i_backend_axi_mem_rsp_fifo$ENQ,
       i_backend_axi_mem_rsp_fifo$FULL_N;

  // ports of submodule i_cache_cache_mem_bram_memory
  wire [255 : 0] i_cache_cache_mem_bram_memory$DI,
		 i_cache_cache_mem_bram_memory$DO;
  wire [4 : 0] i_cache_cache_mem_bram_memory$ADDR;
  wire i_cache_cache_mem_bram_memory$EN, i_cache_cache_mem_bram_memory$WE;

  // ports of submodule i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq
  wire i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$D_IN,
       i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$EN,
       i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$Q_OUT;

  // ports of submodule i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq
  wire i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$D_IN,
       i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$EN,
       i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$Q_OUT;

  // ports of submodule i_cache_cache_mem_bram_serverAdapter_outData_ff
  wire [255 : 0] i_cache_cache_mem_bram_serverAdapter_outData_ff$D_IN,
		 i_cache_cache_mem_bram_serverAdapter_outData_ff$D_OUT;
  wire i_cache_cache_mem_bram_serverAdapter_outData_ff$CLR,
       i_cache_cache_mem_bram_serverAdapter_outData_ff$DEQ,
       i_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N,
       i_cache_cache_mem_bram_serverAdapter_outData_ff$ENQ,
       i_cache_cache_mem_bram_serverAdapter_outData_ff$FULL_N;

  // ports of submodule i_cache_cache_mem_req_fifo
  wire [322 : 0] i_cache_cache_mem_req_fifo$D_IN,
		 i_cache_cache_mem_req_fifo$D_OUT;
  wire i_cache_cache_mem_req_fifo$CLR,
       i_cache_cache_mem_req_fifo$DEQ,
       i_cache_cache_mem_req_fifo$EMPTY_N,
       i_cache_cache_mem_req_fifo$ENQ,
       i_cache_cache_mem_req_fifo$FULL_N;

  // ports of submodule i_cache_cache_mem_rsp_fifo
  wire [256 : 0] i_cache_cache_mem_rsp_fifo$D_IN,
		 i_cache_cache_mem_rsp_fifo$D_OUT;
  wire i_cache_cache_mem_rsp_fifo$CLR,
       i_cache_cache_mem_rsp_fifo$DEQ,
       i_cache_cache_mem_rsp_fifo$EMPTY_N,
       i_cache_cache_mem_rsp_fifo$ENQ,
       i_cache_cache_mem_rsp_fifo$FULL_N;

  // ports of submodule i_cache_hit_req_fifo
  wire i_cache_hit_req_fifo$CLR,
       i_cache_hit_req_fifo$DEQ,
       i_cache_hit_req_fifo$D_IN,
       i_cache_hit_req_fifo$D_OUT,
       i_cache_hit_req_fifo$EMPTY_N,
       i_cache_hit_req_fifo$ENQ,
       i_cache_hit_req_fifo$FULL_N;

  // ports of submodule i_cache_mem_req_fifo
  wire [322 : 0] i_cache_mem_req_fifo$D_IN, i_cache_mem_req_fifo$D_OUT;
  wire i_cache_mem_req_fifo$CLR,
       i_cache_mem_req_fifo$DEQ,
       i_cache_mem_req_fifo$EMPTY_N,
       i_cache_mem_req_fifo$ENQ,
       i_cache_mem_req_fifo$FULL_N;

  // ports of submodule i_cache_mem_rsp_fifo
  wire [256 : 0] i_cache_mem_rsp_fifo$D_IN, i_cache_mem_rsp_fifo$D_OUT;
  wire i_cache_mem_rsp_fifo$CLR,
       i_cache_mem_rsp_fifo$DEQ,
       i_cache_mem_rsp_fifo$EMPTY_N,
       i_cache_mem_rsp_fifo$ENQ,
       i_cache_mem_rsp_fifo$FULL_N;

  // ports of submodule i_cache_miss_q
  wire [326 : 0] i_cache_miss_q$D_IN, i_cache_miss_q$D_OUT;
  wire i_cache_miss_q$CLR,
       i_cache_miss_q$DEQ,
       i_cache_miss_q$EMPTY_N,
       i_cache_miss_q$ENQ,
       i_cache_miss_q$FULL_N;

  // ports of submodule i_cache_req_fifo
  wire [322 : 0] i_cache_req_fifo$D_IN, i_cache_req_fifo$D_OUT;
  wire i_cache_req_fifo$CLR,
       i_cache_req_fifo$DEQ,
       i_cache_req_fifo$EMPTY_N,
       i_cache_req_fifo$ENQ,
       i_cache_req_fifo$FULL_N;

  // ports of submodule i_cache_rsp_cb_buff
  reg [257 : 0] i_cache_rsp_cb_buff$D_IN;
  reg [3 : 0] i_cache_rsp_cb_buff$ADDR_IN;
  wire [257 : 0] i_cache_rsp_cb_buff$D_OUT_1;
  wire [3 : 0] i_cache_rsp_cb_buff$ADDR_1,
	       i_cache_rsp_cb_buff$ADDR_2,
	       i_cache_rsp_cb_buff$ADDR_3,
	       i_cache_rsp_cb_buff$ADDR_4,
	       i_cache_rsp_cb_buff$ADDR_5;
  wire i_cache_rsp_cb_buff$WE;

  // ports of submodule i_cache_rsp_cb_n
  wire [4 : 0] i_cache_rsp_cb_n$DATA_A,
	       i_cache_rsp_cb_n$DATA_B,
	       i_cache_rsp_cb_n$DATA_C,
	       i_cache_rsp_cb_n$DATA_F,
	       i_cache_rsp_cb_n$Q_OUT;
  wire i_cache_rsp_cb_n$ADDA,
       i_cache_rsp_cb_n$ADDB,
       i_cache_rsp_cb_n$SETC,
       i_cache_rsp_cb_n$SETF;

  // ports of submodule i_cache_tag_array
  wire [22 : 0] i_cache_tag_array$D_IN, i_cache_tag_array$D_OUT_1;
  wire [4 : 0] i_cache_tag_array$ADDR_1,
	       i_cache_tag_array$ADDR_2,
	       i_cache_tag_array$ADDR_3,
	       i_cache_tag_array$ADDR_4,
	       i_cache_tag_array$ADDR_5,
	       i_cache_tag_array$ADDR_IN;
  wire i_cache_tag_array$WE;

  // ports of submodule i_frontend_axi_rd_req_fifo
  wire [45 : 0] i_frontend_axi_rd_req_fifo$D_IN,
		i_frontend_axi_rd_req_fifo$D_OUT;
  wire i_frontend_axi_rd_req_fifo$CLR,
       i_frontend_axi_rd_req_fifo$DEQ,
       i_frontend_axi_rd_req_fifo$EMPTY_N,
       i_frontend_axi_rd_req_fifo$ENQ,
       i_frontend_axi_rd_req_fifo$FULL_N;

  // ports of submodule i_frontend_axi_req_fifo
  reg [322 : 0] i_frontend_axi_req_fifo$D_IN;
  wire [322 : 0] i_frontend_axi_req_fifo$D_OUT;
  wire i_frontend_axi_req_fifo$CLR,
       i_frontend_axi_req_fifo$DEQ,
       i_frontend_axi_req_fifo$EMPTY_N,
       i_frontend_axi_req_fifo$ENQ,
       i_frontend_axi_req_fifo$FULL_N;

  // ports of submodule i_frontend_axi_rsp_fifo
  wire [256 : 0] i_frontend_axi_rsp_fifo$D_IN, i_frontend_axi_rsp_fifo$D_OUT;
  wire i_frontend_axi_rsp_fifo$CLR,
       i_frontend_axi_rsp_fifo$DEQ,
       i_frontend_axi_rsp_fifo$EMPTY_N,
       i_frontend_axi_rsp_fifo$ENQ,
       i_frontend_axi_rsp_fifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_i_cache_send_rsp,
       WILL_FIRE_RL_d_backend_axi_mem_get_rd,
       WILL_FIRE_RL_d_backend_axi_mem_get_wr_rsp,
       WILL_FIRE_RL_d_backend_axi_mem_req_rule,
       WILL_FIRE_RL_d_backend_axi_mem_send_data,
       WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp,
       WILL_FIRE_RL_d_cache_cache_mem_handle_req,
       WILL_FIRE_RL_d_cache_cache_mem_rsp,
       WILL_FIRE_RL_d_cache_cache_mem_write_data_st,
       WILL_FIRE_RL_d_cache_core_req,
       WILL_FIRE_RL_d_cache_send_fill_req,
       WILL_FIRE_RL_d_cache_start_miss,
       WILL_FIRE_RL_d_cache_wait_fill_rsp,
       WILL_FIRE_RL_d_cache_wait_mem_rsp_,
       WILL_FIRE_RL_d_cache_writeback_rsp,
       WILL_FIRE_RL_d_frontend_axi_rd_axi_ready,
       WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data,
       WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data,
       WILL_FIRE_RL_d_frontend_axi_rd_get_req,
       WILL_FIRE_RL_d_frontend_axi_rd_req_send,
       WILL_FIRE_RL_d_frontend_axi_wr_get_req,
       WILL_FIRE_RL_d_frontend_axi_wr_leftover_data,
       WILL_FIRE_RL_d_frontend_axi_wr_rq_wait,
       WILL_FIRE_RL_d_frontend_axi_wr_set_line,
       WILL_FIRE_RL_i_backend_axi_mem_get_rd,
       WILL_FIRE_RL_i_backend_axi_mem_get_wr_rsp,
       WILL_FIRE_RL_i_backend_axi_mem_req_rule,
       WILL_FIRE_RL_i_backend_axi_mem_send_data,
       WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp,
       WILL_FIRE_RL_i_cache_cache_mem_handle_req,
       WILL_FIRE_RL_i_cache_cache_mem_rsp,
       WILL_FIRE_RL_i_cache_cache_mem_write_data_st,
       WILL_FIRE_RL_i_cache_core_req,
       WILL_FIRE_RL_i_cache_fill_rule,
       WILL_FIRE_RL_i_frontend_axi_rd_axi_ready,
       WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data,
       WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data,
       WILL_FIRE_RL_i_frontend_axi_rd_get_req,
       WILL_FIRE_RL_i_frontend_axi_rd_req_send,
       WILL_FIRE_RL_i_frontend_axi_wr_get_req,
       WILL_FIRE_RL_i_frontend_axi_wr_leftover_data,
       WILL_FIRE_RL_i_frontend_axi_wr_rq_wait,
       WILL_FIRE_RL_i_frontend_axi_wr_set_line;

  // inputs to muxes for submodule ports
  wire [389 : 0] MUX_d_frontend_axi_cache_wr_req$write_1__VAL_1,
		 MUX_d_frontend_axi_cache_wr_req$write_1__VAL_2,
		 MUX_d_frontend_axi_cache_wr_req$write_1__VAL_3,
		 MUX_i_frontend_axi_cache_wr_req$write_1__VAL_1,
		 MUX_i_frontend_axi_cache_wr_req$write_1__VAL_2,
		 MUX_i_frontend_axi_cache_wr_req$write_1__VAL_3;
  wire [322 : 0] MUX_d_cache_cache_mem_req_fifo$enq_1__VAL_2,
		 MUX_d_cache_cache_mem_req_fifo$enq_1__VAL_3,
		 MUX_d_cache_mem_req_fifo$enq_1__VAL_2,
		 MUX_d_cache_mem_req_fifo$enq_1__VAL_3,
		 MUX_d_frontend_axi_req_fifo$enq_1__VAL_1,
		 MUX_d_frontend_axi_req_fifo$enq_1__VAL_2,
		 MUX_d_frontend_axi_req_fifo$enq_1__VAL_3,
		 MUX_i_cache_cache_mem_req_fifo$enq_1__VAL_2,
		 MUX_i_frontend_axi_req_fifo$enq_1__VAL_1,
		 MUX_i_frontend_axi_req_fifo$enq_1__VAL_2,
		 MUX_i_frontend_axi_req_fifo$enq_1__VAL_3;
  wire [257 : 0] MUX_i_cache_rsp_cb_buff$upd_2__VAL_2,
		 MUX_i_cache_rsp_cb_buff$upd_2__VAL_3;
  wire [256 : 0] MUX_d_backend_axi_mem_rsp_fifo$enq_1__VAL_1,
		 MUX_d_cache_cache_mem_rsp_fifo$enq_1__VAL_1,
		 MUX_d_cache_cache_mem_rsp_fifo$enq_1__VAL_2,
		 MUX_i_backend_axi_mem_rsp_fifo$enq_1__VAL_1,
		 MUX_i_cache_cache_mem_rsp_fifo$enq_1__VAL_1,
		 MUX_i_cache_cache_mem_rsp_fifo$enq_1__VAL_2;
  wire [255 : 0] MUX_d_cache_cache_mem_bram_memory$put_3__VAL_2,
		 MUX_i_cache_cache_mem_bram_memory$put_3__VAL_2;
  wire [96 : 0] MUX_d_frontend_axi_v_axi_data$write_1__VAL_1,
		MUX_d_frontend_axi_v_axi_data$write_1__VAL_2,
		MUX_d_frontend_axi_v_axi_data$write_1__VAL_3,
		MUX_i_frontend_axi_v_axi_data$write_1__VAL_1,
		MUX_i_frontend_axi_v_axi_data$write_1__VAL_2,
		MUX_i_frontend_axi_v_axi_data$write_1__VAL_3;
  wire [61 : 0] MUX_d_frontend_axi_wr_req$write_1__VAL_1,
		MUX_i_frontend_axi_wr_req$write_1__VAL_1;
  wire [36 : 0] MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_1,
		MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_2,
		MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_1,
		MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_2;
  wire [31 : 0] MUX_d_frontend_axi_cnt_req$write_1__VAL_1,
		MUX_d_frontend_axi_rd_addr$write_1__VAL_2,
		MUX_d_frontend_axi_total_req$write_1__VAL_1,
		MUX_d_frontend_axi_total_req$write_1__VAL_2,
		MUX_i_frontend_axi_cnt_req$write_1__VAL_1,
		MUX_i_frontend_axi_rd_addr$write_1__VAL_2,
		MUX_i_frontend_axi_total_req$write_1__VAL_1,
		MUX_i_frontend_axi_total_req$write_1__VAL_2;
  wire [12 : 0] MUX_d_frontend_axi_cnt_bits$write_1__VAL_1,
		MUX_i_frontend_axi_cnt_bits$write_1__VAL_1;
  wire [7 : 0] MUX_d_backend_axi_cnt_burst$write_1__VAL_2,
	       MUX_d_backend_axi_cnt_wr_rsp$write_1__VAL_2,
	       MUX_d_cache_dirty_array$upd_2__VAL_1,
	       MUX_i_backend_axi_cnt_burst$write_1__VAL_2,
	       MUX_i_backend_axi_cnt_wr_rsp$write_1__VAL_2;
  wire [2 : 0] MUX_d_backend_axi_line_chunk$write_1__VAL_2,
	       MUX_d_cache_state$write_1__VAL_1,
	       MUX_d_cache_state$write_1__VAL_2,
	       MUX_d_cache_state$write_1__VAL_3,
	       MUX_d_frontend_axi_core_state$write_1__VAL_2,
	       MUX_d_frontend_axi_core_state$write_1__VAL_3,
	       MUX_d_frontend_axi_core_state$write_1__VAL_4,
	       MUX_i_backend_axi_line_chunk$write_1__VAL_2,
	       MUX_i_frontend_axi_core_state$write_1__VAL_2,
	       MUX_i_frontend_axi_core_state$write_1__VAL_3,
	       MUX_i_frontend_axi_core_state$write_1__VAL_4;
  wire [1 : 0] MUX_d_backend_axi_state$write_1__VAL_3,
	       MUX_d_backend_axi_state$write_1__VAL_4,
	       MUX_d_cache_cache_mem_state$write_1__VAL_1,
	       MUX_d_frontend_axi_axi_state$write_1__VAL_1,
	       MUX_d_frontend_axi_axi_state$write_1__VAL_2,
	       MUX_i_backend_axi_state$write_1__VAL_3,
	       MUX_i_backend_axi_state$write_1__VAL_4,
	       MUX_i_cache_cache_mem_state$write_1__VAL_1,
	       MUX_i_frontend_axi_axi_state$write_1__VAL_1,
	       MUX_i_frontend_axi_axi_state$write_1__VAL_2;
  wire MUX_d_backend_axi_cnt_burst$write_1__SEL_1,
       MUX_d_backend_axi_line_chunk$write_1__SEL_1,
       MUX_d_backend_axi_mem_rsp_fifo$enq_1__SEL_1,
       MUX_d_backend_axi_state$write_1__SEL_1,
       MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_1,
       MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_2,
       MUX_d_cache_cache_mem_rsp_fifo$enq_1__SEL_1,
       MUX_d_cache_dirty_array$upd_1__SEL_1,
       MUX_d_cache_mem_req_fifo$enq_1__SEL_1,
       MUX_d_cache_rsp_fifo$enq_1__SEL_1,
       MUX_d_frontend_axi_axi_state$write_1__SEL_1,
       MUX_d_frontend_axi_axi_state$write_1__SEL_2,
       MUX_d_frontend_axi_axi_state$write_1__SEL_3,
       MUX_d_frontend_axi_cnt_bits$write_1__PSEL_1,
       MUX_d_frontend_axi_cnt_bits$write_1__SEL_1,
       MUX_d_frontend_axi_cnt_req$write_1__SEL_1,
       MUX_d_frontend_axi_cnt_req$write_1__SEL_2,
       MUX_d_frontend_axi_cnt_req$write_1__SEL_4,
       MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__SEL_1,
       MUX_i_backend_axi_cnt_burst$write_1__SEL_1,
       MUX_i_backend_axi_line_chunk$write_1__SEL_1,
       MUX_i_backend_axi_mem_rsp_fifo$enq_1__SEL_1,
       MUX_i_backend_axi_state$write_1__SEL_1,
       MUX_i_cache_cache_mem_req_fifo$enq_1__SEL_1,
       MUX_i_cache_cache_mem_rsp_fifo$enq_1__SEL_1,
       MUX_i_cache_rsp_cb_buff$upd_1__SEL_1,
       MUX_i_cache_rsp_cb_buff$upd_1__SEL_2,
       MUX_i_frontend_axi_axi_state$write_1__SEL_1,
       MUX_i_frontend_axi_axi_state$write_1__SEL_2,
       MUX_i_frontend_axi_axi_state$write_1__SEL_3,
       MUX_i_frontend_axi_cnt_bits$write_1__PSEL_1,
       MUX_i_frontend_axi_cnt_bits$write_1__SEL_1,
       MUX_i_frontend_axi_cnt_req$write_1__SEL_1,
       MUX_i_frontend_axi_cnt_req$write_1__SEL_2,
       MUX_i_frontend_axi_cnt_req$write_1__SEL_4,
       MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q16,
	       CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q18,
	       CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q4,
	       CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q6,
	       CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5,
	       CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3,
	       CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17,
	       CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q31,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q32,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q33,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q7,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q8,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q9,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q10,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q34,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q11,
	       CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q35,
	       CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q12,
	       CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q36,
	       CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q13,
	       CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q37,
	       CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q14,
	       CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q38,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q19,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q20,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q21,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q43,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q44,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q45,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q22,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q46,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q23,
	       CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q47,
	       CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q24,
	       CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q48,
	       CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q25,
	       CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q49,
	       CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q26,
	       CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q50,
	       data__h1082863,
	       data__h1179674;
  reg [3 : 0] strb__h1082864, strb__h1179675;
  wire [255 : 0] IF_7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_re_ETC___d674,
		 IF_7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_re_ETC___d739,
		 IF_7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_re_ETC___d297,
		 IF_7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_re_ETC___d362,
		 IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1701,
		 IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1541,
		 d_frontend_axi_cache_wr_req_96_BITS_357_TO_134_ETC___d653,
		 d_frontend_axi_cache_wr_req_96_BITS_357_TO_134_ETC___d732,
		 i_frontend_axi_cache_wr_req_19_BITS_357_TO_134_ETC___d276,
		 i_frontend_axi_cache_wr_req_19_BITS_357_TO_134_ETC___d355;
  wire [223 : 0] IF_0_CONCAT_d_frontend_axi_cache_wr_req_96_BIT_ETC___d646,
		 IF_0_CONCAT_d_frontend_axi_cache_wr_req_96_BIT_ETC___d726,
		 IF_0_CONCAT_i_frontend_axi_cache_wr_req_19_BIT_ETC___d269,
		 IF_0_CONCAT_i_frontend_axi_cache_wr_req_19_BIT_ETC___d349;
  wire [191 : 0] IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1694,
		 IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1534;
  wire [127 : 0] IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1687,
		 IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1527;
  wire [31 : 0] IF_0_CONCAT_d_frontend_axi_v_axi_data_78_BITS__ETC___d520,
		IF_0_CONCAT_d_frontend_axi_v_axi_data_78_BITS__ETC___d551,
		IF_0_CONCAT_i_frontend_axi_v_axi_data_00_BITS__ETC___d142,
		IF_0_CONCAT_i_frontend_axi_v_axi_data_00_BITS__ETC___d173,
		IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708,
		IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628,
		IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331,
		IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251,
		_1_MINUS_d_frontend_axi_v_axi_data_BITS_32_TO_1__q2,
		_1_MINUS_i_frontend_axi_v_axi_data_BITS_32_TO_1__q1,
		addr__h904337,
		available_chunks__h128320,
		available_chunks__h261199,
		available_chunks__h433600,
		available_chunks__h566479,
		axi_rsp_data__h102187,
		axi_rsp_data__h144280,
		axi_rsp_data__h407470,
		axi_rsp_data__h449560,
		core_r_addr__h216971,
		core_r_addr__h522251,
		d_frontend_axi_cache_wr_req_96_BITS_133_TO_102_ETC___d652,
		d_frontend_axi_cache_wr_req_96_BITS_133_TO_102_ETC___d731,
		i_frontend_axi_cache_wr_req_19_BITS_133_TO_102_ETC___d275,
		i_frontend_axi_cache_wr_req_19_BITS_133_TO_102_ETC___d354,
		init_chunk_line__h128319,
		init_chunk_line__h261198,
		init_chunk_line__h433599,
		init_chunk_line__h566478,
		new_words__h201036,
		new_words__h506316,
		r_addr__h953774,
		res___1_addr__h102279,
		res___1_addr__h217367,
		res___1_addr__h407559,
		res___1_addr__h522647,
		res___1_strb__h217369,
		res___1_strb__h277574,
		res___1_strb__h522649,
		res___1_strb__h582854,
		res_addr__h144386,
		res_addr__h277601,
		res_addr__h449666,
		res_addr__h582881,
		res_axi_data__h217399,
		res_axi_data__h277604,
		res_axi_data__h522679,
		res_axi_data__h582884,
		res_axi_word_chunk__h144388,
		res_axi_word_chunk__h449668,
		x1_avValue_axi_data__h228362,
		x1_avValue_axi_data__h288258,
		x1_avValue_axi_data__h533642,
		x1_avValue_axi_data__h593538,
		x1_avValue_strb__h228361,
		x1_avValue_strb__h288257,
		x1_avValue_strb__h533641,
		x1_avValue_strb__h593537,
		x25104_MINUS_1__q40,
		x68865_MINUS_1__q30,
		x74145_MINUS_1__q42,
		x9818_MINUS_1__q28,
		x__h128341,
		x__h151501,
		x__h151661,
		x__h168865,
		x__h19818,
		x__h201098,
		x__h228009,
		x__h261222,
		x__h287872,
		x__h288270,
		x__h289337,
		x__h289384,
		x__h325104,
		x__h433621,
		x__h456781,
		x__h456941,
		x__h474145,
		x__h506378,
		x__h533289,
		x__h566502,
		x__h593152,
		x__h593550,
		x__h594617,
		x__h594664,
		x_addr__h228244,
		x_addr__h533524,
		x_addr__h698385,
		y__h102305,
		y__h144411,
		y__h168868,
		y__h19821,
		y__h228007,
		y__h228010,
		y__h228400,
		y__h287870,
		y__h288317,
		y__h325107,
		y__h407585,
		y__h449691,
		y__h474148,
		y__h533287,
		y__h533290,
		y__h533680,
		y__h593150,
		y__h593597;
  wire [26 : 0] x__h904361;
  wire [12 : 0] _0_CONCAT_d_frontend_axi_s_core_rd_in_rvport1__ETC__q39,
		_0_CONCAT_d_frontend_axi_s_core_wr_in_addr_rvp_ETC__q41,
		_0_CONCAT_i_frontend_axi_s_core_rd_in_rvport1__ETC__q27,
		_0_CONCAT_i_frontend_axi_s_core_wr_in_addr_rvp_ETC__q29,
		x__h168871,
		x__h19832,
		x__h325118,
		x__h474151;
  wire [7 : 0] IF_NOT_d_cache_req_fifo_first__287_BITS_13_TO__ETC___d1349,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_17_TO__ETC___d1353,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_21_TO__ETC___d1357,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_25_TO__ETC___d1361,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_29_TO__ETC___d1365,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_5_TO_2_ETC___d1341,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_9_TO_6_ETC___d1345,
	       result__h854477,
	       result__h854541,
	       result__h854605,
	       result__h854669,
	       result__h854733,
	       result__h854797,
	       result__h854861;
  wire [4 : 0] x__h168844, x__h19797, x__h325083, x__h474124;
  wire [3 : 0] res_axi_strb__h217400,
	       res_axi_strb__h277605,
	       res_axi_strb__h522680,
	       res_axi_strb__h582885,
	       x1_avValue_axi_strb__h228363,
	       x1_avValue_axi_strb__h288259,
	       x1_avValue_axi_strb__h533643,
	       x1_avValue_axi_strb__h593539;
  wire [2 : 0] d_cache_cache_mem_bram_serverAdapter_cnt_075_P_ETC___d1081,
	       i_cache_cache_mem_bram_serverAdapter_cnt_74_PL_ETC___d780;
  wire IF_7_MINUS_0_CONCAT_d_frontend_axi_v_axi_data__ETC___d502,
       IF_7_MINUS_0_CONCAT_i_frontend_axi_v_axi_data__ETC___d124,
       _0_CONCAT_d_frontend_axi_cache_wr_req_96_BITS_3_ETC___d614,
       _0_CONCAT_d_frontend_axi_v_axi_data_78_BITS_69__ETC___d509,
       _0_CONCAT_i_frontend_axi_cache_wr_req_19_BITS_3_ETC___d237,
       _0_CONCAT_i_frontend_axi_v_axi_data_00_BITS_69__ETC___d131,
       _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608,
       _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231,
       d_backend_axi_cnt_burst_721_EQ_d_backend_axi_t_ETC___d1734,
       d_backend_axi_cnt_wr_rsp_744_EQ_d_backend_axi__ETC___d1746,
       d_cache_cache_mem_bram_serverAdapter_cnt_075_S_ETC___d1108,
       d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294,
       d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488,
       d_frontend_axi_v_axi_data_78_BITS_32_TO_1_94_U_ETC___d508,
       i_backend_axi_cnt_burst_561_EQ_i_backend_axi_t_ETC___d1574,
       i_backend_axi_cnt_wr_rsp_584_EQ_i_backend_axi__ETC___d1586,
       i_cache_cache_mem_bram_serverAdapter_cnt_74_SLT_3___d808,
       i_cache_rsp_cb_n_value__80_ULE_9_81_AND_i_cach_ETC___d989,
       i_cache_tag_array_sub_i_cache_req_fifo_first___ETC___d1007,
       i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110,
       i_frontend_axi_v_axi_data_00_BITS_32_TO_1_16_U_ETC___d130;

  // value method core_imem_rd_arready
  assign core_imem_arready =
	     !i_frontend_axi_s_core_rd_isRst_isInReset &&
	     !i_frontend_axi_s_core_rd_in_rv[62] ;

  // value method core_imem_rd_rvalid
  assign core_imem_rvalid =
	     !i_frontend_axi_s_core_rd_isRst_isInReset &&
	     i_frontend_axi_s_core_rd_out_rv$port1__read[36] ;

  // value method core_imem_rd_rid
  assign core_imem_rid =
	     i_frontend_axi_s_core_rd_out_rv$port1__read[36] &&
	     i_frontend_axi_s_core_rd_out_rv$port1__read[35] ;

  // value method core_imem_rd_rdata
  assign core_imem_rdata =
	     i_frontend_axi_s_core_rd_out_rv$port1__read[36] ?
	       i_frontend_axi_s_core_rd_out_rv$port1__read[34:3] :
	       32'd0 ;

  // value method core_imem_rd_rresp
  assign core_imem_rresp =
	     i_frontend_axi_s_core_rd_out_rv$port1__read[36] ?
	       i_frontend_axi_s_core_rd_out_rv$port1__read[2:1] :
	       2'd0 ;

  // value method core_imem_rd_rlast
  assign core_imem_rlast =
	     i_frontend_axi_s_core_rd_out_rv$port1__read[36] &&
	     i_frontend_axi_s_core_rd_out_rv$port1__read[0] ;

  // value method core_imem_wr_awready
  assign core_imem_awready =
	     !i_frontend_axi_s_core_wr_isRst_isInReset &&
	     !i_frontend_axi_s_core_wr_in_addr_rv[62] ;

  // value method core_imem_wr_wready
  assign core_imem_wready =
	     !i_frontend_axi_s_core_wr_isRst_isInReset &&
	     !i_frontend_axi_s_core_wr_in_data_rv[37] ;

  // value method core_imem_wr_bvalid
  assign core_imem_bvalid =
	     !i_frontend_axi_s_core_wr_isRst_isInReset &&
	     i_frontend_axi_s_core_wr_out_rv$port1__read[3] ;

  // value method core_imem_wr_bresp
  assign core_imem_bresp =
	     i_frontend_axi_s_core_wr_out_rv$port1__read[3] ?
	       i_frontend_axi_s_core_wr_out_rv$port1__read[1:0] :
	       2'd0 ;

  // value method core_imem_wr_bid
  assign core_imem_bid =
	     i_frontend_axi_s_core_wr_out_rv$port1__read[3] &&
	     i_frontend_axi_s_core_wr_out_rv$port1__read[2] ;

  // value method core_dmem_rd_arready
  assign core_dmem_arready =
	     !d_frontend_axi_s_core_rd_isRst_isInReset &&
	     !d_frontend_axi_s_core_rd_in_rv[62] ;

  // value method core_dmem_rd_rvalid
  assign core_dmem_rvalid =
	     !d_frontend_axi_s_core_rd_isRst_isInReset &&
	     d_frontend_axi_s_core_rd_out_rv$port1__read[36] ;

  // value method core_dmem_rd_rid
  assign core_dmem_rid =
	     d_frontend_axi_s_core_rd_out_rv$port1__read[36] &&
	     d_frontend_axi_s_core_rd_out_rv$port1__read[35] ;

  // value method core_dmem_rd_rdata
  assign core_dmem_rdata =
	     d_frontend_axi_s_core_rd_out_rv$port1__read[36] ?
	       d_frontend_axi_s_core_rd_out_rv$port1__read[34:3] :
	       32'd0 ;

  // value method core_dmem_rd_rresp
  assign core_dmem_rresp =
	     d_frontend_axi_s_core_rd_out_rv$port1__read[36] ?
	       d_frontend_axi_s_core_rd_out_rv$port1__read[2:1] :
	       2'd0 ;

  // value method core_dmem_rd_rlast
  assign core_dmem_rlast =
	     d_frontend_axi_s_core_rd_out_rv$port1__read[36] &&
	     d_frontend_axi_s_core_rd_out_rv$port1__read[0] ;

  // value method core_dmem_wr_awready
  assign core_dmem_awready =
	     !d_frontend_axi_s_core_wr_isRst_isInReset &&
	     !d_frontend_axi_s_core_wr_in_addr_rv[62] ;

  // value method core_dmem_wr_wready
  assign core_dmem_wready =
	     !d_frontend_axi_s_core_wr_isRst_isInReset &&
	     !d_frontend_axi_s_core_wr_in_data_rv[37] ;

  // value method core_dmem_wr_bvalid
  assign core_dmem_bvalid =
	     !d_frontend_axi_s_core_wr_isRst_isInReset &&
	     d_frontend_axi_s_core_wr_out_rv$port1__read[3] ;

  // value method core_dmem_wr_bresp
  assign core_dmem_bresp =
	     d_frontend_axi_s_core_wr_out_rv$port1__read[3] ?
	       d_frontend_axi_s_core_wr_out_rv$port1__read[1:0] :
	       2'd0 ;

  // value method core_dmem_wr_bid
  assign core_dmem_bid =
	     d_frontend_axi_s_core_wr_out_rv$port1__read[3] &&
	     d_frontend_axi_s_core_wr_out_rv$port1__read[2] ;

  // value method imem_rd_arvalid
  assign imem_arvalid =
	     !i_backend_axi_m_mem_rd_isRst_isInReset &&
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ;

  // value method imem_rd_arid
  assign imem_arid =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] &&
	     i_backend_axi_m_mem_rd_in_rv$port1__read[61] ;

  // value method imem_rd_araddr
  assign imem_araddr =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       i_backend_axi_m_mem_rd_in_rv$port1__read[60:29] :
	       32'd0 ;

  // value method imem_rd_arlen
  assign imem_arlen =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       i_backend_axi_m_mem_rd_in_rv$port1__read[28:21] :
	       8'd0 ;

  // value method imem_rd_arsize
  assign imem_arsize =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       i_backend_axi_m_mem_rd_in_rv$port1__read[20:18] :
	       3'd0 ;

  // value method imem_rd_arburst
  assign imem_arburst =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       i_backend_axi_m_mem_rd_in_rv$port1__read[17:16] :
	       2'd0 ;

  // value method imem_rd_arlock
  assign imem_arlock =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] &&
	     i_backend_axi_m_mem_rd_in_rv$port1__read[15] ;

  // value method imem_rd_arcache
  assign imem_arcache =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       i_backend_axi_m_mem_rd_in_rv$port1__read[14:11] :
	       4'd0 ;

  // value method imem_rd_arprot
  assign imem_arprot =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       i_backend_axi_m_mem_rd_in_rv$port1__read[10:8] :
	       3'd0 ;

  // value method imem_rd_arqos
  assign imem_arqos =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       i_backend_axi_m_mem_rd_in_rv$port1__read[7:4] :
	       4'd0 ;

  // value method imem_rd_arregion
  assign imem_arregion =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       i_backend_axi_m_mem_rd_in_rv$port1__read[3:0] :
	       4'd0 ;

  // value method imem_rd_rready
  assign imem_rready =
	     !i_backend_axi_m_mem_rd_isRst_isInReset &&
	     !i_backend_axi_m_mem_rd_out_rv[36] ;

  // value method imem_wr_awvalid
  assign imem_awvalid =
	     !i_backend_axi_m_mem_wr_isRst_isInReset &&
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ;

  // value method imem_wr_awid
  assign imem_awid =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] &&
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[61] ;

  // value method imem_wr_awaddr
  assign imem_awaddr =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read[60:29] :
	       32'd0 ;

  // value method imem_wr_awlen
  assign imem_awlen =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read[28:21] :
	       8'd0 ;

  // value method imem_wr_awsize
  assign imem_awsize =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read[20:18] :
	       3'd0 ;

  // value method imem_wr_awburst
  assign imem_awburst =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read[17:16] :
	       2'd0 ;

  // value method imem_wr_awlock
  assign imem_awlock =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] &&
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[15] ;

  // value method imem_wr_awcache
  assign imem_awcache =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read[14:11] :
	       4'd0 ;

  // value method imem_wr_awprot
  assign imem_awprot =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read[10:8] :
	       3'd0 ;

  // value method imem_wr_awqos
  assign imem_awqos =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read[7:4] :
	       4'd0 ;

  // value method imem_wr_awregion
  assign imem_awregion =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read[3:0] :
	       4'd0 ;

  // value method imem_wr_wvalid
  assign imem_wvalid =
	     !i_backend_axi_m_mem_wr_isRst_isInReset &&
	     i_backend_axi_m_mem_wr_in_data_rv$port1__read[37] ;

  // value method imem_wr_wdata
  assign imem_wdata =
	     i_backend_axi_m_mem_wr_in_data_rv$port1__read[37] ?
	       i_backend_axi_m_mem_wr_in_data_rv$port1__read[36:5] :
	       32'd0 ;

  // value method imem_wr_wstrb
  assign imem_wstrb =
	     i_backend_axi_m_mem_wr_in_data_rv$port1__read[37] ?
	       i_backend_axi_m_mem_wr_in_data_rv$port1__read[4:1] :
	       4'd0 ;

  // value method imem_wr_wlast
  assign imem_wlast =
	     i_backend_axi_m_mem_wr_in_data_rv$port1__read[37] &&
	     i_backend_axi_m_mem_wr_in_data_rv$port1__read[0] ;

  // value method imem_wr_bready
  assign imem_bready =
	     !i_backend_axi_m_mem_wr_isRst_isInReset &&
	     !i_backend_axi_m_mem_wr_out_rv[3] ;

  // value method dmem_rd_arvalid
  assign dmem_arvalid =
	     !d_backend_axi_m_mem_rd_isRst_isInReset &&
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ;

  // value method dmem_rd_arid
  assign dmem_arid =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] &&
	     d_backend_axi_m_mem_rd_in_rv$port1__read[61] ;

  // value method dmem_rd_araddr
  assign dmem_araddr =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       d_backend_axi_m_mem_rd_in_rv$port1__read[60:29] :
	       32'd0 ;

  // value method dmem_rd_arlen
  assign dmem_arlen =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       d_backend_axi_m_mem_rd_in_rv$port1__read[28:21] :
	       8'd0 ;

  // value method dmem_rd_arsize
  assign dmem_arsize =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       d_backend_axi_m_mem_rd_in_rv$port1__read[20:18] :
	       3'd0 ;

  // value method dmem_rd_arburst
  assign dmem_arburst =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       d_backend_axi_m_mem_rd_in_rv$port1__read[17:16] :
	       2'd0 ;

  // value method dmem_rd_arlock
  assign dmem_arlock =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] &&
	     d_backend_axi_m_mem_rd_in_rv$port1__read[15] ;

  // value method dmem_rd_arcache
  assign dmem_arcache =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       d_backend_axi_m_mem_rd_in_rv$port1__read[14:11] :
	       4'd0 ;

  // value method dmem_rd_arprot
  assign dmem_arprot =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       d_backend_axi_m_mem_rd_in_rv$port1__read[10:8] :
	       3'd0 ;

  // value method dmem_rd_arqos
  assign dmem_arqos =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       d_backend_axi_m_mem_rd_in_rv$port1__read[7:4] :
	       4'd0 ;

  // value method dmem_rd_arregion
  assign dmem_arregion =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] ?
	       d_backend_axi_m_mem_rd_in_rv$port1__read[3:0] :
	       4'd0 ;

  // value method dmem_rd_rready
  assign dmem_rready =
	     !d_backend_axi_m_mem_rd_isRst_isInReset &&
	     !d_backend_axi_m_mem_rd_out_rv[36] ;

  // value method dmem_wr_awvalid
  assign dmem_awvalid =
	     !d_backend_axi_m_mem_wr_isRst_isInReset &&
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ;

  // value method dmem_wr_awid
  assign dmem_awid =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] &&
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[61] ;

  // value method dmem_wr_awaddr
  assign dmem_awaddr =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read[60:29] :
	       32'd0 ;

  // value method dmem_wr_awlen
  assign dmem_awlen =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read[28:21] :
	       8'd0 ;

  // value method dmem_wr_awsize
  assign dmem_awsize =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read[20:18] :
	       3'd0 ;

  // value method dmem_wr_awburst
  assign dmem_awburst =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read[17:16] :
	       2'd0 ;

  // value method dmem_wr_awlock
  assign dmem_awlock =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] &&
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[15] ;

  // value method dmem_wr_awcache
  assign dmem_awcache =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read[14:11] :
	       4'd0 ;

  // value method dmem_wr_awprot
  assign dmem_awprot =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read[10:8] :
	       3'd0 ;

  // value method dmem_wr_awqos
  assign dmem_awqos =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read[7:4] :
	       4'd0 ;

  // value method dmem_wr_awregion
  assign dmem_awregion =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] ?
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read[3:0] :
	       4'd0 ;

  // value method dmem_wr_wvalid
  assign dmem_wvalid =
	     !d_backend_axi_m_mem_wr_isRst_isInReset &&
	     d_backend_axi_m_mem_wr_in_data_rv$port1__read[37] ;

  // value method dmem_wr_wdata
  assign dmem_wdata =
	     d_backend_axi_m_mem_wr_in_data_rv$port1__read[37] ?
	       d_backend_axi_m_mem_wr_in_data_rv$port1__read[36:5] :
	       32'd0 ;

  // value method dmem_wr_wstrb
  assign dmem_wstrb =
	     d_backend_axi_m_mem_wr_in_data_rv$port1__read[37] ?
	       d_backend_axi_m_mem_wr_in_data_rv$port1__read[4:1] :
	       4'd0 ;

  // value method dmem_wr_wlast
  assign dmem_wlast =
	     d_backend_axi_m_mem_wr_in_data_rv$port1__read[37] &&
	     d_backend_axi_m_mem_wr_in_data_rv$port1__read[0] ;

  // value method dmem_wr_bready
  assign dmem_bready =
	     !d_backend_axi_m_mem_wr_isRst_isInReset &&
	     !d_backend_axi_m_mem_wr_out_rv[3] ;

  // submodule d_backend_axi_mem_req_fifo
  FIFO2 #(.width(32'd323),
	  .guarded(1'd1)) d_backend_axi_mem_req_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(d_backend_axi_mem_req_fifo$D_IN),
						     .ENQ(d_backend_axi_mem_req_fifo$ENQ),
						     .DEQ(d_backend_axi_mem_req_fifo$DEQ),
						     .CLR(d_backend_axi_mem_req_fifo$CLR),
						     .D_OUT(d_backend_axi_mem_req_fifo$D_OUT),
						     .FULL_N(d_backend_axi_mem_req_fifo$FULL_N),
						     .EMPTY_N(d_backend_axi_mem_req_fifo$EMPTY_N));

  // submodule d_backend_axi_mem_rsp_fifo
  FIFO2 #(.width(32'd257),
	  .guarded(1'd1)) d_backend_axi_mem_rsp_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(d_backend_axi_mem_rsp_fifo$D_IN),
						     .ENQ(d_backend_axi_mem_rsp_fifo$ENQ),
						     .DEQ(d_backend_axi_mem_rsp_fifo$DEQ),
						     .CLR(d_backend_axi_mem_rsp_fifo$CLR),
						     .D_OUT(d_backend_axi_mem_rsp_fifo$D_OUT),
						     .FULL_N(d_backend_axi_mem_rsp_fifo$FULL_N),
						     .EMPTY_N(d_backend_axi_mem_rsp_fifo$EMPTY_N));

  // submodule d_cache_cache_mem_bram_memory
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd256),
	  .MEMSIZE(6'd32)) d_cache_cache_mem_bram_memory(.CLK(CLK),
							 .ADDR(d_cache_cache_mem_bram_memory$ADDR),
							 .DI(d_cache_cache_mem_bram_memory$DI),
							 .WE(d_cache_cache_mem_bram_memory$WE),
							 .EN(d_cache_cache_mem_bram_memory$EN),
							 .DO(d_cache_cache_mem_bram_memory$DO));

  // submodule d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq(.CLK(CLK),
										  .D_IN(d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$D_IN),
										  .EN(d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$EN),
										  .Q_OUT(d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$Q_OUT));

  // submodule d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq(.CLK(CLK),
										  .D_IN(d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$D_IN),
										  .EN(d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$EN),
										  .Q_OUT(d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$Q_OUT));

  // submodule d_cache_cache_mem_bram_serverAdapter_outData_ff
  SizedFIFO #(.p1width(32'd256),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) d_cache_cache_mem_bram_serverAdapter_outData_ff(.RST(RST_N),
									      .CLK(CLK),
									      .D_IN(d_cache_cache_mem_bram_serverAdapter_outData_ff$D_IN),
									      .ENQ(d_cache_cache_mem_bram_serverAdapter_outData_ff$ENQ),
									      .DEQ(d_cache_cache_mem_bram_serverAdapter_outData_ff$DEQ),
									      .CLR(d_cache_cache_mem_bram_serverAdapter_outData_ff$CLR),
									      .D_OUT(d_cache_cache_mem_bram_serverAdapter_outData_ff$D_OUT),
									      .FULL_N(d_cache_cache_mem_bram_serverAdapter_outData_ff$FULL_N),
									      .EMPTY_N(d_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N));

  // submodule d_cache_cache_mem_req_fifo
  FIFO2 #(.width(32'd323),
	  .guarded(1'd1)) d_cache_cache_mem_req_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(d_cache_cache_mem_req_fifo$D_IN),
						     .ENQ(d_cache_cache_mem_req_fifo$ENQ),
						     .DEQ(d_cache_cache_mem_req_fifo$DEQ),
						     .CLR(d_cache_cache_mem_req_fifo$CLR),
						     .D_OUT(d_cache_cache_mem_req_fifo$D_OUT),
						     .FULL_N(d_cache_cache_mem_req_fifo$FULL_N),
						     .EMPTY_N(d_cache_cache_mem_req_fifo$EMPTY_N));

  // submodule d_cache_cache_mem_rsp_fifo
  FIFO2 #(.width(32'd257),
	  .guarded(1'd1)) d_cache_cache_mem_rsp_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(d_cache_cache_mem_rsp_fifo$D_IN),
						     .ENQ(d_cache_cache_mem_rsp_fifo$ENQ),
						     .DEQ(d_cache_cache_mem_rsp_fifo$DEQ),
						     .CLR(d_cache_cache_mem_rsp_fifo$CLR),
						     .D_OUT(d_cache_cache_mem_rsp_fifo$D_OUT),
						     .FULL_N(d_cache_cache_mem_rsp_fifo$FULL_N),
						     .EMPTY_N(d_cache_cache_mem_rsp_fifo$EMPTY_N));

  // submodule d_cache_dirty_array
  RegFileLoad #(.file("clean_reg_file.txt"),
		.addr_width(32'd5),
		.data_width(32'd8),
		.lo(5'h0),
		.hi(5'd31),
		.binary(1'd0)) d_cache_dirty_array(.CLK(CLK),
						   .ADDR_1(d_cache_dirty_array$ADDR_1),
						   .ADDR_2(d_cache_dirty_array$ADDR_2),
						   .ADDR_3(d_cache_dirty_array$ADDR_3),
						   .ADDR_4(d_cache_dirty_array$ADDR_4),
						   .ADDR_5(d_cache_dirty_array$ADDR_5),
						   .ADDR_IN(d_cache_dirty_array$ADDR_IN),
						   .D_IN(d_cache_dirty_array$D_IN),
						   .WE(d_cache_dirty_array$WE),
						   .D_OUT_1(d_cache_dirty_array$D_OUT_1),
						   .D_OUT_2(),
						   .D_OUT_3(),
						   .D_OUT_4(),
						   .D_OUT_5());

  // submodule d_cache_mem_req_fifo
  FIFO2 #(.width(32'd323), .guarded(1'd1)) d_cache_mem_req_fifo(.RST(RST_N),
								.CLK(CLK),
								.D_IN(d_cache_mem_req_fifo$D_IN),
								.ENQ(d_cache_mem_req_fifo$ENQ),
								.DEQ(d_cache_mem_req_fifo$DEQ),
								.CLR(d_cache_mem_req_fifo$CLR),
								.D_OUT(d_cache_mem_req_fifo$D_OUT),
								.FULL_N(d_cache_mem_req_fifo$FULL_N),
								.EMPTY_N(d_cache_mem_req_fifo$EMPTY_N));

  // submodule d_cache_mem_rsp_fifo
  FIFO2 #(.width(32'd257), .guarded(1'd1)) d_cache_mem_rsp_fifo(.RST(RST_N),
								.CLK(CLK),
								.D_IN(d_cache_mem_rsp_fifo$D_IN),
								.ENQ(d_cache_mem_rsp_fifo$ENQ),
								.DEQ(d_cache_mem_rsp_fifo$DEQ),
								.CLR(d_cache_mem_rsp_fifo$CLR),
								.D_OUT(d_cache_mem_rsp_fifo$D_OUT),
								.FULL_N(d_cache_mem_rsp_fifo$FULL_N),
								.EMPTY_N(d_cache_mem_rsp_fifo$EMPTY_N));

  // submodule d_cache_req_fifo
  FIFO2 #(.width(32'd323), .guarded(1'd1)) d_cache_req_fifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(d_cache_req_fifo$D_IN),
							    .ENQ(d_cache_req_fifo$ENQ),
							    .DEQ(d_cache_req_fifo$DEQ),
							    .CLR(d_cache_req_fifo$CLR),
							    .D_OUT(d_cache_req_fifo$D_OUT),
							    .FULL_N(d_cache_req_fifo$FULL_N),
							    .EMPTY_N(d_cache_req_fifo$EMPTY_N));

  // submodule d_cache_rsp_fifo
  FIFO2 #(.width(32'd257), .guarded(1'd1)) d_cache_rsp_fifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(d_cache_rsp_fifo$D_IN),
							    .ENQ(d_cache_rsp_fifo$ENQ),
							    .DEQ(d_cache_rsp_fifo$DEQ),
							    .CLR(d_cache_rsp_fifo$CLR),
							    .D_OUT(d_cache_rsp_fifo$D_OUT),
							    .FULL_N(d_cache_rsp_fifo$FULL_N),
							    .EMPTY_N(d_cache_rsp_fifo$EMPTY_N));

  // submodule d_cache_tag_array
  RegFileLoad #(.file("clean_reg_file.txt"),
		.addr_width(32'd5),
		.data_width(32'd23),
		.lo(5'h0),
		.hi(5'd31),
		.binary(1'd0)) d_cache_tag_array(.CLK(CLK),
						 .ADDR_1(d_cache_tag_array$ADDR_1),
						 .ADDR_2(d_cache_tag_array$ADDR_2),
						 .ADDR_3(d_cache_tag_array$ADDR_3),
						 .ADDR_4(d_cache_tag_array$ADDR_4),
						 .ADDR_5(d_cache_tag_array$ADDR_5),
						 .ADDR_IN(d_cache_tag_array$ADDR_IN),
						 .D_IN(d_cache_tag_array$D_IN),
						 .WE(d_cache_tag_array$WE),
						 .D_OUT_1(d_cache_tag_array$D_OUT_1),
						 .D_OUT_2(),
						 .D_OUT_3(),
						 .D_OUT_4(),
						 .D_OUT_5());

  // submodule d_frontend_axi_rd_req_fifo
  FIFO2 #(.width(32'd46),
	  .guarded(1'd1)) d_frontend_axi_rd_req_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(d_frontend_axi_rd_req_fifo$D_IN),
						     .ENQ(d_frontend_axi_rd_req_fifo$ENQ),
						     .DEQ(d_frontend_axi_rd_req_fifo$DEQ),
						     .CLR(d_frontend_axi_rd_req_fifo$CLR),
						     .D_OUT(d_frontend_axi_rd_req_fifo$D_OUT),
						     .FULL_N(d_frontend_axi_rd_req_fifo$FULL_N),
						     .EMPTY_N(d_frontend_axi_rd_req_fifo$EMPTY_N));

  // submodule d_frontend_axi_req_fifo
  FIFO2 #(.width(32'd323),
	  .guarded(1'd1)) d_frontend_axi_req_fifo(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(d_frontend_axi_req_fifo$D_IN),
						  .ENQ(d_frontend_axi_req_fifo$ENQ),
						  .DEQ(d_frontend_axi_req_fifo$DEQ),
						  .CLR(d_frontend_axi_req_fifo$CLR),
						  .D_OUT(d_frontend_axi_req_fifo$D_OUT),
						  .FULL_N(d_frontend_axi_req_fifo$FULL_N),
						  .EMPTY_N(d_frontend_axi_req_fifo$EMPTY_N));

  // submodule d_frontend_axi_rsp_fifo
  FIFO2 #(.width(32'd257),
	  .guarded(1'd1)) d_frontend_axi_rsp_fifo(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(d_frontend_axi_rsp_fifo$D_IN),
						  .ENQ(d_frontend_axi_rsp_fifo$ENQ),
						  .DEQ(d_frontend_axi_rsp_fifo$DEQ),
						  .CLR(d_frontend_axi_rsp_fifo$CLR),
						  .D_OUT(d_frontend_axi_rsp_fifo$D_OUT),
						  .FULL_N(d_frontend_axi_rsp_fifo$FULL_N),
						  .EMPTY_N(d_frontend_axi_rsp_fifo$EMPTY_N));

  // submodule i_backend_axi_mem_req_fifo
  FIFO2 #(.width(32'd323),
	  .guarded(1'd1)) i_backend_axi_mem_req_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(i_backend_axi_mem_req_fifo$D_IN),
						     .ENQ(i_backend_axi_mem_req_fifo$ENQ),
						     .DEQ(i_backend_axi_mem_req_fifo$DEQ),
						     .CLR(i_backend_axi_mem_req_fifo$CLR),
						     .D_OUT(i_backend_axi_mem_req_fifo$D_OUT),
						     .FULL_N(i_backend_axi_mem_req_fifo$FULL_N),
						     .EMPTY_N(i_backend_axi_mem_req_fifo$EMPTY_N));

  // submodule i_backend_axi_mem_rsp_fifo
  FIFO2 #(.width(32'd257),
	  .guarded(1'd1)) i_backend_axi_mem_rsp_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(i_backend_axi_mem_rsp_fifo$D_IN),
						     .ENQ(i_backend_axi_mem_rsp_fifo$ENQ),
						     .DEQ(i_backend_axi_mem_rsp_fifo$DEQ),
						     .CLR(i_backend_axi_mem_rsp_fifo$CLR),
						     .D_OUT(i_backend_axi_mem_rsp_fifo$D_OUT),
						     .FULL_N(i_backend_axi_mem_rsp_fifo$FULL_N),
						     .EMPTY_N(i_backend_axi_mem_rsp_fifo$EMPTY_N));

  // submodule i_cache_cache_mem_bram_memory
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd256),
	  .MEMSIZE(6'd32)) i_cache_cache_mem_bram_memory(.CLK(CLK),
							 .ADDR(i_cache_cache_mem_bram_memory$ADDR),
							 .DI(i_cache_cache_mem_bram_memory$DI),
							 .WE(i_cache_cache_mem_bram_memory$WE),
							 .EN(i_cache_cache_mem_bram_memory$EN),
							 .DO(i_cache_cache_mem_bram_memory$DO));

  // submodule i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq(.CLK(CLK),
										  .D_IN(i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$D_IN),
										  .EN(i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$EN),
										  .Q_OUT(i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$Q_OUT));

  // submodule i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq(.CLK(CLK),
										  .D_IN(i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$D_IN),
										  .EN(i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$EN),
										  .Q_OUT(i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$Q_OUT));

  // submodule i_cache_cache_mem_bram_serverAdapter_outData_ff
  SizedFIFO #(.p1width(32'd256),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) i_cache_cache_mem_bram_serverAdapter_outData_ff(.RST(RST_N),
									      .CLK(CLK),
									      .D_IN(i_cache_cache_mem_bram_serverAdapter_outData_ff$D_IN),
									      .ENQ(i_cache_cache_mem_bram_serverAdapter_outData_ff$ENQ),
									      .DEQ(i_cache_cache_mem_bram_serverAdapter_outData_ff$DEQ),
									      .CLR(i_cache_cache_mem_bram_serverAdapter_outData_ff$CLR),
									      .D_OUT(i_cache_cache_mem_bram_serverAdapter_outData_ff$D_OUT),
									      .FULL_N(i_cache_cache_mem_bram_serverAdapter_outData_ff$FULL_N),
									      .EMPTY_N(i_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N));

  // submodule i_cache_cache_mem_req_fifo
  FIFO2 #(.width(32'd323),
	  .guarded(1'd1)) i_cache_cache_mem_req_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(i_cache_cache_mem_req_fifo$D_IN),
						     .ENQ(i_cache_cache_mem_req_fifo$ENQ),
						     .DEQ(i_cache_cache_mem_req_fifo$DEQ),
						     .CLR(i_cache_cache_mem_req_fifo$CLR),
						     .D_OUT(i_cache_cache_mem_req_fifo$D_OUT),
						     .FULL_N(i_cache_cache_mem_req_fifo$FULL_N),
						     .EMPTY_N(i_cache_cache_mem_req_fifo$EMPTY_N));

  // submodule i_cache_cache_mem_rsp_fifo
  FIFO2 #(.width(32'd257),
	  .guarded(1'd1)) i_cache_cache_mem_rsp_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(i_cache_cache_mem_rsp_fifo$D_IN),
						     .ENQ(i_cache_cache_mem_rsp_fifo$ENQ),
						     .DEQ(i_cache_cache_mem_rsp_fifo$DEQ),
						     .CLR(i_cache_cache_mem_rsp_fifo$CLR),
						     .D_OUT(i_cache_cache_mem_rsp_fifo$D_OUT),
						     .FULL_N(i_cache_cache_mem_rsp_fifo$FULL_N),
						     .EMPTY_N(i_cache_cache_mem_rsp_fifo$EMPTY_N));

  // submodule i_cache_hit_req_fifo
  FIFO2 #(.width(32'd1), .guarded(1'd1)) i_cache_hit_req_fifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(i_cache_hit_req_fifo$D_IN),
							      .ENQ(i_cache_hit_req_fifo$ENQ),
							      .DEQ(i_cache_hit_req_fifo$DEQ),
							      .CLR(i_cache_hit_req_fifo$CLR),
							      .D_OUT(i_cache_hit_req_fifo$D_OUT),
							      .FULL_N(i_cache_hit_req_fifo$FULL_N),
							      .EMPTY_N(i_cache_hit_req_fifo$EMPTY_N));

  // submodule i_cache_mem_req_fifo
  FIFO2 #(.width(32'd323), .guarded(1'd1)) i_cache_mem_req_fifo(.RST(RST_N),
								.CLK(CLK),
								.D_IN(i_cache_mem_req_fifo$D_IN),
								.ENQ(i_cache_mem_req_fifo$ENQ),
								.DEQ(i_cache_mem_req_fifo$DEQ),
								.CLR(i_cache_mem_req_fifo$CLR),
								.D_OUT(i_cache_mem_req_fifo$D_OUT),
								.FULL_N(i_cache_mem_req_fifo$FULL_N),
								.EMPTY_N(i_cache_mem_req_fifo$EMPTY_N));

  // submodule i_cache_mem_rsp_fifo
  FIFO2 #(.width(32'd257), .guarded(1'd1)) i_cache_mem_rsp_fifo(.RST(RST_N),
								.CLK(CLK),
								.D_IN(i_cache_mem_rsp_fifo$D_IN),
								.ENQ(i_cache_mem_rsp_fifo$ENQ),
								.DEQ(i_cache_mem_rsp_fifo$DEQ),
								.CLR(i_cache_mem_rsp_fifo$CLR),
								.D_OUT(i_cache_mem_rsp_fifo$D_OUT),
								.FULL_N(i_cache_mem_rsp_fifo$FULL_N),
								.EMPTY_N(i_cache_mem_rsp_fifo$EMPTY_N));

  // submodule i_cache_miss_q
  SizedFIFO #(.p1width(32'd327),
	      .p2depth(32'd10),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) i_cache_miss_q(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(i_cache_miss_q$D_IN),
					     .ENQ(i_cache_miss_q$ENQ),
					     .DEQ(i_cache_miss_q$DEQ),
					     .CLR(i_cache_miss_q$CLR),
					     .D_OUT(i_cache_miss_q$D_OUT),
					     .FULL_N(i_cache_miss_q$FULL_N),
					     .EMPTY_N(i_cache_miss_q$EMPTY_N));

  // submodule i_cache_req_fifo
  FIFO2 #(.width(32'd323), .guarded(1'd1)) i_cache_req_fifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(i_cache_req_fifo$D_IN),
							    .ENQ(i_cache_req_fifo$ENQ),
							    .DEQ(i_cache_req_fifo$DEQ),
							    .CLR(i_cache_req_fifo$CLR),
							    .D_OUT(i_cache_req_fifo$D_OUT),
							    .FULL_N(i_cache_req_fifo$FULL_N),
							    .EMPTY_N(i_cache_req_fifo$EMPTY_N));

  // submodule i_cache_rsp_cb_buff
  RegFile #(.addr_width(32'd4),
	    .data_width(32'd258),
	    .lo(4'd0),
	    .hi(4'd9)) i_cache_rsp_cb_buff(.CLK(CLK),
					   .ADDR_1(i_cache_rsp_cb_buff$ADDR_1),
					   .ADDR_2(i_cache_rsp_cb_buff$ADDR_2),
					   .ADDR_3(i_cache_rsp_cb_buff$ADDR_3),
					   .ADDR_4(i_cache_rsp_cb_buff$ADDR_4),
					   .ADDR_5(i_cache_rsp_cb_buff$ADDR_5),
					   .ADDR_IN(i_cache_rsp_cb_buff$ADDR_IN),
					   .D_IN(i_cache_rsp_cb_buff$D_IN),
					   .WE(i_cache_rsp_cb_buff$WE),
					   .D_OUT_1(i_cache_rsp_cb_buff$D_OUT_1),
					   .D_OUT_2(),
					   .D_OUT_3(),
					   .D_OUT_4(),
					   .D_OUT_5());

  // submodule i_cache_rsp_cb_n
  Counter #(.width(32'd5), .init(5'd0)) i_cache_rsp_cb_n(.CLK(CLK),
							 .RST(RST_N),
							 .DATA_A(i_cache_rsp_cb_n$DATA_A),
							 .DATA_B(i_cache_rsp_cb_n$DATA_B),
							 .DATA_C(i_cache_rsp_cb_n$DATA_C),
							 .DATA_F(i_cache_rsp_cb_n$DATA_F),
							 .ADDA(i_cache_rsp_cb_n$ADDA),
							 .ADDB(i_cache_rsp_cb_n$ADDB),
							 .SETC(i_cache_rsp_cb_n$SETC),
							 .SETF(i_cache_rsp_cb_n$SETF),
							 .Q_OUT(i_cache_rsp_cb_n$Q_OUT));

  // submodule i_cache_tag_array
  RegFileLoad #(.file("clean_reg_file.txt"),
		.addr_width(32'd5),
		.data_width(32'd23),
		.lo(5'h0),
		.hi(5'd31),
		.binary(1'd0)) i_cache_tag_array(.CLK(CLK),
						 .ADDR_1(i_cache_tag_array$ADDR_1),
						 .ADDR_2(i_cache_tag_array$ADDR_2),
						 .ADDR_3(i_cache_tag_array$ADDR_3),
						 .ADDR_4(i_cache_tag_array$ADDR_4),
						 .ADDR_5(i_cache_tag_array$ADDR_5),
						 .ADDR_IN(i_cache_tag_array$ADDR_IN),
						 .D_IN(i_cache_tag_array$D_IN),
						 .WE(i_cache_tag_array$WE),
						 .D_OUT_1(i_cache_tag_array$D_OUT_1),
						 .D_OUT_2(),
						 .D_OUT_3(),
						 .D_OUT_4(),
						 .D_OUT_5());

  // submodule i_frontend_axi_rd_req_fifo
  FIFO2 #(.width(32'd46),
	  .guarded(1'd1)) i_frontend_axi_rd_req_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(i_frontend_axi_rd_req_fifo$D_IN),
						     .ENQ(i_frontend_axi_rd_req_fifo$ENQ),
						     .DEQ(i_frontend_axi_rd_req_fifo$DEQ),
						     .CLR(i_frontend_axi_rd_req_fifo$CLR),
						     .D_OUT(i_frontend_axi_rd_req_fifo$D_OUT),
						     .FULL_N(i_frontend_axi_rd_req_fifo$FULL_N),
						     .EMPTY_N(i_frontend_axi_rd_req_fifo$EMPTY_N));

  // submodule i_frontend_axi_req_fifo
  FIFO2 #(.width(32'd323),
	  .guarded(1'd1)) i_frontend_axi_req_fifo(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(i_frontend_axi_req_fifo$D_IN),
						  .ENQ(i_frontend_axi_req_fifo$ENQ),
						  .DEQ(i_frontend_axi_req_fifo$DEQ),
						  .CLR(i_frontend_axi_req_fifo$CLR),
						  .D_OUT(i_frontend_axi_req_fifo$D_OUT),
						  .FULL_N(i_frontend_axi_req_fifo$FULL_N),
						  .EMPTY_N(i_frontend_axi_req_fifo$EMPTY_N));

  // submodule i_frontend_axi_rsp_fifo
  FIFO2 #(.width(32'd257),
	  .guarded(1'd1)) i_frontend_axi_rsp_fifo(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(i_frontend_axi_rsp_fifo$D_IN),
						  .ENQ(i_frontend_axi_rsp_fifo$ENQ),
						  .DEQ(i_frontend_axi_rsp_fifo$DEQ),
						  .CLR(i_frontend_axi_rsp_fifo$CLR),
						  .D_OUT(i_frontend_axi_rsp_fifo$D_OUT),
						  .FULL_N(i_frontend_axi_rsp_fifo$FULL_N),
						  .EMPTY_N(i_frontend_axi_rsp_fifo$EMPTY_N));

  // rule RL_i_frontend_axi_rd_req_send
  assign WILL_FIRE_RL_i_frontend_axi_rd_req_send =
	     i_frontend_axi_req_fifo$FULL_N &&
	     i_frontend_axi_core_state == 3'd1 ;

  // rule RL_i_frontend_axi_rd_axi_ready
  assign WILL_FIRE_RL_i_frontend_axi_rd_axi_ready =
	     i_frontend_axi_rd_req_fifo$EMPTY_N &&
	     i_frontend_axi_axi_state == 2'd0 ;

  // rule RL_i_frontend_axi_rd_axi_wait_data
  assign WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data =
	     i_frontend_axi_rsp_fifo$EMPTY_N &&
	     !i_frontend_axi_s_core_rd_out_rv[36] &&
	     i_frontend_axi_axi_state == 2'd2 ;

  // rule RL_i_frontend_axi_rd_axi_sending_data
  assign WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data =
	     !i_frontend_axi_s_core_rd_out_rv[36] &&
	     i_frontend_axi_axi_state == 2'd3 ;

  // rule RL_i_frontend_axi_wr_leftover_data
  assign WILL_FIRE_RL_i_frontend_axi_wr_leftover_data =
	     i_frontend_axi_req_fifo$FULL_N &&
	     i_frontend_axi_core_state == 3'd5 ;

  // rule RL_i_frontend_axi_wr_rq_wait
  assign WILL_FIRE_RL_i_frontend_axi_wr_rq_wait =
	     i_frontend_axi_rsp_fifo$EMPTY_N &&
	     i_frontend_axi_core_state == 3'd6 &&
	     i_frontend_axi_axi_state == 2'd1 ;

  // rule RL_i_frontend_axi_rd_get_req
  assign WILL_FIRE_RL_i_frontend_axi_rd_get_req =
	     i_frontend_axi_s_core_rd_in_rv$port1__read[62] &&
	     i_frontend_axi_rd_req_fifo$FULL_N &&
	     i_frontend_axi_core_state == 3'd0 ;

  // rule RL_i_frontend_axi_wr_get_req
  assign WILL_FIRE_RL_i_frontend_axi_wr_get_req =
	     i_frontend_axi_s_core_wr_in_addr_rv$port1__read[62] &&
	     i_frontend_axi_core_state == 3'd0 &&
	     i_frontend_axi_axi_state == 2'd0 &&
	     !i_frontend_axi_rd_req_fifo$EMPTY_N &&
	     !WILL_FIRE_RL_i_frontend_axi_rd_get_req ;

  // rule RL_i_frontend_axi_wr_set_line
  assign WILL_FIRE_RL_i_frontend_axi_wr_set_line =
	     i_frontend_axi_s_core_wr_in_data_rv$port1__read[37] &&
	     !i_frontend_axi_s_core_wr_out_rv[3] &&
	     i_frontend_axi_req_fifo$FULL_N &&
	     i_frontend_axi_core_state == 3'd4 ;

  // rule RL_d_frontend_axi_rd_req_send
  assign WILL_FIRE_RL_d_frontend_axi_rd_req_send =
	     d_frontend_axi_req_fifo$FULL_N &&
	     d_frontend_axi_core_state == 3'd1 ;

  // rule RL_d_frontend_axi_rd_axi_ready
  assign WILL_FIRE_RL_d_frontend_axi_rd_axi_ready =
	     d_frontend_axi_rd_req_fifo$EMPTY_N &&
	     d_frontend_axi_axi_state == 2'd0 ;

  // rule RL_d_frontend_axi_rd_axi_wait_data
  assign WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data =
	     d_frontend_axi_rsp_fifo$EMPTY_N &&
	     !d_frontend_axi_s_core_rd_out_rv[36] &&
	     d_frontend_axi_axi_state == 2'd2 ;

  // rule RL_d_frontend_axi_rd_axi_sending_data
  assign WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data =
	     !d_frontend_axi_s_core_rd_out_rv[36] &&
	     d_frontend_axi_axi_state == 2'd3 ;

  // rule RL_d_frontend_axi_wr_leftover_data
  assign WILL_FIRE_RL_d_frontend_axi_wr_leftover_data =
	     d_frontend_axi_req_fifo$FULL_N &&
	     d_frontend_axi_core_state == 3'd5 ;

  // rule RL_d_frontend_axi_wr_rq_wait
  assign WILL_FIRE_RL_d_frontend_axi_wr_rq_wait =
	     d_frontend_axi_rsp_fifo$EMPTY_N &&
	     d_frontend_axi_core_state == 3'd6 &&
	     d_frontend_axi_axi_state == 2'd1 ;

  // rule RL_d_frontend_axi_rd_get_req
  assign WILL_FIRE_RL_d_frontend_axi_rd_get_req =
	     d_frontend_axi_s_core_rd_in_rv$port1__read[62] &&
	     d_frontend_axi_rd_req_fifo$FULL_N &&
	     d_frontend_axi_core_state == 3'd0 ;

  // rule RL_d_frontend_axi_wr_get_req
  assign WILL_FIRE_RL_d_frontend_axi_wr_get_req =
	     d_frontend_axi_s_core_wr_in_addr_rv$port1__read[62] &&
	     d_frontend_axi_core_state == 3'd0 &&
	     d_frontend_axi_axi_state == 2'd0 &&
	     !d_frontend_axi_rd_req_fifo$EMPTY_N &&
	     !WILL_FIRE_RL_d_frontend_axi_rd_get_req ;

  // rule RL_d_frontend_axi_wr_set_line
  assign WILL_FIRE_RL_d_frontend_axi_wr_set_line =
	     d_frontend_axi_s_core_wr_in_data_rv$port1__read[37] &&
	     !d_frontend_axi_s_core_wr_out_rv[3] &&
	     d_frontend_axi_req_fifo$FULL_N &&
	     d_frontend_axi_core_state == 3'd4 ;

  // rule RL_i_cache_core_req
  assign WILL_FIRE_RL_i_cache_core_req =
	     i_cache_req_fifo$EMPTY_N &&
	     i_cache_rsp_cb_n_value__80_ULE_9_81_AND_i_cach_ETC___d989 &&
	     i_cache_state == 3'd0 ;

  // rule RL_i_cache_fill_rule
  assign WILL_FIRE_RL_i_cache_fill_rule =
	     i_cache_cache_mem_req_fifo$FULL_N &&
	     i_cache_hit_req_fifo$FULL_N &&
	     i_cache_mem_rsp_fifo$EMPTY_N &&
	     i_cache_miss_q$EMPTY_N &&
	     !WILL_FIRE_RL_i_cache_core_req ;

  // rule RL_i_cache_cache_mem_rsp
  assign WILL_FIRE_RL_i_cache_cache_mem_rsp =
	     i_cache_cache_mem_rsp_fifo$EMPTY_N &&
	     i_cache_hit_req_fifo$EMPTY_N &&
	     !WILL_FIRE_RL_i_cache_fill_rule &&
	     !WILL_FIRE_RL_i_cache_core_req ;

  // rule RL_i_cache_send_rsp
  assign CAN_FIRE_RL_i_cache_send_rsp =
	     i_cache_rsp_cb_n$Q_OUT != 5'd0 &&
	     i_cache_rsp_cb_buff$D_OUT_1[257] &&
	     !i_cache_rsp_fifo_rv[257] ;

  // rule RL_i_cache_cache_mem_handle_req
  assign WILL_FIRE_RL_i_cache_cache_mem_handle_req =
	     i_cache_cache_mem_req_fifo$EMPTY_N &&
	     i_cache_cache_mem_bram_serverAdapter_cnt_74_SLT_3___d808 &&
	     i_cache_cache_mem_state == 2'd0 ;

  // rule RL_i_cache_cache_mem_write_data_st
  assign WILL_FIRE_RL_i_cache_cache_mem_write_data_st =
	     i_cache_cache_mem_bram_serverAdapter_cnt_74_SLT_3___d808 &&
	     i_cache_cache_mem_rsp_fifo$FULL_N &&
	     i_cache_cache_mem_state == 2'd2 ;

  // rule RL_i_cache_cache_mem_get_rd_rsp
  assign WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp =
	     i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$Q_OUT &&
	     (i_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N ||
	      i_cache_cache_mem_bram_serverAdapter_outData_enqw$whas) &&
	     i_cache_cache_mem_rsp_fifo$FULL_N &&
	     i_cache_cache_mem_state == 2'd1 ;

  // rule RL_d_cache_core_req
  assign WILL_FIRE_RL_d_cache_core_req =
	     d_cache_req_fifo$EMPTY_N && d_cache_mem_req_fifo$FULL_N &&
	     d_cache_cache_mem_req_fifo$FULL_N &&
	     d_cache_state == 3'd0 ;

  // rule RL_d_cache_start_miss
  assign WILL_FIRE_RL_d_cache_start_miss =
	     d_cache_cache_mem_req_fifo$FULL_N && d_cache_state == 3'd2 ;

  // rule RL_d_cache_writeback_rsp
  assign WILL_FIRE_RL_d_cache_writeback_rsp =
	     d_cache_mem_req_fifo$FULL_N &&
	     d_cache_cache_mem_rsp_fifo$EMPTY_N &&
	     d_cache_state == 3'd3 ;

  // rule RL_d_cache_send_fill_req
  assign WILL_FIRE_RL_d_cache_send_fill_req =
	     d_cache_mem_req_fifo$FULL_N && d_cache_state == 3'd4 ;

  // rule RL_d_cache_wait_fill_rsp
  assign WILL_FIRE_RL_d_cache_wait_fill_rsp =
	     d_cache_cache_mem_req_fifo$FULL_N &&
	     d_cache_mem_rsp_fifo$EMPTY_N &&
	     d_cache_state == 3'd5 ;

  // rule RL_d_cache_cache_mem_rsp
  assign WILL_FIRE_RL_d_cache_cache_mem_rsp =
	     d_cache_cache_mem_rsp_fifo$EMPTY_N && d_cache_rsp_fifo$FULL_N &&
	     d_cache_state == 3'd1 ;

  // rule RL_d_cache_wait_mem_rsp_
  assign WILL_FIRE_RL_d_cache_wait_mem_rsp_ =
	     d_cache_mem_rsp_fifo$EMPTY_N && d_cache_rsp_fifo$FULL_N &&
	     d_cache_state == 3'd6 ;

  // rule RL_d_cache_cache_mem_handle_req
  assign WILL_FIRE_RL_d_cache_cache_mem_handle_req =
	     d_cache_cache_mem_req_fifo$EMPTY_N &&
	     d_cache_cache_mem_bram_serverAdapter_cnt_075_S_ETC___d1108 &&
	     d_cache_cache_mem_state == 2'd0 ;

  // rule RL_d_cache_cache_mem_write_data_st
  assign WILL_FIRE_RL_d_cache_cache_mem_write_data_st =
	     d_cache_cache_mem_bram_serverAdapter_cnt_075_S_ETC___d1108 &&
	     d_cache_cache_mem_rsp_fifo$FULL_N &&
	     d_cache_cache_mem_state == 2'd2 ;

  // rule RL_d_cache_cache_mem_get_rd_rsp
  assign WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp =
	     d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$Q_OUT &&
	     (d_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N ||
	      d_cache_cache_mem_bram_serverAdapter_outData_enqw$whas) &&
	     d_cache_cache_mem_rsp_fifo$FULL_N &&
	     d_cache_cache_mem_state == 2'd1 ;

  // rule RL_i_backend_axi_mem_req_rule
  assign WILL_FIRE_RL_i_backend_axi_mem_req_rule =
	     i_backend_axi_mem_req_fifo$EMPTY_N &&
	     !i_backend_axi_m_mem_wr_in_addr_rv[62] &&
	     !i_backend_axi_m_mem_rd_in_rv[62] &&
	     i_backend_axi_state == 2'd0 ;

  // rule RL_i_backend_axi_mem_send_data
  assign WILL_FIRE_RL_i_backend_axi_mem_send_data =
	     !i_backend_axi_m_mem_wr_in_data_rv[37] &&
	     i_backend_axi_state == 2'd2 ;

  // rule RL_i_backend_axi_mem_get_rd
  assign WILL_FIRE_RL_i_backend_axi_mem_get_rd =
	     i_backend_axi_m_mem_rd_out_rv$port1__read[36] &&
	     i_backend_axi_mem_rsp_fifo$FULL_N &&
	     i_backend_axi_state == 2'd1 ;

  // rule RL_i_backend_axi_mem_get_wr_rsp
  assign WILL_FIRE_RL_i_backend_axi_mem_get_wr_rsp =
	     i_backend_axi_m_mem_wr_out_rv$port1__read[3] &&
	     i_backend_axi_mem_rsp_fifo$FULL_N ;

  // rule RL_d_backend_axi_mem_req_rule
  assign WILL_FIRE_RL_d_backend_axi_mem_req_rule =
	     d_backend_axi_mem_req_fifo$EMPTY_N &&
	     !d_backend_axi_m_mem_wr_in_addr_rv[62] &&
	     !d_backend_axi_m_mem_rd_in_rv[62] &&
	     d_backend_axi_state == 2'd0 ;

  // rule RL_d_backend_axi_mem_send_data
  assign WILL_FIRE_RL_d_backend_axi_mem_send_data =
	     !d_backend_axi_m_mem_wr_in_data_rv[37] &&
	     d_backend_axi_state == 2'd2 ;

  // rule RL_d_backend_axi_mem_get_rd
  assign WILL_FIRE_RL_d_backend_axi_mem_get_rd =
	     d_backend_axi_m_mem_rd_out_rv$port1__read[36] &&
	     d_backend_axi_mem_rsp_fifo$FULL_N &&
	     d_backend_axi_state == 2'd1 ;

  // rule RL_d_backend_axi_mem_get_wr_rsp
  assign WILL_FIRE_RL_d_backend_axi_mem_get_wr_rsp =
	     d_backend_axi_m_mem_wr_out_rv$port1__read[3] &&
	     d_backend_axi_mem_rsp_fifo$FULL_N ;

  // inputs to muxes for submodule ports
  assign MUX_d_backend_axi_cnt_burst$write_1__SEL_1 =
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	     d_backend_axi_mem_req_fifo$D_OUT[290] ;
  assign MUX_d_backend_axi_line_chunk$write_1__SEL_1 =
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	     !d_backend_axi_mem_req_fifo$D_OUT[290] ;
  assign MUX_d_backend_axi_mem_rsp_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_d_backend_axi_mem_get_rd &&
	     d_backend_axi_m_mem_rd_out_rv$port1__read[0] ;
  assign MUX_d_backend_axi_state$write_1__SEL_1 =
	     d_backend_axi_state == 2'd3 && d_backend_axi_wr_rsp_complete ;
  assign MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_core_req && d_cache_tag_array$D_OUT_1[22] &&
	     d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294 ;
  assign MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_2 =
	     WILL_FIRE_RL_d_cache_start_miss &&
	     d_cache_tag_array$D_OUT_1[22] &&
	     d_cache_dirty_array$D_OUT_1 != 8'd0 ;
  assign MUX_d_cache_cache_mem_rsp_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp &&
	     !d_cache_cache_mem_mem_req[290] ;
  assign MUX_d_cache_dirty_array$upd_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_core_req && d_cache_req_fifo$D_OUT[290] &&
	     d_cache_tag_array$D_OUT_1[22] &&
	     d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294 ;
  assign MUX_d_cache_mem_req_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_core_req && d_cache_req_fifo$D_OUT[290] &&
	     (!d_cache_tag_array$D_OUT_1[22] ||
	      !d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294) ;
  assign MUX_d_cache_rsp_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_wait_mem_rsp_ && d_cache_write_miss ;
  assign MUX_d_frontend_axi_axi_state$write_1__SEL_1 =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data &&
	     x__h433621 != 32'hFFFFFFFF &&
	     (d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 ||
	      IF_7_MINUS_0_CONCAT_d_frontend_axi_v_axi_data__ETC___d502) ;
  assign MUX_d_frontend_axi_axi_state$write_1__SEL_2 =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data &&
	     (x__h433621 == 32'hFFFFFFFF ||
	      d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 ||
	      !IF_7_MINUS_0_CONCAT_d_frontend_axi_v_axi_data__ETC___d502) ;
  assign MUX_d_frontend_axi_axi_state$write_1__SEL_3 =
	     WILL_FIRE_RL_d_frontend_axi_wr_rq_wait &&
	     d_frontend_axi_cache_wr_req[37:34] == 4'd0 &&
	     d_frontend_axi_last_req ;
  assign MUX_d_frontend_axi_cnt_bits$write_1__PSEL_1 =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data ||
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data ;
  assign MUX_d_frontend_axi_cnt_bits$write_1__SEL_1 =
	     MUX_d_frontend_axi_cnt_bits$write_1__PSEL_1 &&
	     x__h433621 != 32'hFFFFFFFF ;
  assign MUX_d_frontend_axi_cnt_req$write_1__SEL_1 =
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line &&
	     (x__h566502 == 32'hFFFFFFFF ||
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ;
  assign MUX_d_frontend_axi_cnt_req$write_1__SEL_2 =
	     WILL_FIRE_RL_d_frontend_axi_wr_leftover_data &&
	     (x__h566502 == 32'hFFFFFFFF || d_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ;
  assign MUX_d_frontend_axi_cnt_req$write_1__SEL_4 =
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ;
  assign MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data &&
	     x__h433621 != 32'hFFFFFFFF ;
  assign MUX_i_backend_axi_cnt_burst$write_1__SEL_1 =
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	     i_backend_axi_mem_req_fifo$D_OUT[290] ;
  assign MUX_i_backend_axi_line_chunk$write_1__SEL_1 =
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	     !i_backend_axi_mem_req_fifo$D_OUT[290] ;
  assign MUX_i_backend_axi_mem_rsp_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_i_backend_axi_mem_get_rd &&
	     i_backend_axi_m_mem_rd_out_rv$port1__read[0] ;
  assign MUX_i_backend_axi_state$write_1__SEL_1 =
	     i_backend_axi_state == 2'd3 && i_backend_axi_wr_rsp_complete ;
  assign MUX_i_cache_cache_mem_req_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_i_cache_core_req && !i_cache_req_fifo$D_OUT[290] &&
	     i_cache_tag_array$D_OUT_1[22] &&
	     i_cache_tag_array_sub_i_cache_req_fifo_first___ETC___d1007 ;
  assign MUX_i_cache_cache_mem_rsp_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp &&
	     !i_cache_cache_mem_mem_req[290] ;
  assign MUX_i_cache_rsp_cb_buff$upd_1__SEL_1 =
	     WILL_FIRE_RL_i_cache_core_req && !i_cache_req_fifo$D_OUT[290] ;
  assign MUX_i_cache_rsp_cb_buff$upd_1__SEL_2 =
	     WILL_FIRE_RL_i_cache_cache_mem_rsp && i_cache_state == 3'd1 &&
	     i_cache_hit_req_fifo$D_OUT ;
  assign MUX_i_frontend_axi_axi_state$write_1__SEL_1 =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data &&
	     x__h128341 != 32'hFFFFFFFF &&
	     (i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 ||
	      IF_7_MINUS_0_CONCAT_i_frontend_axi_v_axi_data__ETC___d124) ;
  assign MUX_i_frontend_axi_axi_state$write_1__SEL_2 =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data &&
	     (x__h128341 == 32'hFFFFFFFF ||
	      i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 ||
	      !IF_7_MINUS_0_CONCAT_i_frontend_axi_v_axi_data__ETC___d124) ;
  assign MUX_i_frontend_axi_axi_state$write_1__SEL_3 =
	     WILL_FIRE_RL_i_frontend_axi_wr_rq_wait &&
	     i_frontend_axi_cache_wr_req[37:34] == 4'd0 &&
	     i_frontend_axi_last_req ;
  assign MUX_i_frontend_axi_cnt_bits$write_1__PSEL_1 =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data ||
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data ;
  assign MUX_i_frontend_axi_cnt_bits$write_1__SEL_1 =
	     MUX_i_frontend_axi_cnt_bits$write_1__PSEL_1 &&
	     x__h128341 != 32'hFFFFFFFF ;
  assign MUX_i_frontend_axi_cnt_req$write_1__SEL_1 =
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line &&
	     (x__h261222 == 32'hFFFFFFFF ||
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ;
  assign MUX_i_frontend_axi_cnt_req$write_1__SEL_2 =
	     WILL_FIRE_RL_i_frontend_axi_wr_leftover_data &&
	     (x__h261222 == 32'hFFFFFFFF || i_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ;
  assign MUX_i_frontend_axi_cnt_req$write_1__SEL_4 =
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ;
  assign MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data &&
	     x__h128341 != 32'hFFFFFFFF ;
  assign MUX_d_backend_axi_cnt_burst$write_1__VAL_2 =
	     d_backend_axi_cnt_burst + 8'd1 ;
  assign MUX_d_backend_axi_cnt_wr_rsp$write_1__VAL_2 =
	     d_backend_axi_cnt_wr_rsp + 8'd1 ;
  assign MUX_d_backend_axi_line_chunk$write_1__VAL_2 =
	     d_backend_axi_line_chunk + 3'd1 ;
  assign MUX_d_backend_axi_mem_rsp_fifo$enq_1__VAL_1 =
	     { IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1701,
	       d_backend_axi_req_reg[1] } ;
  assign MUX_d_backend_axi_state$write_1__VAL_3 =
	     d_backend_axi_mem_req_fifo$D_OUT[290] ? 2'd2 : 2'd1 ;
  assign MUX_d_backend_axi_state$write_1__VAL_4 =
	     d_backend_axi_cnt_burst_721_EQ_d_backend_axi_t_ETC___d1734 ?
	       2'd3 :
	       2'd2 ;
  assign MUX_d_cache_cache_mem_bram_memory$put_3__VAL_2 =
	     { d_cache_cache_mem_mem_req[33] ?
		 d_cache_cache_mem_mem_req[289:282] :
		 d_cache_cache_mem_prev_line[255:248],
	       d_cache_cache_mem_mem_req[32] ?
		 d_cache_cache_mem_mem_req[281:274] :
		 d_cache_cache_mem_prev_line[247:240],
	       d_cache_cache_mem_mem_req[31] ?
		 d_cache_cache_mem_mem_req[273:266] :
		 d_cache_cache_mem_prev_line[239:232],
	       d_cache_cache_mem_mem_req[30] ?
		 d_cache_cache_mem_mem_req[265:258] :
		 d_cache_cache_mem_prev_line[231:224],
	       d_cache_cache_mem_mem_req[29] ?
		 d_cache_cache_mem_mem_req[257:250] :
		 d_cache_cache_mem_prev_line[223:216],
	       d_cache_cache_mem_mem_req[28] ?
		 d_cache_cache_mem_mem_req[249:242] :
		 d_cache_cache_mem_prev_line[215:208],
	       d_cache_cache_mem_mem_req[27] ?
		 d_cache_cache_mem_mem_req[241:234] :
		 d_cache_cache_mem_prev_line[207:200],
	       d_cache_cache_mem_mem_req[26] ?
		 d_cache_cache_mem_mem_req[233:226] :
		 d_cache_cache_mem_prev_line[199:192],
	       d_cache_cache_mem_mem_req[25] ?
		 d_cache_cache_mem_mem_req[225:218] :
		 d_cache_cache_mem_prev_line[191:184],
	       d_cache_cache_mem_mem_req[24] ?
		 d_cache_cache_mem_mem_req[217:210] :
		 d_cache_cache_mem_prev_line[183:176],
	       d_cache_cache_mem_mem_req[23] ?
		 d_cache_cache_mem_mem_req[209:202] :
		 d_cache_cache_mem_prev_line[175:168],
	       d_cache_cache_mem_mem_req[22] ?
		 d_cache_cache_mem_mem_req[201:194] :
		 d_cache_cache_mem_prev_line[167:160],
	       d_cache_cache_mem_mem_req[21] ?
		 d_cache_cache_mem_mem_req[193:186] :
		 d_cache_cache_mem_prev_line[159:152],
	       d_cache_cache_mem_mem_req[20] ?
		 d_cache_cache_mem_mem_req[185:178] :
		 d_cache_cache_mem_prev_line[151:144],
	       d_cache_cache_mem_mem_req[19] ?
		 d_cache_cache_mem_mem_req[177:170] :
		 d_cache_cache_mem_prev_line[143:136],
	       d_cache_cache_mem_mem_req[18] ?
		 d_cache_cache_mem_mem_req[169:162] :
		 d_cache_cache_mem_prev_line[135:128],
	       d_cache_cache_mem_mem_req[17] ?
		 d_cache_cache_mem_mem_req[161:154] :
		 d_cache_cache_mem_prev_line[127:120],
	       d_cache_cache_mem_mem_req[16] ?
		 d_cache_cache_mem_mem_req[153:146] :
		 d_cache_cache_mem_prev_line[119:112],
	       d_cache_cache_mem_mem_req[15] ?
		 d_cache_cache_mem_mem_req[145:138] :
		 d_cache_cache_mem_prev_line[111:104],
	       d_cache_cache_mem_mem_req[14] ?
		 d_cache_cache_mem_mem_req[137:130] :
		 d_cache_cache_mem_prev_line[103:96],
	       d_cache_cache_mem_mem_req[13] ?
		 d_cache_cache_mem_mem_req[129:122] :
		 d_cache_cache_mem_prev_line[95:88],
	       d_cache_cache_mem_mem_req[12] ?
		 d_cache_cache_mem_mem_req[121:114] :
		 d_cache_cache_mem_prev_line[87:80],
	       d_cache_cache_mem_mem_req[11] ?
		 d_cache_cache_mem_mem_req[113:106] :
		 d_cache_cache_mem_prev_line[79:72],
	       d_cache_cache_mem_mem_req[10] ?
		 d_cache_cache_mem_mem_req[105:98] :
		 d_cache_cache_mem_prev_line[71:64],
	       d_cache_cache_mem_mem_req[9] ?
		 d_cache_cache_mem_mem_req[97:90] :
		 d_cache_cache_mem_prev_line[63:56],
	       d_cache_cache_mem_mem_req[8] ?
		 d_cache_cache_mem_mem_req[89:82] :
		 d_cache_cache_mem_prev_line[55:48],
	       d_cache_cache_mem_mem_req[7] ?
		 d_cache_cache_mem_mem_req[81:74] :
		 d_cache_cache_mem_prev_line[47:40],
	       d_cache_cache_mem_mem_req[6] ?
		 d_cache_cache_mem_mem_req[73:66] :
		 d_cache_cache_mem_prev_line[39:32],
	       d_cache_cache_mem_mem_req[5] ?
		 d_cache_cache_mem_mem_req[65:58] :
		 d_cache_cache_mem_prev_line[31:24],
	       d_cache_cache_mem_mem_req[4] ?
		 d_cache_cache_mem_mem_req[57:50] :
		 d_cache_cache_mem_prev_line[23:16],
	       d_cache_cache_mem_mem_req[3] ?
		 d_cache_cache_mem_mem_req[49:42] :
		 d_cache_cache_mem_prev_line[15:8],
	       d_cache_cache_mem_mem_req[2] ?
		 d_cache_cache_mem_mem_req[41:34] :
		 d_cache_cache_mem_prev_line[7:0] } ;
  assign MUX_d_cache_cache_mem_req_fifo$enq_1__VAL_2 =
	     { addr__h904337,
	       291'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFFFFFFFC } ;
  assign MUX_d_cache_cache_mem_req_fifo$enq_1__VAL_3 =
	     { d_cache_miss_req[322:291],
	       1'd1,
	       d_cache_mem_rsp_fifo$D_OUT[256:1],
	       32'hFFFFFFFF,
	       d_cache_miss_req[1],
	       1'd0 } ;
  assign MUX_d_cache_cache_mem_rsp_fifo$enq_1__VAL_1 =
	     { d_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N ?
		 d_cache_cache_mem_bram_serverAdapter_outData_ff$D_OUT :
		 d_cache_cache_mem_bram_memory$DO,
	       d_cache_cache_mem_mem_req[1] } ;
  assign MUX_d_cache_cache_mem_rsp_fifo$enq_1__VAL_2 =
	     { d_cache_cache_mem_mem_req[33] ?
		 d_cache_cache_mem_mem_req[289:282] :
		 d_cache_cache_mem_prev_line[255:248],
	       d_cache_cache_mem_mem_req[32] ?
		 d_cache_cache_mem_mem_req[281:274] :
		 d_cache_cache_mem_prev_line[247:240],
	       d_cache_cache_mem_mem_req[31] ?
		 d_cache_cache_mem_mem_req[273:266] :
		 d_cache_cache_mem_prev_line[239:232],
	       d_cache_cache_mem_mem_req[30] ?
		 d_cache_cache_mem_mem_req[265:258] :
		 d_cache_cache_mem_prev_line[231:224],
	       d_cache_cache_mem_mem_req[29] ?
		 d_cache_cache_mem_mem_req[257:250] :
		 d_cache_cache_mem_prev_line[223:216],
	       d_cache_cache_mem_mem_req[28] ?
		 d_cache_cache_mem_mem_req[249:242] :
		 d_cache_cache_mem_prev_line[215:208],
	       d_cache_cache_mem_mem_req[27] ?
		 d_cache_cache_mem_mem_req[241:234] :
		 d_cache_cache_mem_prev_line[207:200],
	       d_cache_cache_mem_mem_req[26] ?
		 d_cache_cache_mem_mem_req[233:226] :
		 d_cache_cache_mem_prev_line[199:192],
	       d_cache_cache_mem_mem_req[25] ?
		 d_cache_cache_mem_mem_req[225:218] :
		 d_cache_cache_mem_prev_line[191:184],
	       d_cache_cache_mem_mem_req[24] ?
		 d_cache_cache_mem_mem_req[217:210] :
		 d_cache_cache_mem_prev_line[183:176],
	       d_cache_cache_mem_mem_req[23] ?
		 d_cache_cache_mem_mem_req[209:202] :
		 d_cache_cache_mem_prev_line[175:168],
	       d_cache_cache_mem_mem_req[22] ?
		 d_cache_cache_mem_mem_req[201:194] :
		 d_cache_cache_mem_prev_line[167:160],
	       d_cache_cache_mem_mem_req[21] ?
		 d_cache_cache_mem_mem_req[193:186] :
		 d_cache_cache_mem_prev_line[159:152],
	       d_cache_cache_mem_mem_req[20] ?
		 d_cache_cache_mem_mem_req[185:178] :
		 d_cache_cache_mem_prev_line[151:144],
	       d_cache_cache_mem_mem_req[19] ?
		 d_cache_cache_mem_mem_req[177:170] :
		 d_cache_cache_mem_prev_line[143:136],
	       d_cache_cache_mem_mem_req[18] ?
		 d_cache_cache_mem_mem_req[169:162] :
		 d_cache_cache_mem_prev_line[135:128],
	       d_cache_cache_mem_mem_req[17] ?
		 d_cache_cache_mem_mem_req[161:154] :
		 d_cache_cache_mem_prev_line[127:120],
	       d_cache_cache_mem_mem_req[16] ?
		 d_cache_cache_mem_mem_req[153:146] :
		 d_cache_cache_mem_prev_line[119:112],
	       d_cache_cache_mem_mem_req[15] ?
		 d_cache_cache_mem_mem_req[145:138] :
		 d_cache_cache_mem_prev_line[111:104],
	       d_cache_cache_mem_mem_req[14] ?
		 d_cache_cache_mem_mem_req[137:130] :
		 d_cache_cache_mem_prev_line[103:96],
	       d_cache_cache_mem_mem_req[13] ?
		 d_cache_cache_mem_mem_req[129:122] :
		 d_cache_cache_mem_prev_line[95:88],
	       d_cache_cache_mem_mem_req[12] ?
		 d_cache_cache_mem_mem_req[121:114] :
		 d_cache_cache_mem_prev_line[87:80],
	       d_cache_cache_mem_mem_req[11] ?
		 d_cache_cache_mem_mem_req[113:106] :
		 d_cache_cache_mem_prev_line[79:72],
	       d_cache_cache_mem_mem_req[10] ?
		 d_cache_cache_mem_mem_req[105:98] :
		 d_cache_cache_mem_prev_line[71:64],
	       d_cache_cache_mem_mem_req[9] ?
		 d_cache_cache_mem_mem_req[97:90] :
		 d_cache_cache_mem_prev_line[63:56],
	       d_cache_cache_mem_mem_req[8] ?
		 d_cache_cache_mem_mem_req[89:82] :
		 d_cache_cache_mem_prev_line[55:48],
	       d_cache_cache_mem_mem_req[7] ?
		 d_cache_cache_mem_mem_req[81:74] :
		 d_cache_cache_mem_prev_line[47:40],
	       d_cache_cache_mem_mem_req[6] ?
		 d_cache_cache_mem_mem_req[73:66] :
		 d_cache_cache_mem_prev_line[39:32],
	       d_cache_cache_mem_mem_req[5] ?
		 d_cache_cache_mem_mem_req[65:58] :
		 d_cache_cache_mem_prev_line[31:24],
	       d_cache_cache_mem_mem_req[4] ?
		 d_cache_cache_mem_mem_req[57:50] :
		 d_cache_cache_mem_prev_line[23:16],
	       d_cache_cache_mem_mem_req[3] ?
		 d_cache_cache_mem_mem_req[49:42] :
		 d_cache_cache_mem_prev_line[15:8],
	       d_cache_cache_mem_mem_req[2] ?
		 d_cache_cache_mem_mem_req[41:34] :
		 d_cache_cache_mem_prev_line[7:0],
	       d_cache_cache_mem_mem_req[1] } ;
  assign MUX_d_cache_cache_mem_state$write_1__VAL_1 =
	     d_cache_cache_mem_mem_req[290] ? 2'd2 : 2'd0 ;
  assign MUX_d_cache_dirty_array$upd_2__VAL_1 =
	     (d_cache_req_fifo$D_OUT[33:30] != 4'd0 ||
	      d_cache_dirty_array$D_OUT_1[7]) ?
	       result__h854477 :
	       IF_NOT_d_cache_req_fifo_first__287_BITS_29_TO__ETC___d1365 ;
  assign MUX_d_cache_mem_req_fifo$enq_1__VAL_2 =
	     { d_cache_wb_addr,
	       1'd1,
	       d_cache_cache_mem_rsp_fifo$D_OUT[256:1],
	       34'h3FFFFFFFC } ;
  assign MUX_d_cache_mem_req_fifo$enq_1__VAL_3 =
	     { r_addr__h953774, d_cache_miss_req[290:0] } ;
  assign MUX_d_cache_state$write_1__VAL_1 =
	     d_cache_req_fifo$D_OUT[290] ?
	       ((d_cache_tag_array$D_OUT_1[22] &&
		 d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294) ?
		  3'd1 :
		  3'd6) :
	       ((d_cache_tag_array$D_OUT_1[22] &&
		 d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294) ?
		  3'd1 :
		  3'd2) ;
  assign MUX_d_cache_state$write_1__VAL_2 =
	     (d_cache_tag_array$D_OUT_1[22] &&
	      d_cache_dirty_array$D_OUT_1 != 8'd0) ?
	       3'd3 :
	       3'd4 ;
  assign MUX_d_cache_state$write_1__VAL_3 = d_cache_write_miss ? 3'd0 : 3'd4 ;
  assign MUX_d_frontend_axi_axi_state$write_1__VAL_1 =
	     d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 ?
	       2'd0 :
	       2'd3 ;
  assign MUX_d_frontend_axi_axi_state$write_1__VAL_2 =
	     (x__h433621 == 32'hFFFFFFFF) ?
	       2'd2 :
	       (d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 ?
		  2'd0 :
		  2'd2) ;
  assign MUX_d_frontend_axi_cache_wr_req$write_1__VAL_1 =
	     { d_frontend_axi_s_core_wr_in_addr_rv$port1__read[60:29],
	       358'd0 } ;
  assign MUX_d_frontend_axi_cache_wr_req$write_1__VAL_2 =
	     { x__h593550,
	       IF_7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_re_ETC___d674,
	       x1_avValue_strb__h533641,
	       x1_avValue_axi_data__h533642,
	       x1_avValue_axi_strb__h533643,
	       x__h566502 == 32'hFFFFFFFF &&
	       d_frontend_axi_s_core_wr_in_data_rv$port1__read[0],
	       x__h594664,
	       x__h566502 == 32'hFFFFFFFF ||
	       d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	       _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608 } ;
  assign MUX_d_frontend_axi_cache_wr_req$write_1__VAL_3 =
	     { x__h593550,
	       IF_7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_re_ETC___d739,
	       x1_avValue_strb__h593537,
	       x1_avValue_axi_data__h593538,
	       x1_avValue_axi_strb__h593539,
	       x__h566502 == 32'hFFFFFFFF && d_frontend_axi_cache_wr_req[33],
	       x__h594664,
	       x__h566502 == 32'hFFFFFFFF ||
	       d_frontend_axi_cache_wr_req[33] ||
	       _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608 } ;
  assign MUX_d_frontend_axi_cnt_bits$write_1__VAL_1 =
	     d_frontend_axi_cnt_bits + 13'd32 ;
  assign MUX_d_frontend_axi_cnt_req$write_1__VAL_1 =
	     d_frontend_axi_cnt_req + 32'd1 ;
  assign MUX_d_frontend_axi_core_state$write_1__VAL_2 =
	     (d_frontend_axi_cnt_req + 32'd1 == d_frontend_axi_total_req) ?
	       3'd0 :
	       3'd1 ;
  assign MUX_d_frontend_axi_core_state$write_1__VAL_3 =
	     (x__h566502 == 32'hFFFFFFFF || d_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ?
	       3'd6 :
	       3'd4 ;
  assign MUX_d_frontend_axi_core_state$write_1__VAL_4 =
	     (d_frontend_axi_cache_wr_req[37:34] == 4'd0) ?
	       (d_frontend_axi_last_req ? 3'd0 : 3'd4) :
	       3'd5 ;
  assign MUX_d_frontend_axi_rd_addr$write_1__VAL_2 =
	     d_frontend_axi_rd_addr + 32'd32 ;
  assign MUX_d_frontend_axi_req_fifo$enq_1__VAL_1 =
	     { core_r_addr__h522251,
	       1'd1,
	       d_frontend_axi_cache_wr_req_96_BITS_357_TO_134_ETC___d653,
	       res___1_strb__h522649,
	       2'h2 } ;
  assign MUX_d_frontend_axi_req_fifo$enq_1__VAL_2 =
	     { core_r_addr__h522251,
	       1'd1,
	       d_frontend_axi_cache_wr_req_96_BITS_357_TO_134_ETC___d732,
	       res___1_strb__h582854,
	       2'h2 } ;
  assign MUX_d_frontend_axi_req_fifo$enq_1__VAL_3 =
	     { d_frontend_axi_rd_addr,
	       291'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       d_frontend_axi_curr_info[45],
	       axi_rsp_data__h407470,
	       2'd0,
	       d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 } ;
  assign MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       d_frontend_axi_curr_info[45],
	       axi_rsp_data__h449560,
	       2'd0,
	       d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 } ;
  assign MUX_d_frontend_axi_total_req$write_1__VAL_1 =
	     { 27'd0, x__h325083 } + 32'd1 ;
  assign MUX_d_frontend_axi_total_req$write_1__VAL_2 =
	     { 27'd0, x__h474124 } + 32'd1 ;
  assign MUX_d_frontend_axi_v_axi_data$write_1__VAL_1 =
	     { d_frontend_axi_rd_req_fifo$D_OUT[31:0], 65'd0 } ;
  assign MUX_d_frontend_axi_v_axi_data$write_1__VAL_2 =
	     { x__h456781,
	       (x__h433621 == 32'hFFFFFFFF) ? axi_rsp_data__h407470 : 32'd0,
	       x__h456941,
	       x__h433621 != 32'hFFFFFFFF } ;
  assign MUX_d_frontend_axi_v_axi_data$write_1__VAL_3 =
	     { x__h456781,
	       (x__h433621 == 32'hFFFFFFFF) ? axi_rsp_data__h449560 : 32'd0,
	       x__h456941,
	       x__h433621 != 32'hFFFFFFFF } ;
  assign MUX_d_frontend_axi_wr_req$write_1__VAL_1 =
	     { d_frontend_axi_wr_req[61],
	       x_addr__h533524,
	       d_frontend_axi_wr_req[28:0] } ;
  assign MUX_i_backend_axi_cnt_burst$write_1__VAL_2 =
	     i_backend_axi_cnt_burst + 8'd1 ;
  assign MUX_i_backend_axi_cnt_wr_rsp$write_1__VAL_2 =
	     i_backend_axi_cnt_wr_rsp + 8'd1 ;
  assign MUX_i_backend_axi_line_chunk$write_1__VAL_2 =
	     i_backend_axi_line_chunk + 3'd1 ;
  assign MUX_i_backend_axi_mem_rsp_fifo$enq_1__VAL_1 =
	     { IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1541,
	       i_backend_axi_req_reg[1] } ;
  assign MUX_i_backend_axi_state$write_1__VAL_3 =
	     i_backend_axi_mem_req_fifo$D_OUT[290] ? 2'd2 : 2'd1 ;
  assign MUX_i_backend_axi_state$write_1__VAL_4 =
	     i_backend_axi_cnt_burst_561_EQ_i_backend_axi_t_ETC___d1574 ?
	       2'd3 :
	       2'd2 ;
  assign MUX_i_cache_cache_mem_bram_memory$put_3__VAL_2 =
	     { i_cache_cache_mem_mem_req[33] ?
		 i_cache_cache_mem_mem_req[289:282] :
		 i_cache_cache_mem_prev_line[255:248],
	       i_cache_cache_mem_mem_req[32] ?
		 i_cache_cache_mem_mem_req[281:274] :
		 i_cache_cache_mem_prev_line[247:240],
	       i_cache_cache_mem_mem_req[31] ?
		 i_cache_cache_mem_mem_req[273:266] :
		 i_cache_cache_mem_prev_line[239:232],
	       i_cache_cache_mem_mem_req[30] ?
		 i_cache_cache_mem_mem_req[265:258] :
		 i_cache_cache_mem_prev_line[231:224],
	       i_cache_cache_mem_mem_req[29] ?
		 i_cache_cache_mem_mem_req[257:250] :
		 i_cache_cache_mem_prev_line[223:216],
	       i_cache_cache_mem_mem_req[28] ?
		 i_cache_cache_mem_mem_req[249:242] :
		 i_cache_cache_mem_prev_line[215:208],
	       i_cache_cache_mem_mem_req[27] ?
		 i_cache_cache_mem_mem_req[241:234] :
		 i_cache_cache_mem_prev_line[207:200],
	       i_cache_cache_mem_mem_req[26] ?
		 i_cache_cache_mem_mem_req[233:226] :
		 i_cache_cache_mem_prev_line[199:192],
	       i_cache_cache_mem_mem_req[25] ?
		 i_cache_cache_mem_mem_req[225:218] :
		 i_cache_cache_mem_prev_line[191:184],
	       i_cache_cache_mem_mem_req[24] ?
		 i_cache_cache_mem_mem_req[217:210] :
		 i_cache_cache_mem_prev_line[183:176],
	       i_cache_cache_mem_mem_req[23] ?
		 i_cache_cache_mem_mem_req[209:202] :
		 i_cache_cache_mem_prev_line[175:168],
	       i_cache_cache_mem_mem_req[22] ?
		 i_cache_cache_mem_mem_req[201:194] :
		 i_cache_cache_mem_prev_line[167:160],
	       i_cache_cache_mem_mem_req[21] ?
		 i_cache_cache_mem_mem_req[193:186] :
		 i_cache_cache_mem_prev_line[159:152],
	       i_cache_cache_mem_mem_req[20] ?
		 i_cache_cache_mem_mem_req[185:178] :
		 i_cache_cache_mem_prev_line[151:144],
	       i_cache_cache_mem_mem_req[19] ?
		 i_cache_cache_mem_mem_req[177:170] :
		 i_cache_cache_mem_prev_line[143:136],
	       i_cache_cache_mem_mem_req[18] ?
		 i_cache_cache_mem_mem_req[169:162] :
		 i_cache_cache_mem_prev_line[135:128],
	       i_cache_cache_mem_mem_req[17] ?
		 i_cache_cache_mem_mem_req[161:154] :
		 i_cache_cache_mem_prev_line[127:120],
	       i_cache_cache_mem_mem_req[16] ?
		 i_cache_cache_mem_mem_req[153:146] :
		 i_cache_cache_mem_prev_line[119:112],
	       i_cache_cache_mem_mem_req[15] ?
		 i_cache_cache_mem_mem_req[145:138] :
		 i_cache_cache_mem_prev_line[111:104],
	       i_cache_cache_mem_mem_req[14] ?
		 i_cache_cache_mem_mem_req[137:130] :
		 i_cache_cache_mem_prev_line[103:96],
	       i_cache_cache_mem_mem_req[13] ?
		 i_cache_cache_mem_mem_req[129:122] :
		 i_cache_cache_mem_prev_line[95:88],
	       i_cache_cache_mem_mem_req[12] ?
		 i_cache_cache_mem_mem_req[121:114] :
		 i_cache_cache_mem_prev_line[87:80],
	       i_cache_cache_mem_mem_req[11] ?
		 i_cache_cache_mem_mem_req[113:106] :
		 i_cache_cache_mem_prev_line[79:72],
	       i_cache_cache_mem_mem_req[10] ?
		 i_cache_cache_mem_mem_req[105:98] :
		 i_cache_cache_mem_prev_line[71:64],
	       i_cache_cache_mem_mem_req[9] ?
		 i_cache_cache_mem_mem_req[97:90] :
		 i_cache_cache_mem_prev_line[63:56],
	       i_cache_cache_mem_mem_req[8] ?
		 i_cache_cache_mem_mem_req[89:82] :
		 i_cache_cache_mem_prev_line[55:48],
	       i_cache_cache_mem_mem_req[7] ?
		 i_cache_cache_mem_mem_req[81:74] :
		 i_cache_cache_mem_prev_line[47:40],
	       i_cache_cache_mem_mem_req[6] ?
		 i_cache_cache_mem_mem_req[73:66] :
		 i_cache_cache_mem_prev_line[39:32],
	       i_cache_cache_mem_mem_req[5] ?
		 i_cache_cache_mem_mem_req[65:58] :
		 i_cache_cache_mem_prev_line[31:24],
	       i_cache_cache_mem_mem_req[4] ?
		 i_cache_cache_mem_mem_req[57:50] :
		 i_cache_cache_mem_prev_line[23:16],
	       i_cache_cache_mem_mem_req[3] ?
		 i_cache_cache_mem_mem_req[49:42] :
		 i_cache_cache_mem_prev_line[15:8],
	       i_cache_cache_mem_mem_req[2] ?
		 i_cache_cache_mem_mem_req[41:34] :
		 i_cache_cache_mem_prev_line[7:0] } ;
  assign MUX_i_cache_cache_mem_req_fifo$enq_1__VAL_2 =
	     { i_cache_miss_q$D_OUT[322:291],
	       1'd1,
	       i_cache_mem_rsp_fifo$D_OUT[256:1],
	       34'h3FFFFFFFC } ;
  assign MUX_i_cache_cache_mem_rsp_fifo$enq_1__VAL_1 =
	     { i_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N ?
		 i_cache_cache_mem_bram_serverAdapter_outData_ff$D_OUT :
		 i_cache_cache_mem_bram_memory$DO,
	       i_cache_cache_mem_mem_req[1] } ;
  assign MUX_i_cache_cache_mem_rsp_fifo$enq_1__VAL_2 =
	     { i_cache_cache_mem_mem_req[33] ?
		 i_cache_cache_mem_mem_req[289:282] :
		 i_cache_cache_mem_prev_line[255:248],
	       i_cache_cache_mem_mem_req[32] ?
		 i_cache_cache_mem_mem_req[281:274] :
		 i_cache_cache_mem_prev_line[247:240],
	       i_cache_cache_mem_mem_req[31] ?
		 i_cache_cache_mem_mem_req[273:266] :
		 i_cache_cache_mem_prev_line[239:232],
	       i_cache_cache_mem_mem_req[30] ?
		 i_cache_cache_mem_mem_req[265:258] :
		 i_cache_cache_mem_prev_line[231:224],
	       i_cache_cache_mem_mem_req[29] ?
		 i_cache_cache_mem_mem_req[257:250] :
		 i_cache_cache_mem_prev_line[223:216],
	       i_cache_cache_mem_mem_req[28] ?
		 i_cache_cache_mem_mem_req[249:242] :
		 i_cache_cache_mem_prev_line[215:208],
	       i_cache_cache_mem_mem_req[27] ?
		 i_cache_cache_mem_mem_req[241:234] :
		 i_cache_cache_mem_prev_line[207:200],
	       i_cache_cache_mem_mem_req[26] ?
		 i_cache_cache_mem_mem_req[233:226] :
		 i_cache_cache_mem_prev_line[199:192],
	       i_cache_cache_mem_mem_req[25] ?
		 i_cache_cache_mem_mem_req[225:218] :
		 i_cache_cache_mem_prev_line[191:184],
	       i_cache_cache_mem_mem_req[24] ?
		 i_cache_cache_mem_mem_req[217:210] :
		 i_cache_cache_mem_prev_line[183:176],
	       i_cache_cache_mem_mem_req[23] ?
		 i_cache_cache_mem_mem_req[209:202] :
		 i_cache_cache_mem_prev_line[175:168],
	       i_cache_cache_mem_mem_req[22] ?
		 i_cache_cache_mem_mem_req[201:194] :
		 i_cache_cache_mem_prev_line[167:160],
	       i_cache_cache_mem_mem_req[21] ?
		 i_cache_cache_mem_mem_req[193:186] :
		 i_cache_cache_mem_prev_line[159:152],
	       i_cache_cache_mem_mem_req[20] ?
		 i_cache_cache_mem_mem_req[185:178] :
		 i_cache_cache_mem_prev_line[151:144],
	       i_cache_cache_mem_mem_req[19] ?
		 i_cache_cache_mem_mem_req[177:170] :
		 i_cache_cache_mem_prev_line[143:136],
	       i_cache_cache_mem_mem_req[18] ?
		 i_cache_cache_mem_mem_req[169:162] :
		 i_cache_cache_mem_prev_line[135:128],
	       i_cache_cache_mem_mem_req[17] ?
		 i_cache_cache_mem_mem_req[161:154] :
		 i_cache_cache_mem_prev_line[127:120],
	       i_cache_cache_mem_mem_req[16] ?
		 i_cache_cache_mem_mem_req[153:146] :
		 i_cache_cache_mem_prev_line[119:112],
	       i_cache_cache_mem_mem_req[15] ?
		 i_cache_cache_mem_mem_req[145:138] :
		 i_cache_cache_mem_prev_line[111:104],
	       i_cache_cache_mem_mem_req[14] ?
		 i_cache_cache_mem_mem_req[137:130] :
		 i_cache_cache_mem_prev_line[103:96],
	       i_cache_cache_mem_mem_req[13] ?
		 i_cache_cache_mem_mem_req[129:122] :
		 i_cache_cache_mem_prev_line[95:88],
	       i_cache_cache_mem_mem_req[12] ?
		 i_cache_cache_mem_mem_req[121:114] :
		 i_cache_cache_mem_prev_line[87:80],
	       i_cache_cache_mem_mem_req[11] ?
		 i_cache_cache_mem_mem_req[113:106] :
		 i_cache_cache_mem_prev_line[79:72],
	       i_cache_cache_mem_mem_req[10] ?
		 i_cache_cache_mem_mem_req[105:98] :
		 i_cache_cache_mem_prev_line[71:64],
	       i_cache_cache_mem_mem_req[9] ?
		 i_cache_cache_mem_mem_req[97:90] :
		 i_cache_cache_mem_prev_line[63:56],
	       i_cache_cache_mem_mem_req[8] ?
		 i_cache_cache_mem_mem_req[89:82] :
		 i_cache_cache_mem_prev_line[55:48],
	       i_cache_cache_mem_mem_req[7] ?
		 i_cache_cache_mem_mem_req[81:74] :
		 i_cache_cache_mem_prev_line[47:40],
	       i_cache_cache_mem_mem_req[6] ?
		 i_cache_cache_mem_mem_req[73:66] :
		 i_cache_cache_mem_prev_line[39:32],
	       i_cache_cache_mem_mem_req[5] ?
		 i_cache_cache_mem_mem_req[65:58] :
		 i_cache_cache_mem_prev_line[31:24],
	       i_cache_cache_mem_mem_req[4] ?
		 i_cache_cache_mem_mem_req[57:50] :
		 i_cache_cache_mem_prev_line[23:16],
	       i_cache_cache_mem_mem_req[3] ?
		 i_cache_cache_mem_mem_req[49:42] :
		 i_cache_cache_mem_prev_line[15:8],
	       i_cache_cache_mem_mem_req[2] ?
		 i_cache_cache_mem_mem_req[41:34] :
		 i_cache_cache_mem_prev_line[7:0],
	       i_cache_cache_mem_mem_req[1] } ;
  assign MUX_i_cache_cache_mem_state$write_1__VAL_1 =
	     i_cache_cache_mem_mem_req[290] ? 2'd2 : 2'd0 ;
  assign MUX_i_cache_rsp_cb_buff$upd_2__VAL_2 =
	     { 1'd1, i_cache_cache_mem_rsp_fifo$D_OUT } ;
  assign MUX_i_cache_rsp_cb_buff$upd_2__VAL_3 =
	     { 1'd1, i_cache_mem_rsp_fifo$D_OUT } ;
  assign MUX_i_frontend_axi_axi_state$write_1__VAL_1 =
	     i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 ?
	       2'd0 :
	       2'd3 ;
  assign MUX_i_frontend_axi_axi_state$write_1__VAL_2 =
	     (x__h128341 == 32'hFFFFFFFF) ?
	       2'd2 :
	       (i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 ?
		  2'd0 :
		  2'd2) ;
  assign MUX_i_frontend_axi_cache_wr_req$write_1__VAL_1 =
	     { i_frontend_axi_s_core_wr_in_addr_rv$port1__read[60:29],
	       358'd0 } ;
  assign MUX_i_frontend_axi_cache_wr_req$write_1__VAL_2 =
	     { x__h288270,
	       IF_7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_re_ETC___d297,
	       x1_avValue_strb__h228361,
	       x1_avValue_axi_data__h228362,
	       x1_avValue_axi_strb__h228363,
	       x__h261222 == 32'hFFFFFFFF &&
	       i_frontend_axi_s_core_wr_in_data_rv$port1__read[0],
	       x__h289384,
	       x__h261222 == 32'hFFFFFFFF ||
	       i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	       _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231 } ;
  assign MUX_i_frontend_axi_cache_wr_req$write_1__VAL_3 =
	     { x__h288270,
	       IF_7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_re_ETC___d362,
	       x1_avValue_strb__h288257,
	       x1_avValue_axi_data__h288258,
	       x1_avValue_axi_strb__h288259,
	       x__h261222 == 32'hFFFFFFFF && i_frontend_axi_cache_wr_req[33],
	       x__h289384,
	       x__h261222 == 32'hFFFFFFFF ||
	       i_frontend_axi_cache_wr_req[33] ||
	       _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231 } ;
  assign MUX_i_frontend_axi_cnt_bits$write_1__VAL_1 =
	     i_frontend_axi_cnt_bits + 13'd32 ;
  assign MUX_i_frontend_axi_cnt_req$write_1__VAL_1 =
	     i_frontend_axi_cnt_req + 32'd1 ;
  assign MUX_i_frontend_axi_core_state$write_1__VAL_2 =
	     (i_frontend_axi_cnt_req + 32'd1 == i_frontend_axi_total_req) ?
	       3'd0 :
	       3'd1 ;
  assign MUX_i_frontend_axi_core_state$write_1__VAL_3 =
	     (x__h261222 == 32'hFFFFFFFF || i_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ?
	       3'd6 :
	       3'd4 ;
  assign MUX_i_frontend_axi_core_state$write_1__VAL_4 =
	     (i_frontend_axi_cache_wr_req[37:34] == 4'd0) ?
	       (i_frontend_axi_last_req ? 3'd0 : 3'd4) :
	       3'd5 ;
  assign MUX_i_frontend_axi_rd_addr$write_1__VAL_2 =
	     i_frontend_axi_rd_addr + 32'd32 ;
  assign MUX_i_frontend_axi_req_fifo$enq_1__VAL_1 =
	     { core_r_addr__h216971,
	       1'd1,
	       i_frontend_axi_cache_wr_req_19_BITS_357_TO_134_ETC___d276,
	       res___1_strb__h217369,
	       2'h2 } ;
  assign MUX_i_frontend_axi_req_fifo$enq_1__VAL_2 =
	     { core_r_addr__h216971,
	       1'd1,
	       i_frontend_axi_cache_wr_req_19_BITS_357_TO_134_ETC___d355,
	       res___1_strb__h277574,
	       2'h2 } ;
  assign MUX_i_frontend_axi_req_fifo$enq_1__VAL_3 =
	     { i_frontend_axi_rd_addr,
	       291'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       i_frontend_axi_curr_info[45],
	       axi_rsp_data__h102187,
	       2'd0,
	       i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 } ;
  assign MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       i_frontend_axi_curr_info[45],
	       axi_rsp_data__h144280,
	       2'd0,
	       i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 } ;
  assign MUX_i_frontend_axi_total_req$write_1__VAL_1 =
	     { 27'd0, x__h19797 } + 32'd1 ;
  assign MUX_i_frontend_axi_total_req$write_1__VAL_2 =
	     { 27'd0, x__h168844 } + 32'd1 ;
  assign MUX_i_frontend_axi_v_axi_data$write_1__VAL_1 =
	     { i_frontend_axi_rd_req_fifo$D_OUT[31:0], 65'd0 } ;
  assign MUX_i_frontend_axi_v_axi_data$write_1__VAL_2 =
	     { x__h151501,
	       (x__h128341 == 32'hFFFFFFFF) ? axi_rsp_data__h102187 : 32'd0,
	       x__h151661,
	       x__h128341 != 32'hFFFFFFFF } ;
  assign MUX_i_frontend_axi_v_axi_data$write_1__VAL_3 =
	     { x__h151501,
	       (x__h128341 == 32'hFFFFFFFF) ? axi_rsp_data__h144280 : 32'd0,
	       x__h151661,
	       x__h128341 != 32'hFFFFFFFF } ;
  assign MUX_i_frontend_axi_wr_req$write_1__VAL_1 =
	     { i_frontend_axi_wr_req[61],
	       x_addr__h228244,
	       i_frontend_axi_wr_req[28:0] } ;

  // inlined wires
  assign i_cache_cache_mem_bram_serverAdapter_outData_enqw$whas =
	     i_cache_cache_mem_bram_serverAdapter_outData_ff$FULL_N &&
	     i_cache_cache_mem_bram_serverAdapter_s1[1] &&
	     i_cache_cache_mem_bram_serverAdapter_s1[0] ;
  assign i_cache_cache_mem_bram_serverAdapter_cnt_1$whas =
	     (WILL_FIRE_RL_i_cache_cache_mem_handle_req ||
	      WILL_FIRE_RL_i_cache_cache_mem_write_data_st) &&
	     (!i_cache_cache_mem_bram_serverAdapter_writeWithResp$wget[1] ||
	      i_cache_cache_mem_bram_serverAdapter_writeWithResp$wget[0]) ;
  assign i_cache_cache_mem_bram_serverAdapter_writeWithResp$wget =
	     WILL_FIRE_RL_i_cache_cache_mem_handle_req ? 2'd0 : 2'd2 ;
  assign i_cache_cache_mem_bram_serverAdapter_writeWithResp$whas =
	     WILL_FIRE_RL_i_cache_cache_mem_handle_req ||
	     WILL_FIRE_RL_i_cache_cache_mem_write_data_st ;
  assign i_cache_cache_mem_bram_serverAdapter_s1_1$wget =
	     { 1'd1,
	       !i_cache_cache_mem_bram_serverAdapter_writeWithResp$wget[1] ||
	       i_cache_cache_mem_bram_serverAdapter_writeWithResp$wget[0] } ;
  assign d_cache_cache_mem_bram_serverAdapter_outData_enqw$whas =
	     d_cache_cache_mem_bram_serverAdapter_outData_ff$FULL_N &&
	     d_cache_cache_mem_bram_serverAdapter_s1[1] &&
	     d_cache_cache_mem_bram_serverAdapter_s1[0] ;
  assign d_cache_cache_mem_bram_serverAdapter_cnt_1$whas =
	     (WILL_FIRE_RL_d_cache_cache_mem_handle_req ||
	      WILL_FIRE_RL_d_cache_cache_mem_write_data_st) &&
	     (!d_cache_cache_mem_bram_serverAdapter_writeWithResp$wget[1] ||
	      d_cache_cache_mem_bram_serverAdapter_writeWithResp$wget[0]) ;
  assign d_cache_cache_mem_bram_serverAdapter_writeWithResp$wget =
	     WILL_FIRE_RL_d_cache_cache_mem_handle_req ? 2'd0 : 2'd2 ;
  assign d_cache_cache_mem_bram_serverAdapter_writeWithResp$whas =
	     WILL_FIRE_RL_d_cache_cache_mem_handle_req ||
	     WILL_FIRE_RL_d_cache_cache_mem_write_data_st ;
  assign d_cache_cache_mem_bram_serverAdapter_s1_1$wget =
	     { 1'd1,
	       !d_cache_cache_mem_bram_serverAdapter_writeWithResp$wget[1] ||
	       d_cache_cache_mem_bram_serverAdapter_writeWithResp$wget[0] } ;
  assign i_frontend_axi_s_core_rd_arinpkg$wget =
	     { core_imem_arid,
	       core_imem_araddr,
	       core_imem_arlen,
	       core_imem_arsize,
	       core_imem_arburst,
	       core_imem_arlock,
	       core_imem_arcache,
	       core_imem_arprot,
	       core_imem_arqos,
	       core_imem_arregion } ;
  assign i_frontend_axi_s_core_wr_arinpkg_addr$wget =
	     { core_imem_awid,
	       core_imem_awaddr,
	       core_imem_awlen,
	       core_imem_awsize,
	       core_imem_awburst,
	       core_imem_awlock,
	       core_imem_awcache,
	       core_imem_awprot,
	       core_imem_awqos,
	       core_imem_awregion } ;
  assign i_frontend_axi_s_core_wr_arinpkg_data$wget =
	     { core_imem_wdata, core_imem_wstrb, core_imem_wlast } ;
  assign d_frontend_axi_s_core_rd_arinpkg$wget =
	     { core_dmem_arid,
	       core_dmem_araddr,
	       core_dmem_arlen,
	       core_dmem_arsize,
	       core_dmem_arburst,
	       core_dmem_arlock,
	       core_dmem_arcache,
	       core_dmem_arprot,
	       core_dmem_arqos,
	       core_dmem_arregion } ;
  assign d_frontend_axi_s_core_wr_arinpkg_addr$wget =
	     { core_dmem_awid,
	       core_dmem_awaddr,
	       core_dmem_awlen,
	       core_dmem_awsize,
	       core_dmem_awburst,
	       core_dmem_awlock,
	       core_dmem_awcache,
	       core_dmem_awprot,
	       core_dmem_awqos,
	       core_dmem_awregion } ;
  assign d_frontend_axi_s_core_wr_arinpkg_data$wget =
	     { core_dmem_wdata, core_dmem_wstrb, core_dmem_wlast } ;
  assign i_backend_axi_m_mem_rd_rinpkg$wget =
	     { imem_rid, imem_rdata, imem_rresp, imem_rlast } ;
  assign i_backend_axi_m_mem_wr_rinpkg$wget = { imem_bid, imem_bresp } ;
  assign d_backend_axi_m_mem_rd_rinpkg$wget =
	     { dmem_rid, dmem_rdata, dmem_rresp, dmem_rlast } ;
  assign d_backend_axi_m_mem_wr_rinpkg$wget = { dmem_bid, dmem_bresp } ;
  assign i_frontend_axi_s_core_rd_in_rv$EN_port0__write =
	     !i_frontend_axi_s_core_rd_in_rv[62] &&
	     !i_frontend_axi_s_core_rd_isRst_isInReset &&
	     core_imem_arvalid ;
  assign i_frontend_axi_s_core_rd_in_rv$port0__write_1 =
	     { 1'd1, i_frontend_axi_s_core_rd_arinpkg$wget } ;
  assign i_frontend_axi_s_core_rd_in_rv$port1__read =
	     i_frontend_axi_s_core_rd_in_rv$EN_port0__write ?
	       i_frontend_axi_s_core_rd_in_rv$port0__write_1 :
	       i_frontend_axi_s_core_rd_in_rv ;
  assign i_frontend_axi_s_core_rd_in_rv$port2__read =
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ?
	       63'h2AAAAAAAAAAAAAAA :
	       i_frontend_axi_s_core_rd_in_rv$port1__read ;
  assign i_frontend_axi_s_core_rd_out_rv$EN_port0__write =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data &&
	     x__h128341 != 32'hFFFFFFFF ||
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data &&
	     x__h128341 != 32'hFFFFFFFF ;
  assign i_frontend_axi_s_core_rd_out_rv$port0__write_1 =
	     MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__SEL_1 ?
	       MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_1 :
	       MUX_i_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_2 ;
  assign i_frontend_axi_s_core_rd_out_rv$port1__read =
	     i_frontend_axi_s_core_rd_out_rv$EN_port0__write ?
	       i_frontend_axi_s_core_rd_out_rv$port0__write_1 :
	       i_frontend_axi_s_core_rd_out_rv ;
  assign i_frontend_axi_s_core_rd_out_rv$EN_port1__write =
	     i_frontend_axi_s_core_rd_out_rv$port1__read[36] &&
	     !i_frontend_axi_s_core_rd_isRst_isInReset &&
	     core_imem_rready ;
  assign i_frontend_axi_s_core_rd_out_rv$port2__read =
	     i_frontend_axi_s_core_rd_out_rv$EN_port1__write ?
	       37'h0AAAAAAAAA :
	       i_frontend_axi_s_core_rd_out_rv$port1__read ;
  assign i_frontend_axi_s_core_wr_in_addr_rv$EN_port0__write =
	     !i_frontend_axi_s_core_wr_in_addr_rv[62] &&
	     !i_frontend_axi_s_core_wr_isRst_isInReset &&
	     core_imem_awvalid ;
  assign i_frontend_axi_s_core_wr_in_addr_rv$port0__write_1 =
	     { 1'd1, i_frontend_axi_s_core_wr_arinpkg_addr$wget } ;
  assign i_frontend_axi_s_core_wr_in_addr_rv$port1__read =
	     i_frontend_axi_s_core_wr_in_addr_rv$EN_port0__write ?
	       i_frontend_axi_s_core_wr_in_addr_rv$port0__write_1 :
	       i_frontend_axi_s_core_wr_in_addr_rv ;
  assign i_frontend_axi_s_core_wr_in_addr_rv$port2__read =
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ?
	       63'h2AAAAAAAAAAAAAAA :
	       i_frontend_axi_s_core_wr_in_addr_rv$port1__read ;
  assign i_frontend_axi_s_core_wr_in_data_rv$EN_port0__write =
	     !i_frontend_axi_s_core_wr_in_data_rv[37] &&
	     !i_frontend_axi_s_core_wr_isRst_isInReset &&
	     core_imem_wvalid ;
  assign i_frontend_axi_s_core_wr_in_data_rv$port0__write_1 =
	     { 1'd1, i_frontend_axi_s_core_wr_arinpkg_data$wget } ;
  assign i_frontend_axi_s_core_wr_in_data_rv$port1__read =
	     i_frontend_axi_s_core_wr_in_data_rv$EN_port0__write ?
	       i_frontend_axi_s_core_wr_in_data_rv$port0__write_1 :
	       i_frontend_axi_s_core_wr_in_data_rv ;
  assign i_frontend_axi_s_core_wr_in_data_rv$port2__read =
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line ?
	       38'h0AAAAAAAAA :
	       i_frontend_axi_s_core_wr_in_data_rv$port1__read ;
  assign i_frontend_axi_s_core_wr_out_rv$port0__write_1 =
	     { 1'd1, i_frontend_axi_wr_req[61], 2'd0 } ;
  assign i_frontend_axi_s_core_wr_out_rv$port1__read =
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line ?
	       i_frontend_axi_s_core_wr_out_rv$port0__write_1 :
	       i_frontend_axi_s_core_wr_out_rv ;
  assign i_frontend_axi_s_core_wr_out_rv$EN_port1__write =
	     i_frontend_axi_s_core_wr_out_rv$port1__read[3] &&
	     !i_frontend_axi_s_core_wr_isRst_isInReset &&
	     core_imem_bready ;
  assign i_frontend_axi_s_core_wr_out_rv$port2__read =
	     i_frontend_axi_s_core_wr_out_rv$EN_port1__write ?
	       4'd2 :
	       i_frontend_axi_s_core_wr_out_rv$port1__read ;
  assign d_frontend_axi_s_core_rd_in_rv$EN_port0__write =
	     !d_frontend_axi_s_core_rd_in_rv[62] &&
	     !d_frontend_axi_s_core_rd_isRst_isInReset &&
	     core_dmem_arvalid ;
  assign d_frontend_axi_s_core_rd_in_rv$port0__write_1 =
	     { 1'd1, d_frontend_axi_s_core_rd_arinpkg$wget } ;
  assign d_frontend_axi_s_core_rd_in_rv$port1__read =
	     d_frontend_axi_s_core_rd_in_rv$EN_port0__write ?
	       d_frontend_axi_s_core_rd_in_rv$port0__write_1 :
	       d_frontend_axi_s_core_rd_in_rv ;
  assign d_frontend_axi_s_core_rd_in_rv$port2__read =
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ?
	       63'h2AAAAAAAAAAAAAAA :
	       d_frontend_axi_s_core_rd_in_rv$port1__read ;
  assign d_frontend_axi_s_core_rd_out_rv$EN_port0__write =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data &&
	     x__h433621 != 32'hFFFFFFFF ||
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data &&
	     x__h433621 != 32'hFFFFFFFF ;
  assign d_frontend_axi_s_core_rd_out_rv$port0__write_1 =
	     MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__SEL_1 ?
	       MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_1 :
	       MUX_d_frontend_axi_s_core_rd_out_rv$port0__write_1__VAL_2 ;
  assign d_frontend_axi_s_core_rd_out_rv$port1__read =
	     d_frontend_axi_s_core_rd_out_rv$EN_port0__write ?
	       d_frontend_axi_s_core_rd_out_rv$port0__write_1 :
	       d_frontend_axi_s_core_rd_out_rv ;
  assign d_frontend_axi_s_core_rd_out_rv$EN_port1__write =
	     d_frontend_axi_s_core_rd_out_rv$port1__read[36] &&
	     !d_frontend_axi_s_core_rd_isRst_isInReset &&
	     core_dmem_rready ;
  assign d_frontend_axi_s_core_rd_out_rv$port2__read =
	     d_frontend_axi_s_core_rd_out_rv$EN_port1__write ?
	       37'h0AAAAAAAAA :
	       d_frontend_axi_s_core_rd_out_rv$port1__read ;
  assign d_frontend_axi_s_core_wr_in_addr_rv$EN_port0__write =
	     !d_frontend_axi_s_core_wr_in_addr_rv[62] &&
	     !d_frontend_axi_s_core_wr_isRst_isInReset &&
	     core_dmem_awvalid ;
  assign d_frontend_axi_s_core_wr_in_addr_rv$port0__write_1 =
	     { 1'd1, d_frontend_axi_s_core_wr_arinpkg_addr$wget } ;
  assign d_frontend_axi_s_core_wr_in_addr_rv$port1__read =
	     d_frontend_axi_s_core_wr_in_addr_rv$EN_port0__write ?
	       d_frontend_axi_s_core_wr_in_addr_rv$port0__write_1 :
	       d_frontend_axi_s_core_wr_in_addr_rv ;
  assign d_frontend_axi_s_core_wr_in_addr_rv$port2__read =
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ?
	       63'h2AAAAAAAAAAAAAAA :
	       d_frontend_axi_s_core_wr_in_addr_rv$port1__read ;
  assign d_frontend_axi_s_core_wr_in_data_rv$EN_port0__write =
	     !d_frontend_axi_s_core_wr_in_data_rv[37] &&
	     !d_frontend_axi_s_core_wr_isRst_isInReset &&
	     core_dmem_wvalid ;
  assign d_frontend_axi_s_core_wr_in_data_rv$port0__write_1 =
	     { 1'd1, d_frontend_axi_s_core_wr_arinpkg_data$wget } ;
  assign d_frontend_axi_s_core_wr_in_data_rv$port1__read =
	     d_frontend_axi_s_core_wr_in_data_rv$EN_port0__write ?
	       d_frontend_axi_s_core_wr_in_data_rv$port0__write_1 :
	       d_frontend_axi_s_core_wr_in_data_rv ;
  assign d_frontend_axi_s_core_wr_in_data_rv$port2__read =
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line ?
	       38'h0AAAAAAAAA :
	       d_frontend_axi_s_core_wr_in_data_rv$port1__read ;
  assign d_frontend_axi_s_core_wr_out_rv$port0__write_1 =
	     { 1'd1, d_frontend_axi_wr_req[61], 2'd0 } ;
  assign d_frontend_axi_s_core_wr_out_rv$port1__read =
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line ?
	       d_frontend_axi_s_core_wr_out_rv$port0__write_1 :
	       d_frontend_axi_s_core_wr_out_rv ;
  assign d_frontend_axi_s_core_wr_out_rv$EN_port1__write =
	     d_frontend_axi_s_core_wr_out_rv$port1__read[3] &&
	     !d_frontend_axi_s_core_wr_isRst_isInReset &&
	     core_dmem_bready ;
  assign d_frontend_axi_s_core_wr_out_rv$port2__read =
	     d_frontend_axi_s_core_wr_out_rv$EN_port1__write ?
	       4'd2 :
	       d_frontend_axi_s_core_wr_out_rv$port1__read ;
  assign i_cache_rsp_fifo_rv$EN_port0__write =
	     CAN_FIRE_RL_i_cache_send_rsp && !WILL_FIRE_RL_i_cache_core_req ;
  assign i_cache_rsp_fifo_rv$port0__write_1 =
	     { 1'd1, i_cache_rsp_cb_buff$D_OUT_1[256:0] } ;
  assign i_cache_rsp_fifo_rv$port1__read =
	     i_cache_rsp_fifo_rv$EN_port0__write ?
	       i_cache_rsp_fifo_rv$port0__write_1 :
	       i_cache_rsp_fifo_rv ;
  assign i_cache_rsp_fifo_rv$EN_port1__write =
	     i_cache_rsp_fifo_rv$port1__read[257] &&
	     i_frontend_axi_rsp_fifo$FULL_N ;
  assign i_cache_rsp_fifo_rv$port2__read =
	     i_cache_rsp_fifo_rv$EN_port1__write ?
	       258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       i_cache_rsp_fifo_rv$port1__read ;
  assign i_backend_axi_m_mem_rd_in_rv$port0__write_1 =
	     { 2'd2,
	       i_backend_axi_mem_req_fifo$D_OUT[322:291],
	       29'd15273984 } ;
  assign i_backend_axi_m_mem_rd_in_rv$port1__read =
	     MUX_i_backend_axi_line_chunk$write_1__SEL_1 ?
	       i_backend_axi_m_mem_rd_in_rv$port0__write_1 :
	       i_backend_axi_m_mem_rd_in_rv ;
  assign i_backend_axi_m_mem_rd_in_rv$EN_port1__write =
	     i_backend_axi_m_mem_rd_in_rv$port1__read[62] &&
	     !i_backend_axi_m_mem_rd_isRst_isInReset &&
	     imem_arready ;
  assign i_backend_axi_m_mem_rd_in_rv$port2__read =
	     i_backend_axi_m_mem_rd_in_rv$EN_port1__write ?
	       63'h2AAAAAAAAAAAAAAA :
	       i_backend_axi_m_mem_rd_in_rv$port1__read ;
  assign i_backend_axi_m_mem_rd_out_rv$EN_port0__write =
	     !i_backend_axi_m_mem_rd_out_rv[36] &&
	     !i_backend_axi_m_mem_rd_isRst_isInReset &&
	     imem_rvalid ;
  assign i_backend_axi_m_mem_rd_out_rv$port0__write_1 =
	     { 1'd1, i_backend_axi_m_mem_rd_rinpkg$wget } ;
  assign i_backend_axi_m_mem_rd_out_rv$port1__read =
	     i_backend_axi_m_mem_rd_out_rv$EN_port0__write ?
	       i_backend_axi_m_mem_rd_out_rv$port0__write_1 :
	       i_backend_axi_m_mem_rd_out_rv ;
  assign i_backend_axi_m_mem_rd_out_rv$port2__read =
	     WILL_FIRE_RL_i_backend_axi_mem_get_rd ?
	       37'h0AAAAAAAAA :
	       i_backend_axi_m_mem_rd_out_rv$port1__read ;
  assign i_backend_axi_m_mem_wr_in_addr_rv$port1__read =
	     MUX_i_backend_axi_cnt_burst$write_1__SEL_1 ?
	       i_backend_axi_m_mem_rd_in_rv$port0__write_1 :
	       i_backend_axi_m_mem_wr_in_addr_rv ;
  assign i_backend_axi_m_mem_wr_in_addr_rv$EN_port1__write =
	     i_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] &&
	     !i_backend_axi_m_mem_wr_isRst_isInReset &&
	     imem_awready ;
  assign i_backend_axi_m_mem_wr_in_addr_rv$port2__read =
	     i_backend_axi_m_mem_wr_in_addr_rv$EN_port1__write ?
	       63'h2AAAAAAAAAAAAAAA :
	       i_backend_axi_m_mem_wr_in_addr_rv$port1__read ;
  assign i_backend_axi_m_mem_wr_in_data_rv$port0__write_1 =
	     { 1'd1,
	       data__h1082863,
	       strb__h1082864,
	       i_backend_axi_cnt_burst_561_EQ_i_backend_axi_t_ETC___d1574 } ;
  assign i_backend_axi_m_mem_wr_in_data_rv$port1__read =
	     WILL_FIRE_RL_i_backend_axi_mem_send_data ?
	       i_backend_axi_m_mem_wr_in_data_rv$port0__write_1 :
	       i_backend_axi_m_mem_wr_in_data_rv ;
  assign i_backend_axi_m_mem_wr_in_data_rv$EN_port1__write =
	     i_backend_axi_m_mem_wr_in_data_rv$port1__read[37] &&
	     !i_backend_axi_m_mem_wr_isRst_isInReset &&
	     imem_wready ;
  assign i_backend_axi_m_mem_wr_in_data_rv$port2__read =
	     i_backend_axi_m_mem_wr_in_data_rv$EN_port1__write ?
	       38'h0AAAAAAAAA :
	       i_backend_axi_m_mem_wr_in_data_rv$port1__read ;
  assign i_backend_axi_m_mem_wr_out_rv$EN_port0__write =
	     !i_backend_axi_m_mem_wr_out_rv[3] &&
	     !i_backend_axi_m_mem_wr_isRst_isInReset &&
	     imem_bvalid ;
  assign i_backend_axi_m_mem_wr_out_rv$port0__write_1 =
	     { 1'd1, i_backend_axi_m_mem_wr_rinpkg$wget } ;
  assign i_backend_axi_m_mem_wr_out_rv$port1__read =
	     i_backend_axi_m_mem_wr_out_rv$EN_port0__write ?
	       i_backend_axi_m_mem_wr_out_rv$port0__write_1 :
	       i_backend_axi_m_mem_wr_out_rv ;
  assign i_backend_axi_m_mem_wr_out_rv$port2__read =
	     WILL_FIRE_RL_i_backend_axi_mem_get_wr_rsp ?
	       4'd2 :
	       i_backend_axi_m_mem_wr_out_rv$port1__read ;
  assign d_backend_axi_m_mem_rd_in_rv$port0__write_1 =
	     { 2'd2,
	       d_backend_axi_mem_req_fifo$D_OUT[322:291],
	       29'd15273984 } ;
  assign d_backend_axi_m_mem_rd_in_rv$port1__read =
	     MUX_d_backend_axi_line_chunk$write_1__SEL_1 ?
	       d_backend_axi_m_mem_rd_in_rv$port0__write_1 :
	       d_backend_axi_m_mem_rd_in_rv ;
  assign d_backend_axi_m_mem_rd_in_rv$EN_port1__write =
	     d_backend_axi_m_mem_rd_in_rv$port1__read[62] &&
	     !d_backend_axi_m_mem_rd_isRst_isInReset &&
	     dmem_arready ;
  assign d_backend_axi_m_mem_rd_in_rv$port2__read =
	     d_backend_axi_m_mem_rd_in_rv$EN_port1__write ?
	       63'h2AAAAAAAAAAAAAAA :
	       d_backend_axi_m_mem_rd_in_rv$port1__read ;
  assign d_backend_axi_m_mem_rd_out_rv$EN_port0__write =
	     !d_backend_axi_m_mem_rd_out_rv[36] &&
	     !d_backend_axi_m_mem_rd_isRst_isInReset &&
	     dmem_rvalid ;
  assign d_backend_axi_m_mem_rd_out_rv$port0__write_1 =
	     { 1'd1, d_backend_axi_m_mem_rd_rinpkg$wget } ;
  assign d_backend_axi_m_mem_rd_out_rv$port1__read =
	     d_backend_axi_m_mem_rd_out_rv$EN_port0__write ?
	       d_backend_axi_m_mem_rd_out_rv$port0__write_1 :
	       d_backend_axi_m_mem_rd_out_rv ;
  assign d_backend_axi_m_mem_rd_out_rv$port2__read =
	     WILL_FIRE_RL_d_backend_axi_mem_get_rd ?
	       37'h0AAAAAAAAA :
	       d_backend_axi_m_mem_rd_out_rv$port1__read ;
  assign d_backend_axi_m_mem_wr_in_addr_rv$port1__read =
	     MUX_d_backend_axi_cnt_burst$write_1__SEL_1 ?
	       d_backend_axi_m_mem_rd_in_rv$port0__write_1 :
	       d_backend_axi_m_mem_wr_in_addr_rv ;
  assign d_backend_axi_m_mem_wr_in_addr_rv$EN_port1__write =
	     d_backend_axi_m_mem_wr_in_addr_rv$port1__read[62] &&
	     !d_backend_axi_m_mem_wr_isRst_isInReset &&
	     dmem_awready ;
  assign d_backend_axi_m_mem_wr_in_addr_rv$port2__read =
	     d_backend_axi_m_mem_wr_in_addr_rv$EN_port1__write ?
	       63'h2AAAAAAAAAAAAAAA :
	       d_backend_axi_m_mem_wr_in_addr_rv$port1__read ;
  assign d_backend_axi_m_mem_wr_in_data_rv$port0__write_1 =
	     { 1'd1,
	       data__h1179674,
	       strb__h1179675,
	       d_backend_axi_cnt_burst_721_EQ_d_backend_axi_t_ETC___d1734 } ;
  assign d_backend_axi_m_mem_wr_in_data_rv$port1__read =
	     WILL_FIRE_RL_d_backend_axi_mem_send_data ?
	       d_backend_axi_m_mem_wr_in_data_rv$port0__write_1 :
	       d_backend_axi_m_mem_wr_in_data_rv ;
  assign d_backend_axi_m_mem_wr_in_data_rv$EN_port1__write =
	     d_backend_axi_m_mem_wr_in_data_rv$port1__read[37] &&
	     !d_backend_axi_m_mem_wr_isRst_isInReset &&
	     dmem_wready ;
  assign d_backend_axi_m_mem_wr_in_data_rv$port2__read =
	     d_backend_axi_m_mem_wr_in_data_rv$EN_port1__write ?
	       38'h0AAAAAAAAA :
	       d_backend_axi_m_mem_wr_in_data_rv$port1__read ;
  assign d_backend_axi_m_mem_wr_out_rv$EN_port0__write =
	     !d_backend_axi_m_mem_wr_out_rv[3] &&
	     !d_backend_axi_m_mem_wr_isRst_isInReset &&
	     dmem_bvalid ;
  assign d_backend_axi_m_mem_wr_out_rv$port0__write_1 =
	     { 1'd1, d_backend_axi_m_mem_wr_rinpkg$wget } ;
  assign d_backend_axi_m_mem_wr_out_rv$port1__read =
	     d_backend_axi_m_mem_wr_out_rv$EN_port0__write ?
	       d_backend_axi_m_mem_wr_out_rv$port0__write_1 :
	       d_backend_axi_m_mem_wr_out_rv ;
  assign d_backend_axi_m_mem_wr_out_rv$port2__read =
	     WILL_FIRE_RL_d_backend_axi_mem_get_wr_rsp ?
	       4'd2 :
	       d_backend_axi_m_mem_wr_out_rv$port1__read ;

  // register d_backend_axi_cnt_burst
  assign d_backend_axi_cnt_burst$D_IN =
	     MUX_d_backend_axi_cnt_burst$write_1__SEL_1 ?
	       8'd0 :
	       MUX_d_backend_axi_cnt_burst$write_1__VAL_2 ;
  assign d_backend_axi_cnt_burst$EN =
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	     d_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_d_backend_axi_mem_send_data ;

  // register d_backend_axi_cnt_wr_rsp
  assign d_backend_axi_cnt_wr_rsp$D_IN =
	     MUX_d_backend_axi_cnt_burst$write_1__SEL_1 ?
	       8'd0 :
	       MUX_d_backend_axi_cnt_wr_rsp$write_1__VAL_2 ;
  assign d_backend_axi_cnt_wr_rsp$EN =
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	     d_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_d_backend_axi_mem_get_wr_rsp ;

  // register d_backend_axi_line_chunk
  assign d_backend_axi_line_chunk$D_IN =
	     MUX_d_backend_axi_line_chunk$write_1__SEL_1 ?
	       3'd0 :
	       MUX_d_backend_axi_line_chunk$write_1__VAL_2 ;
  assign d_backend_axi_line_chunk$EN =
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	     !d_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_d_backend_axi_mem_get_rd &&
	     !d_backend_axi_m_mem_rd_out_rv$port1__read[0] ;

  // register d_backend_axi_line_reg
  assign d_backend_axi_line_reg$D_IN =
	     MUX_d_backend_axi_line_chunk$write_1__SEL_1 ?
	       256'd0 :
	       IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1701 ;
  assign d_backend_axi_line_reg$EN =
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	     !d_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_d_backend_axi_mem_get_rd &&
	     !d_backend_axi_m_mem_rd_out_rv$port1__read[0] ;

  // register d_backend_axi_m_mem_rd_in_rv
  assign d_backend_axi_m_mem_rd_in_rv$D_IN =
	     d_backend_axi_m_mem_rd_in_rv$port2__read ;
  assign d_backend_axi_m_mem_rd_in_rv$EN = 1'b1 ;

  // register d_backend_axi_m_mem_rd_isRst_isInReset
  assign d_backend_axi_m_mem_rd_isRst_isInReset$D_IN = 1'd0 ;
  assign d_backend_axi_m_mem_rd_isRst_isInReset$EN =
	     d_backend_axi_m_mem_rd_isRst_isInReset ;

  // register d_backend_axi_m_mem_rd_out_rv
  assign d_backend_axi_m_mem_rd_out_rv$D_IN =
	     d_backend_axi_m_mem_rd_out_rv$port2__read ;
  assign d_backend_axi_m_mem_rd_out_rv$EN = 1'b1 ;

  // register d_backend_axi_m_mem_wr_in_addr_rv
  assign d_backend_axi_m_mem_wr_in_addr_rv$D_IN =
	     d_backend_axi_m_mem_wr_in_addr_rv$port2__read ;
  assign d_backend_axi_m_mem_wr_in_addr_rv$EN = 1'b1 ;

  // register d_backend_axi_m_mem_wr_in_data_rv
  assign d_backend_axi_m_mem_wr_in_data_rv$D_IN =
	     d_backend_axi_m_mem_wr_in_data_rv$port2__read ;
  assign d_backend_axi_m_mem_wr_in_data_rv$EN = 1'b1 ;

  // register d_backend_axi_m_mem_wr_isRst_isInReset
  assign d_backend_axi_m_mem_wr_isRst_isInReset$D_IN = 1'd0 ;
  assign d_backend_axi_m_mem_wr_isRst_isInReset$EN =
	     d_backend_axi_m_mem_wr_isRst_isInReset ;

  // register d_backend_axi_m_mem_wr_out_rv
  assign d_backend_axi_m_mem_wr_out_rv$D_IN =
	     d_backend_axi_m_mem_wr_out_rv$port2__read ;
  assign d_backend_axi_m_mem_wr_out_rv$EN = 1'b1 ;

  // register d_backend_axi_req_reg
  assign d_backend_axi_req_reg$D_IN = d_backend_axi_mem_req_fifo$D_OUT ;
  assign d_backend_axi_req_reg$EN = WILL_FIRE_RL_d_backend_axi_mem_req_rule ;

  // register d_backend_axi_state
  always@(WILL_FIRE_RL_d_backend_axi_mem_req_rule or
	  MUX_d_backend_axi_state$write_1__VAL_3 or
	  WILL_FIRE_RL_d_backend_axi_mem_send_data or
	  MUX_d_backend_axi_state$write_1__VAL_4 or
	  MUX_d_backend_axi_state$write_1__SEL_1 or
	  MUX_d_backend_axi_mem_rsp_fifo$enq_1__SEL_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_d_backend_axi_mem_req_rule:
	  d_backend_axi_state$D_IN = MUX_d_backend_axi_state$write_1__VAL_3;
      WILL_FIRE_RL_d_backend_axi_mem_send_data:
	  d_backend_axi_state$D_IN = MUX_d_backend_axi_state$write_1__VAL_4;
      MUX_d_backend_axi_state$write_1__SEL_1 ||
      MUX_d_backend_axi_mem_rsp_fifo$enq_1__SEL_1:
	  d_backend_axi_state$D_IN = 2'd0;
      default: d_backend_axi_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign d_backend_axi_state$EN =
	     d_backend_axi_state == 2'd3 && d_backend_axi_wr_rsp_complete ||
	     WILL_FIRE_RL_d_backend_axi_mem_get_rd &&
	     d_backend_axi_m_mem_rd_out_rv$port1__read[0] ||
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule ||
	     WILL_FIRE_RL_d_backend_axi_mem_send_data ;

  // register d_backend_axi_tot_burst
  assign d_backend_axi_tot_burst$D_IN = 8'd7 ;
  assign d_backend_axi_tot_burst$EN =
	     MUX_d_backend_axi_cnt_burst$write_1__SEL_1 ;

  // register d_backend_axi_wr_rsp_complete
  assign d_backend_axi_wr_rsp_complete$D_IN =
	     !MUX_d_backend_axi_cnt_burst$write_1__SEL_1 ;
  assign d_backend_axi_wr_rsp_complete$EN =
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	     d_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_d_backend_axi_mem_get_wr_rsp &&
	     d_backend_axi_cnt_wr_rsp_744_EQ_d_backend_axi__ETC___d1746 ;

  // register d_cache_cache_mem_bram_serverAdapter_cnt
  assign d_cache_cache_mem_bram_serverAdapter_cnt$D_IN =
	     d_cache_cache_mem_bram_serverAdapter_cnt_075_P_ETC___d1081 ;
  assign d_cache_cache_mem_bram_serverAdapter_cnt$EN =
	     d_cache_cache_mem_bram_serverAdapter_cnt_1$whas ||
	     WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp ;

  // register d_cache_cache_mem_bram_serverAdapter_s1
  assign d_cache_cache_mem_bram_serverAdapter_s1$D_IN =
	     d_cache_cache_mem_bram_serverAdapter_writeWithResp$whas ?
	       d_cache_cache_mem_bram_serverAdapter_s1_1$wget :
	       2'd0 ;
  assign d_cache_cache_mem_bram_serverAdapter_s1$EN = 1'd1 ;

  // register d_cache_cache_mem_mem_req
  assign d_cache_cache_mem_mem_req$D_IN = d_cache_cache_mem_req_fifo$D_OUT ;
  assign d_cache_cache_mem_mem_req$EN =
	     WILL_FIRE_RL_d_cache_cache_mem_handle_req ;

  // register d_cache_cache_mem_prev_line
  assign d_cache_cache_mem_prev_line$D_IN =
	     d_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_mem_bram_serverAdapter_outData_ff$D_OUT :
	       d_cache_cache_mem_bram_memory$DO ;
  assign d_cache_cache_mem_prev_line$EN =
	     WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp &&
	     d_cache_cache_mem_mem_req[290] ;

  // register d_cache_cache_mem_state
  always@(WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp or
	  MUX_d_cache_cache_mem_state$write_1__VAL_1 or
	  WILL_FIRE_RL_d_cache_cache_mem_write_data_st or
	  WILL_FIRE_RL_d_cache_cache_mem_handle_req)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp:
	  d_cache_cache_mem_state$D_IN =
	      MUX_d_cache_cache_mem_state$write_1__VAL_1;
      WILL_FIRE_RL_d_cache_cache_mem_write_data_st:
	  d_cache_cache_mem_state$D_IN = 2'd0;
      WILL_FIRE_RL_d_cache_cache_mem_handle_req:
	  d_cache_cache_mem_state$D_IN = 2'd1;
      default: d_cache_cache_mem_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign d_cache_cache_mem_state$EN =
	     WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp ||
	     WILL_FIRE_RL_d_cache_cache_mem_write_data_st ||
	     WILL_FIRE_RL_d_cache_cache_mem_handle_req ;

  // register d_cache_miss_req
  assign d_cache_miss_req$D_IN = d_cache_req_fifo$D_OUT ;
  assign d_cache_miss_req$EN =
	     WILL_FIRE_RL_d_cache_core_req && !d_cache_req_fifo$D_OUT[290] &&
	     (!d_cache_tag_array$D_OUT_1[22] ||
	      !d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294) ;

  // register d_cache_state
  always@(WILL_FIRE_RL_d_cache_core_req or
	  MUX_d_cache_state$write_1__VAL_1 or
	  WILL_FIRE_RL_d_cache_start_miss or
	  MUX_d_cache_state$write_1__VAL_2 or
	  WILL_FIRE_RL_d_cache_wait_mem_rsp_ or
	  MUX_d_cache_state$write_1__VAL_3 or
	  WILL_FIRE_RL_d_cache_cache_mem_rsp or
	  WILL_FIRE_RL_d_cache_wait_fill_rsp or
	  WILL_FIRE_RL_d_cache_send_fill_req or
	  WILL_FIRE_RL_d_cache_writeback_rsp)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_d_cache_core_req:
	  d_cache_state$D_IN = MUX_d_cache_state$write_1__VAL_1;
      WILL_FIRE_RL_d_cache_start_miss:
	  d_cache_state$D_IN = MUX_d_cache_state$write_1__VAL_2;
      WILL_FIRE_RL_d_cache_wait_mem_rsp_:
	  d_cache_state$D_IN = MUX_d_cache_state$write_1__VAL_3;
      WILL_FIRE_RL_d_cache_cache_mem_rsp: d_cache_state$D_IN = 3'd0;
      WILL_FIRE_RL_d_cache_wait_fill_rsp: d_cache_state$D_IN = 3'd1;
      WILL_FIRE_RL_d_cache_send_fill_req: d_cache_state$D_IN = 3'd5;
      WILL_FIRE_RL_d_cache_writeback_rsp: d_cache_state$D_IN = 3'd6;
      default: d_cache_state$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign d_cache_state$EN =
	     WILL_FIRE_RL_d_cache_core_req ||
	     WILL_FIRE_RL_d_cache_start_miss ||
	     WILL_FIRE_RL_d_cache_wait_mem_rsp_ ||
	     WILL_FIRE_RL_d_cache_cache_mem_rsp ||
	     WILL_FIRE_RL_d_cache_wait_fill_rsp ||
	     WILL_FIRE_RL_d_cache_send_fill_req ||
	     WILL_FIRE_RL_d_cache_writeback_rsp ;

  // register d_cache_wb_addr
  assign d_cache_wb_addr$D_IN = addr__h904337 ;
  assign d_cache_wb_addr$EN = MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_2 ;

  // register d_cache_write_miss
  assign d_cache_write_miss$D_IN = !MUX_d_cache_rsp_fifo$enq_1__SEL_1 ;
  assign d_cache_write_miss$EN =
	     WILL_FIRE_RL_d_cache_wait_mem_rsp_ && d_cache_write_miss ||
	     WILL_FIRE_RL_d_cache_core_req && d_cache_req_fifo$D_OUT[290] &&
	     (!d_cache_tag_array$D_OUT_1[22] ||
	      !d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294) ;

  // register d_frontend_axi_axi_state
  always@(MUX_d_frontend_axi_axi_state$write_1__SEL_1 or
	  MUX_d_frontend_axi_axi_state$write_1__VAL_1 or
	  MUX_d_frontend_axi_axi_state$write_1__SEL_2 or
	  MUX_d_frontend_axi_axi_state$write_1__VAL_2 or
	  MUX_d_frontend_axi_axi_state$write_1__SEL_3 or
	  WILL_FIRE_RL_d_frontend_axi_wr_get_req or
	  WILL_FIRE_RL_d_frontend_axi_rd_axi_ready)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_frontend_axi_axi_state$write_1__SEL_1:
	  d_frontend_axi_axi_state$D_IN =
	      MUX_d_frontend_axi_axi_state$write_1__VAL_1;
      MUX_d_frontend_axi_axi_state$write_1__SEL_2:
	  d_frontend_axi_axi_state$D_IN =
	      MUX_d_frontend_axi_axi_state$write_1__VAL_2;
      MUX_d_frontend_axi_axi_state$write_1__SEL_3:
	  d_frontend_axi_axi_state$D_IN = 2'd0;
      WILL_FIRE_RL_d_frontend_axi_wr_get_req:
	  d_frontend_axi_axi_state$D_IN = 2'd1;
      WILL_FIRE_RL_d_frontend_axi_rd_axi_ready:
	  d_frontend_axi_axi_state$D_IN = 2'd2;
      default: d_frontend_axi_axi_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign d_frontend_axi_axi_state$EN =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data &&
	     x__h433621 != 32'hFFFFFFFF &&
	     (d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 ||
	      IF_7_MINUS_0_CONCAT_d_frontend_axi_v_axi_data__ETC___d502) ||
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data &&
	     (x__h433621 == 32'hFFFFFFFF ||
	      d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 ||
	      !IF_7_MINUS_0_CONCAT_d_frontend_axi_v_axi_data__ETC___d502) ||
	     WILL_FIRE_RL_d_frontend_axi_wr_rq_wait &&
	     d_frontend_axi_cache_wr_req[37:34] == 4'd0 &&
	     d_frontend_axi_last_req ||
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_ready ;

  // register d_frontend_axi_cache_wr_req
  always@(WILL_FIRE_RL_d_frontend_axi_wr_get_req or
	  MUX_d_frontend_axi_cache_wr_req$write_1__VAL_1 or
	  WILL_FIRE_RL_d_frontend_axi_wr_set_line or
	  MUX_d_frontend_axi_cache_wr_req$write_1__VAL_2 or
	  WILL_FIRE_RL_d_frontend_axi_wr_leftover_data or
	  MUX_d_frontend_axi_cache_wr_req$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_d_frontend_axi_wr_get_req:
	  d_frontend_axi_cache_wr_req$D_IN =
	      MUX_d_frontend_axi_cache_wr_req$write_1__VAL_1;
      WILL_FIRE_RL_d_frontend_axi_wr_set_line:
	  d_frontend_axi_cache_wr_req$D_IN =
	      MUX_d_frontend_axi_cache_wr_req$write_1__VAL_2;
      WILL_FIRE_RL_d_frontend_axi_wr_leftover_data:
	  d_frontend_axi_cache_wr_req$D_IN =
	      MUX_d_frontend_axi_cache_wr_req$write_1__VAL_3;
      default: d_frontend_axi_cache_wr_req$D_IN =
		   390'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign d_frontend_axi_cache_wr_req$EN =
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line ||
	     WILL_FIRE_RL_d_frontend_axi_wr_leftover_data ;

  // register d_frontend_axi_cnt_bits
  assign d_frontend_axi_cnt_bits$D_IN =
	     MUX_d_frontend_axi_cnt_bits$write_1__SEL_1 ?
	       MUX_d_frontend_axi_cnt_bits$write_1__VAL_1 :
	       13'd0 ;
  assign d_frontend_axi_cnt_bits$EN =
	     (WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data ||
	      WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data) &&
	     x__h433621 != 32'hFFFFFFFF ||
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_ready ;

  // register d_frontend_axi_cnt_req
  always@(MUX_d_frontend_axi_cnt_req$write_1__SEL_1 or
	  MUX_d_frontend_axi_cnt_req$write_1__VAL_1 or
	  MUX_d_frontend_axi_cnt_req$write_1__SEL_2 or
	  WILL_FIRE_RL_d_frontend_axi_rd_req_send or
	  MUX_d_frontend_axi_cnt_req$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_frontend_axi_cnt_req$write_1__SEL_1:
	  d_frontend_axi_cnt_req$D_IN =
	      MUX_d_frontend_axi_cnt_req$write_1__VAL_1;
      MUX_d_frontend_axi_cnt_req$write_1__SEL_2:
	  d_frontend_axi_cnt_req$D_IN =
	      MUX_d_frontend_axi_cnt_req$write_1__VAL_1;
      WILL_FIRE_RL_d_frontend_axi_rd_req_send:
	  d_frontend_axi_cnt_req$D_IN =
	      MUX_d_frontend_axi_cnt_req$write_1__VAL_1;
      MUX_d_frontend_axi_cnt_req$write_1__SEL_4:
	  d_frontend_axi_cnt_req$D_IN = 32'd0;
      default: d_frontend_axi_cnt_req$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign d_frontend_axi_cnt_req$EN =
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line &&
	     (x__h566502 == 32'hFFFFFFFF ||
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_wr_leftover_data &&
	     (x__h566502 == 32'hFFFFFFFF || d_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_rd_req_send ||
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ;

  // register d_frontend_axi_core_state
  always@(MUX_d_frontend_axi_cnt_req$write_1__SEL_1 or
	  WILL_FIRE_RL_d_frontend_axi_rd_req_send or
	  MUX_d_frontend_axi_core_state$write_1__VAL_2 or
	  WILL_FIRE_RL_d_frontend_axi_wr_leftover_data or
	  MUX_d_frontend_axi_core_state$write_1__VAL_3 or
	  WILL_FIRE_RL_d_frontend_axi_wr_rq_wait or
	  MUX_d_frontend_axi_core_state$write_1__VAL_4 or
	  WILL_FIRE_RL_d_frontend_axi_rd_get_req or
	  WILL_FIRE_RL_d_frontend_axi_wr_get_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_frontend_axi_cnt_req$write_1__SEL_1:
	  d_frontend_axi_core_state$D_IN = 3'd6;
      WILL_FIRE_RL_d_frontend_axi_rd_req_send:
	  d_frontend_axi_core_state$D_IN =
	      MUX_d_frontend_axi_core_state$write_1__VAL_2;
      WILL_FIRE_RL_d_frontend_axi_wr_leftover_data:
	  d_frontend_axi_core_state$D_IN =
	      MUX_d_frontend_axi_core_state$write_1__VAL_3;
      WILL_FIRE_RL_d_frontend_axi_wr_rq_wait:
	  d_frontend_axi_core_state$D_IN =
	      MUX_d_frontend_axi_core_state$write_1__VAL_4;
      WILL_FIRE_RL_d_frontend_axi_rd_get_req:
	  d_frontend_axi_core_state$D_IN = 3'd1;
      WILL_FIRE_RL_d_frontend_axi_wr_get_req:
	  d_frontend_axi_core_state$D_IN = 3'd4;
      default: d_frontend_axi_core_state$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign d_frontend_axi_core_state$EN =
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line &&
	     (x__h566502 == 32'hFFFFFFFF ||
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_rd_req_send ||
	     WILL_FIRE_RL_d_frontend_axi_wr_leftover_data ||
	     WILL_FIRE_RL_d_frontend_axi_wr_rq_wait ||
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ||
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ;

  // register d_frontend_axi_curr_info
  assign d_frontend_axi_curr_info$D_IN = d_frontend_axi_rd_req_fifo$D_OUT ;
  assign d_frontend_axi_curr_info$EN =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_ready ;

  // register d_frontend_axi_last_req
  always@(MUX_d_frontend_axi_cnt_req$write_1__SEL_1 or
	  d_frontend_axi_s_core_wr_in_data_rv$port1__read or
	  MUX_d_frontend_axi_cnt_req$write_1__SEL_2 or
	  d_frontend_axi_cache_wr_req or
	  MUX_d_frontend_axi_cnt_req$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_frontend_axi_cnt_req$write_1__SEL_1:
	  d_frontend_axi_last_req$D_IN =
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0];
      MUX_d_frontend_axi_cnt_req$write_1__SEL_2:
	  d_frontend_axi_last_req$D_IN = d_frontend_axi_cache_wr_req[33];
      MUX_d_frontend_axi_cnt_req$write_1__SEL_4:
	  d_frontend_axi_last_req$D_IN = 1'd0;
      default: d_frontend_axi_last_req$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign d_frontend_axi_last_req$EN =
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line &&
	     (x__h566502 == 32'hFFFFFFFF ||
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_wr_leftover_data &&
	     (x__h566502 == 32'hFFFFFFFF || d_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ;

  // register d_frontend_axi_rd_addr
  assign d_frontend_axi_rd_addr$D_IN =
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ?
	       d_frontend_axi_s_core_rd_in_rv$port1__read[60:29] :
	       MUX_d_frontend_axi_rd_addr$write_1__VAL_2 ;
  assign d_frontend_axi_rd_addr$EN =
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ||
	     WILL_FIRE_RL_d_frontend_axi_rd_req_send ;

  // register d_frontend_axi_rd_line
  assign d_frontend_axi_rd_line$D_IN = d_frontend_axi_rsp_fifo$D_OUT[256:1] ;
  assign d_frontend_axi_rd_line$EN =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data ;

  // register d_frontend_axi_s_core_rd_in_rv
  assign d_frontend_axi_s_core_rd_in_rv$D_IN =
	     d_frontend_axi_s_core_rd_in_rv$port2__read ;
  assign d_frontend_axi_s_core_rd_in_rv$EN = 1'b1 ;

  // register d_frontend_axi_s_core_rd_isRst_isInReset
  assign d_frontend_axi_s_core_rd_isRst_isInReset$D_IN = 1'd0 ;
  assign d_frontend_axi_s_core_rd_isRst_isInReset$EN =
	     d_frontend_axi_s_core_rd_isRst_isInReset ;

  // register d_frontend_axi_s_core_rd_out_rv
  assign d_frontend_axi_s_core_rd_out_rv$D_IN =
	     d_frontend_axi_s_core_rd_out_rv$port2__read ;
  assign d_frontend_axi_s_core_rd_out_rv$EN = 1'b1 ;

  // register d_frontend_axi_s_core_wr_in_addr_rv
  assign d_frontend_axi_s_core_wr_in_addr_rv$D_IN =
	     d_frontend_axi_s_core_wr_in_addr_rv$port2__read ;
  assign d_frontend_axi_s_core_wr_in_addr_rv$EN = 1'b1 ;

  // register d_frontend_axi_s_core_wr_in_data_rv
  assign d_frontend_axi_s_core_wr_in_data_rv$D_IN =
	     d_frontend_axi_s_core_wr_in_data_rv$port2__read ;
  assign d_frontend_axi_s_core_wr_in_data_rv$EN = 1'b1 ;

  // register d_frontend_axi_s_core_wr_isRst_isInReset
  assign d_frontend_axi_s_core_wr_isRst_isInReset$D_IN = 1'd0 ;
  assign d_frontend_axi_s_core_wr_isRst_isInReset$EN =
	     d_frontend_axi_s_core_wr_isRst_isInReset ;

  // register d_frontend_axi_s_core_wr_out_rv
  assign d_frontend_axi_s_core_wr_out_rv$D_IN =
	     d_frontend_axi_s_core_wr_out_rv$port2__read ;
  assign d_frontend_axi_s_core_wr_out_rv$EN = 1'b1 ;

  // register d_frontend_axi_total_req
  assign d_frontend_axi_total_req$D_IN =
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ?
	       MUX_d_frontend_axi_total_req$write_1__VAL_1 :
	       MUX_d_frontend_axi_total_req$write_1__VAL_2 ;
  assign d_frontend_axi_total_req$EN =
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ||
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ;

  // register d_frontend_axi_v_axi_data
  always@(WILL_FIRE_RL_d_frontend_axi_rd_axi_ready or
	  MUX_d_frontend_axi_v_axi_data$write_1__VAL_1 or
	  WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data or
	  MUX_d_frontend_axi_v_axi_data$write_1__VAL_2 or
	  WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data or
	  MUX_d_frontend_axi_v_axi_data$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_d_frontend_axi_rd_axi_ready:
	  d_frontend_axi_v_axi_data$D_IN =
	      MUX_d_frontend_axi_v_axi_data$write_1__VAL_1;
      WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data:
	  d_frontend_axi_v_axi_data$D_IN =
	      MUX_d_frontend_axi_v_axi_data$write_1__VAL_2;
      WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data:
	  d_frontend_axi_v_axi_data$D_IN =
	      MUX_d_frontend_axi_v_axi_data$write_1__VAL_3;
      default: d_frontend_axi_v_axi_data$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign d_frontend_axi_v_axi_data$EN =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_ready ||
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data ||
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_sending_data ;

  // register d_frontend_axi_wr_req
  always@(MUX_d_frontend_axi_cnt_req$write_1__SEL_1 or
	  MUX_d_frontend_axi_wr_req$write_1__VAL_1 or
	  MUX_d_frontend_axi_cnt_req$write_1__SEL_2 or
	  WILL_FIRE_RL_d_frontend_axi_wr_get_req or
	  d_frontend_axi_s_core_wr_in_addr_rv$port1__read)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_frontend_axi_cnt_req$write_1__SEL_1:
	  d_frontend_axi_wr_req$D_IN =
	      MUX_d_frontend_axi_wr_req$write_1__VAL_1;
      MUX_d_frontend_axi_cnt_req$write_1__SEL_2:
	  d_frontend_axi_wr_req$D_IN =
	      MUX_d_frontend_axi_wr_req$write_1__VAL_1;
      WILL_FIRE_RL_d_frontend_axi_wr_get_req:
	  d_frontend_axi_wr_req$D_IN =
	      d_frontend_axi_s_core_wr_in_addr_rv$port1__read[61:0];
      default: d_frontend_axi_wr_req$D_IN =
		   62'h2AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign d_frontend_axi_wr_req$EN =
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line &&
	     (x__h566502 == 32'hFFFFFFFF ||
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_wr_leftover_data &&
	     (x__h566502 == 32'hFFFFFFFF || d_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_wr_get_req ;

  // register i_backend_axi_cnt_burst
  assign i_backend_axi_cnt_burst$D_IN =
	     MUX_i_backend_axi_cnt_burst$write_1__SEL_1 ?
	       8'd0 :
	       MUX_i_backend_axi_cnt_burst$write_1__VAL_2 ;
  assign i_backend_axi_cnt_burst$EN =
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	     i_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_i_backend_axi_mem_send_data ;

  // register i_backend_axi_cnt_wr_rsp
  assign i_backend_axi_cnt_wr_rsp$D_IN =
	     MUX_i_backend_axi_cnt_burst$write_1__SEL_1 ?
	       8'd0 :
	       MUX_i_backend_axi_cnt_wr_rsp$write_1__VAL_2 ;
  assign i_backend_axi_cnt_wr_rsp$EN =
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	     i_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_i_backend_axi_mem_get_wr_rsp ;

  // register i_backend_axi_line_chunk
  assign i_backend_axi_line_chunk$D_IN =
	     MUX_i_backend_axi_line_chunk$write_1__SEL_1 ?
	       3'd0 :
	       MUX_i_backend_axi_line_chunk$write_1__VAL_2 ;
  assign i_backend_axi_line_chunk$EN =
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	     !i_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_i_backend_axi_mem_get_rd &&
	     !i_backend_axi_m_mem_rd_out_rv$port1__read[0] ;

  // register i_backend_axi_line_reg
  assign i_backend_axi_line_reg$D_IN =
	     MUX_i_backend_axi_line_chunk$write_1__SEL_1 ?
	       256'd0 :
	       IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1541 ;
  assign i_backend_axi_line_reg$EN =
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	     !i_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_i_backend_axi_mem_get_rd &&
	     !i_backend_axi_m_mem_rd_out_rv$port1__read[0] ;

  // register i_backend_axi_m_mem_rd_in_rv
  assign i_backend_axi_m_mem_rd_in_rv$D_IN =
	     i_backend_axi_m_mem_rd_in_rv$port2__read ;
  assign i_backend_axi_m_mem_rd_in_rv$EN = 1'b1 ;

  // register i_backend_axi_m_mem_rd_isRst_isInReset
  assign i_backend_axi_m_mem_rd_isRst_isInReset$D_IN = 1'd0 ;
  assign i_backend_axi_m_mem_rd_isRst_isInReset$EN =
	     i_backend_axi_m_mem_rd_isRst_isInReset ;

  // register i_backend_axi_m_mem_rd_out_rv
  assign i_backend_axi_m_mem_rd_out_rv$D_IN =
	     i_backend_axi_m_mem_rd_out_rv$port2__read ;
  assign i_backend_axi_m_mem_rd_out_rv$EN = 1'b1 ;

  // register i_backend_axi_m_mem_wr_in_addr_rv
  assign i_backend_axi_m_mem_wr_in_addr_rv$D_IN =
	     i_backend_axi_m_mem_wr_in_addr_rv$port2__read ;
  assign i_backend_axi_m_mem_wr_in_addr_rv$EN = 1'b1 ;

  // register i_backend_axi_m_mem_wr_in_data_rv
  assign i_backend_axi_m_mem_wr_in_data_rv$D_IN =
	     i_backend_axi_m_mem_wr_in_data_rv$port2__read ;
  assign i_backend_axi_m_mem_wr_in_data_rv$EN = 1'b1 ;

  // register i_backend_axi_m_mem_wr_isRst_isInReset
  assign i_backend_axi_m_mem_wr_isRst_isInReset$D_IN = 1'd0 ;
  assign i_backend_axi_m_mem_wr_isRst_isInReset$EN =
	     i_backend_axi_m_mem_wr_isRst_isInReset ;

  // register i_backend_axi_m_mem_wr_out_rv
  assign i_backend_axi_m_mem_wr_out_rv$D_IN =
	     i_backend_axi_m_mem_wr_out_rv$port2__read ;
  assign i_backend_axi_m_mem_wr_out_rv$EN = 1'b1 ;

  // register i_backend_axi_req_reg
  assign i_backend_axi_req_reg$D_IN = i_backend_axi_mem_req_fifo$D_OUT ;
  assign i_backend_axi_req_reg$EN = WILL_FIRE_RL_i_backend_axi_mem_req_rule ;

  // register i_backend_axi_state
  always@(WILL_FIRE_RL_i_backend_axi_mem_req_rule or
	  MUX_i_backend_axi_state$write_1__VAL_3 or
	  WILL_FIRE_RL_i_backend_axi_mem_send_data or
	  MUX_i_backend_axi_state$write_1__VAL_4 or
	  MUX_i_backend_axi_state$write_1__SEL_1 or
	  MUX_i_backend_axi_mem_rsp_fifo$enq_1__SEL_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_i_backend_axi_mem_req_rule:
	  i_backend_axi_state$D_IN = MUX_i_backend_axi_state$write_1__VAL_3;
      WILL_FIRE_RL_i_backend_axi_mem_send_data:
	  i_backend_axi_state$D_IN = MUX_i_backend_axi_state$write_1__VAL_4;
      MUX_i_backend_axi_state$write_1__SEL_1 ||
      MUX_i_backend_axi_mem_rsp_fifo$enq_1__SEL_1:
	  i_backend_axi_state$D_IN = 2'd0;
      default: i_backend_axi_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign i_backend_axi_state$EN =
	     i_backend_axi_state == 2'd3 && i_backend_axi_wr_rsp_complete ||
	     WILL_FIRE_RL_i_backend_axi_mem_get_rd &&
	     i_backend_axi_m_mem_rd_out_rv$port1__read[0] ||
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule ||
	     WILL_FIRE_RL_i_backend_axi_mem_send_data ;

  // register i_backend_axi_tot_burst
  assign i_backend_axi_tot_burst$D_IN = 8'd7 ;
  assign i_backend_axi_tot_burst$EN =
	     MUX_i_backend_axi_cnt_burst$write_1__SEL_1 ;

  // register i_backend_axi_wr_rsp_complete
  assign i_backend_axi_wr_rsp_complete$D_IN =
	     !MUX_i_backend_axi_cnt_burst$write_1__SEL_1 ;
  assign i_backend_axi_wr_rsp_complete$EN =
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	     i_backend_axi_mem_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_i_backend_axi_mem_get_wr_rsp &&
	     i_backend_axi_cnt_wr_rsp_584_EQ_i_backend_axi__ETC___d1586 ;

  // register i_cache_cache_mem_bram_serverAdapter_cnt
  assign i_cache_cache_mem_bram_serverAdapter_cnt$D_IN =
	     i_cache_cache_mem_bram_serverAdapter_cnt_74_PL_ETC___d780 ;
  assign i_cache_cache_mem_bram_serverAdapter_cnt$EN =
	     i_cache_cache_mem_bram_serverAdapter_cnt_1$whas ||
	     WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp ;

  // register i_cache_cache_mem_bram_serverAdapter_s1
  assign i_cache_cache_mem_bram_serverAdapter_s1$D_IN =
	     i_cache_cache_mem_bram_serverAdapter_writeWithResp$whas ?
	       i_cache_cache_mem_bram_serverAdapter_s1_1$wget :
	       2'd0 ;
  assign i_cache_cache_mem_bram_serverAdapter_s1$EN = 1'd1 ;

  // register i_cache_cache_mem_mem_req
  assign i_cache_cache_mem_mem_req$D_IN = i_cache_cache_mem_req_fifo$D_OUT ;
  assign i_cache_cache_mem_mem_req$EN =
	     WILL_FIRE_RL_i_cache_cache_mem_handle_req ;

  // register i_cache_cache_mem_prev_line
  assign i_cache_cache_mem_prev_line$D_IN =
	     i_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_mem_bram_serverAdapter_outData_ff$D_OUT :
	       i_cache_cache_mem_bram_memory$DO ;
  assign i_cache_cache_mem_prev_line$EN =
	     WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp &&
	     i_cache_cache_mem_mem_req[290] ;

  // register i_cache_cache_mem_state
  always@(WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp or
	  MUX_i_cache_cache_mem_state$write_1__VAL_1 or
	  WILL_FIRE_RL_i_cache_cache_mem_write_data_st or
	  WILL_FIRE_RL_i_cache_cache_mem_handle_req)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp:
	  i_cache_cache_mem_state$D_IN =
	      MUX_i_cache_cache_mem_state$write_1__VAL_1;
      WILL_FIRE_RL_i_cache_cache_mem_write_data_st:
	  i_cache_cache_mem_state$D_IN = 2'd0;
      WILL_FIRE_RL_i_cache_cache_mem_handle_req:
	  i_cache_cache_mem_state$D_IN = 2'd1;
      default: i_cache_cache_mem_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign i_cache_cache_mem_state$EN =
	     WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp ||
	     WILL_FIRE_RL_i_cache_cache_mem_write_data_st ||
	     WILL_FIRE_RL_i_cache_cache_mem_handle_req ;

  // register i_cache_rsp_cb_i
  assign i_cache_rsp_cb_i$D_IN =
	     (i_cache_rsp_cb_i == 4'd9) ? 4'd0 : i_cache_rsp_cb_i + 4'd1 ;
  assign i_cache_rsp_cb_i$EN = MUX_i_cache_rsp_cb_buff$upd_1__SEL_1 ;

  // register i_cache_rsp_cb_o
  assign i_cache_rsp_cb_o$D_IN =
	     (i_cache_rsp_cb_o == 4'd9) ? 4'd0 : i_cache_rsp_cb_o + 4'd1 ;
  assign i_cache_rsp_cb_o$EN =
	     CAN_FIRE_RL_i_cache_send_rsp && !WILL_FIRE_RL_i_cache_core_req ;

  // register i_cache_rsp_fifo_rv
  assign i_cache_rsp_fifo_rv$D_IN = i_cache_rsp_fifo_rv$port2__read ;
  assign i_cache_rsp_fifo_rv$EN = 1'b1 ;

  // register i_cache_state
  assign i_cache_state$D_IN =
	     MUX_i_cache_cache_mem_req_fifo$enq_1__SEL_1 ? 3'd1 : 3'd0 ;
  assign i_cache_state$EN =
	     WILL_FIRE_RL_i_cache_core_req && !i_cache_req_fifo$D_OUT[290] &&
	     i_cache_tag_array$D_OUT_1[22] &&
	     i_cache_tag_array_sub_i_cache_req_fifo_first___ETC___d1007 ||
	     WILL_FIRE_RL_i_cache_cache_mem_rsp && i_cache_state == 3'd1 &&
	     i_cache_hit_req_fifo$D_OUT ;

  // register i_cache_token_hit
  assign i_cache_token_hit$D_IN = i_cache_rsp_cb_i ;
  assign i_cache_token_hit$EN = MUX_i_cache_cache_mem_req_fifo$enq_1__SEL_1 ;

  // register i_frontend_axi_axi_state
  always@(MUX_i_frontend_axi_axi_state$write_1__SEL_1 or
	  MUX_i_frontend_axi_axi_state$write_1__VAL_1 or
	  MUX_i_frontend_axi_axi_state$write_1__SEL_2 or
	  MUX_i_frontend_axi_axi_state$write_1__VAL_2 or
	  MUX_i_frontend_axi_axi_state$write_1__SEL_3 or
	  WILL_FIRE_RL_i_frontend_axi_wr_get_req or
	  WILL_FIRE_RL_i_frontend_axi_rd_axi_ready)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_frontend_axi_axi_state$write_1__SEL_1:
	  i_frontend_axi_axi_state$D_IN =
	      MUX_i_frontend_axi_axi_state$write_1__VAL_1;
      MUX_i_frontend_axi_axi_state$write_1__SEL_2:
	  i_frontend_axi_axi_state$D_IN =
	      MUX_i_frontend_axi_axi_state$write_1__VAL_2;
      MUX_i_frontend_axi_axi_state$write_1__SEL_3:
	  i_frontend_axi_axi_state$D_IN = 2'd0;
      WILL_FIRE_RL_i_frontend_axi_wr_get_req:
	  i_frontend_axi_axi_state$D_IN = 2'd1;
      WILL_FIRE_RL_i_frontend_axi_rd_axi_ready:
	  i_frontend_axi_axi_state$D_IN = 2'd2;
      default: i_frontend_axi_axi_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign i_frontend_axi_axi_state$EN =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data &&
	     x__h128341 != 32'hFFFFFFFF &&
	     (i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 ||
	      IF_7_MINUS_0_CONCAT_i_frontend_axi_v_axi_data__ETC___d124) ||
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data &&
	     (x__h128341 == 32'hFFFFFFFF ||
	      i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 ||
	      !IF_7_MINUS_0_CONCAT_i_frontend_axi_v_axi_data__ETC___d124) ||
	     WILL_FIRE_RL_i_frontend_axi_wr_rq_wait &&
	     i_frontend_axi_cache_wr_req[37:34] == 4'd0 &&
	     i_frontend_axi_last_req ||
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_ready ;

  // register i_frontend_axi_cache_wr_req
  always@(WILL_FIRE_RL_i_frontend_axi_wr_get_req or
	  MUX_i_frontend_axi_cache_wr_req$write_1__VAL_1 or
	  WILL_FIRE_RL_i_frontend_axi_wr_set_line or
	  MUX_i_frontend_axi_cache_wr_req$write_1__VAL_2 or
	  WILL_FIRE_RL_i_frontend_axi_wr_leftover_data or
	  MUX_i_frontend_axi_cache_wr_req$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_i_frontend_axi_wr_get_req:
	  i_frontend_axi_cache_wr_req$D_IN =
	      MUX_i_frontend_axi_cache_wr_req$write_1__VAL_1;
      WILL_FIRE_RL_i_frontend_axi_wr_set_line:
	  i_frontend_axi_cache_wr_req$D_IN =
	      MUX_i_frontend_axi_cache_wr_req$write_1__VAL_2;
      WILL_FIRE_RL_i_frontend_axi_wr_leftover_data:
	  i_frontend_axi_cache_wr_req$D_IN =
	      MUX_i_frontend_axi_cache_wr_req$write_1__VAL_3;
      default: i_frontend_axi_cache_wr_req$D_IN =
		   390'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign i_frontend_axi_cache_wr_req$EN =
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line ||
	     WILL_FIRE_RL_i_frontend_axi_wr_leftover_data ;

  // register i_frontend_axi_cnt_bits
  assign i_frontend_axi_cnt_bits$D_IN =
	     MUX_i_frontend_axi_cnt_bits$write_1__SEL_1 ?
	       MUX_i_frontend_axi_cnt_bits$write_1__VAL_1 :
	       13'd0 ;
  assign i_frontend_axi_cnt_bits$EN =
	     (WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data ||
	      WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data) &&
	     x__h128341 != 32'hFFFFFFFF ||
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_ready ;

  // register i_frontend_axi_cnt_req
  always@(MUX_i_frontend_axi_cnt_req$write_1__SEL_1 or
	  MUX_i_frontend_axi_cnt_req$write_1__VAL_1 or
	  MUX_i_frontend_axi_cnt_req$write_1__SEL_2 or
	  WILL_FIRE_RL_i_frontend_axi_rd_req_send or
	  MUX_i_frontend_axi_cnt_req$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_frontend_axi_cnt_req$write_1__SEL_1:
	  i_frontend_axi_cnt_req$D_IN =
	      MUX_i_frontend_axi_cnt_req$write_1__VAL_1;
      MUX_i_frontend_axi_cnt_req$write_1__SEL_2:
	  i_frontend_axi_cnt_req$D_IN =
	      MUX_i_frontend_axi_cnt_req$write_1__VAL_1;
      WILL_FIRE_RL_i_frontend_axi_rd_req_send:
	  i_frontend_axi_cnt_req$D_IN =
	      MUX_i_frontend_axi_cnt_req$write_1__VAL_1;
      MUX_i_frontend_axi_cnt_req$write_1__SEL_4:
	  i_frontend_axi_cnt_req$D_IN = 32'd0;
      default: i_frontend_axi_cnt_req$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign i_frontend_axi_cnt_req$EN =
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line &&
	     (x__h261222 == 32'hFFFFFFFF ||
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_wr_leftover_data &&
	     (x__h261222 == 32'hFFFFFFFF || i_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_rd_req_send ||
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ;

  // register i_frontend_axi_core_state
  always@(MUX_i_frontend_axi_cnt_req$write_1__SEL_1 or
	  WILL_FIRE_RL_i_frontend_axi_rd_req_send or
	  MUX_i_frontend_axi_core_state$write_1__VAL_2 or
	  WILL_FIRE_RL_i_frontend_axi_wr_leftover_data or
	  MUX_i_frontend_axi_core_state$write_1__VAL_3 or
	  WILL_FIRE_RL_i_frontend_axi_wr_rq_wait or
	  MUX_i_frontend_axi_core_state$write_1__VAL_4 or
	  WILL_FIRE_RL_i_frontend_axi_rd_get_req or
	  WILL_FIRE_RL_i_frontend_axi_wr_get_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_frontend_axi_cnt_req$write_1__SEL_1:
	  i_frontend_axi_core_state$D_IN = 3'd6;
      WILL_FIRE_RL_i_frontend_axi_rd_req_send:
	  i_frontend_axi_core_state$D_IN =
	      MUX_i_frontend_axi_core_state$write_1__VAL_2;
      WILL_FIRE_RL_i_frontend_axi_wr_leftover_data:
	  i_frontend_axi_core_state$D_IN =
	      MUX_i_frontend_axi_core_state$write_1__VAL_3;
      WILL_FIRE_RL_i_frontend_axi_wr_rq_wait:
	  i_frontend_axi_core_state$D_IN =
	      MUX_i_frontend_axi_core_state$write_1__VAL_4;
      WILL_FIRE_RL_i_frontend_axi_rd_get_req:
	  i_frontend_axi_core_state$D_IN = 3'd1;
      WILL_FIRE_RL_i_frontend_axi_wr_get_req:
	  i_frontend_axi_core_state$D_IN = 3'd4;
      default: i_frontend_axi_core_state$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign i_frontend_axi_core_state$EN =
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line &&
	     (x__h261222 == 32'hFFFFFFFF ||
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_rd_req_send ||
	     WILL_FIRE_RL_i_frontend_axi_wr_leftover_data ||
	     WILL_FIRE_RL_i_frontend_axi_wr_rq_wait ||
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ||
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ;

  // register i_frontend_axi_curr_info
  assign i_frontend_axi_curr_info$D_IN = i_frontend_axi_rd_req_fifo$D_OUT ;
  assign i_frontend_axi_curr_info$EN =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_ready ;

  // register i_frontend_axi_last_req
  always@(MUX_i_frontend_axi_cnt_req$write_1__SEL_1 or
	  i_frontend_axi_s_core_wr_in_data_rv$port1__read or
	  MUX_i_frontend_axi_cnt_req$write_1__SEL_2 or
	  i_frontend_axi_cache_wr_req or
	  MUX_i_frontend_axi_cnt_req$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_frontend_axi_cnt_req$write_1__SEL_1:
	  i_frontend_axi_last_req$D_IN =
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0];
      MUX_i_frontend_axi_cnt_req$write_1__SEL_2:
	  i_frontend_axi_last_req$D_IN = i_frontend_axi_cache_wr_req[33];
      MUX_i_frontend_axi_cnt_req$write_1__SEL_4:
	  i_frontend_axi_last_req$D_IN = 1'd0;
      default: i_frontend_axi_last_req$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign i_frontend_axi_last_req$EN =
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line &&
	     (x__h261222 == 32'hFFFFFFFF ||
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_wr_leftover_data &&
	     (x__h261222 == 32'hFFFFFFFF || i_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ||
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ;

  // register i_frontend_axi_rd_addr
  assign i_frontend_axi_rd_addr$D_IN =
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ?
	       i_frontend_axi_s_core_rd_in_rv$port1__read[60:29] :
	       MUX_i_frontend_axi_rd_addr$write_1__VAL_2 ;
  assign i_frontend_axi_rd_addr$EN =
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ||
	     WILL_FIRE_RL_i_frontend_axi_rd_req_send ;

  // register i_frontend_axi_rd_line
  assign i_frontend_axi_rd_line$D_IN = i_frontend_axi_rsp_fifo$D_OUT[256:1] ;
  assign i_frontend_axi_rd_line$EN =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data ;

  // register i_frontend_axi_s_core_rd_in_rv
  assign i_frontend_axi_s_core_rd_in_rv$D_IN =
	     i_frontend_axi_s_core_rd_in_rv$port2__read ;
  assign i_frontend_axi_s_core_rd_in_rv$EN = 1'b1 ;

  // register i_frontend_axi_s_core_rd_isRst_isInReset
  assign i_frontend_axi_s_core_rd_isRst_isInReset$D_IN = 1'd0 ;
  assign i_frontend_axi_s_core_rd_isRst_isInReset$EN =
	     i_frontend_axi_s_core_rd_isRst_isInReset ;

  // register i_frontend_axi_s_core_rd_out_rv
  assign i_frontend_axi_s_core_rd_out_rv$D_IN =
	     i_frontend_axi_s_core_rd_out_rv$port2__read ;
  assign i_frontend_axi_s_core_rd_out_rv$EN = 1'b1 ;

  // register i_frontend_axi_s_core_wr_in_addr_rv
  assign i_frontend_axi_s_core_wr_in_addr_rv$D_IN =
	     i_frontend_axi_s_core_wr_in_addr_rv$port2__read ;
  assign i_frontend_axi_s_core_wr_in_addr_rv$EN = 1'b1 ;

  // register i_frontend_axi_s_core_wr_in_data_rv
  assign i_frontend_axi_s_core_wr_in_data_rv$D_IN =
	     i_frontend_axi_s_core_wr_in_data_rv$port2__read ;
  assign i_frontend_axi_s_core_wr_in_data_rv$EN = 1'b1 ;

  // register i_frontend_axi_s_core_wr_isRst_isInReset
  assign i_frontend_axi_s_core_wr_isRst_isInReset$D_IN = 1'd0 ;
  assign i_frontend_axi_s_core_wr_isRst_isInReset$EN =
	     i_frontend_axi_s_core_wr_isRst_isInReset ;

  // register i_frontend_axi_s_core_wr_out_rv
  assign i_frontend_axi_s_core_wr_out_rv$D_IN =
	     i_frontend_axi_s_core_wr_out_rv$port2__read ;
  assign i_frontend_axi_s_core_wr_out_rv$EN = 1'b1 ;

  // register i_frontend_axi_total_req
  assign i_frontend_axi_total_req$D_IN =
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ?
	       MUX_i_frontend_axi_total_req$write_1__VAL_1 :
	       MUX_i_frontend_axi_total_req$write_1__VAL_2 ;
  assign i_frontend_axi_total_req$EN =
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ||
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ;

  // register i_frontend_axi_v_axi_data
  always@(WILL_FIRE_RL_i_frontend_axi_rd_axi_ready or
	  MUX_i_frontend_axi_v_axi_data$write_1__VAL_1 or
	  WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data or
	  MUX_i_frontend_axi_v_axi_data$write_1__VAL_2 or
	  WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data or
	  MUX_i_frontend_axi_v_axi_data$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_i_frontend_axi_rd_axi_ready:
	  i_frontend_axi_v_axi_data$D_IN =
	      MUX_i_frontend_axi_v_axi_data$write_1__VAL_1;
      WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data:
	  i_frontend_axi_v_axi_data$D_IN =
	      MUX_i_frontend_axi_v_axi_data$write_1__VAL_2;
      WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data:
	  i_frontend_axi_v_axi_data$D_IN =
	      MUX_i_frontend_axi_v_axi_data$write_1__VAL_3;
      default: i_frontend_axi_v_axi_data$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign i_frontend_axi_v_axi_data$EN =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_ready ||
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data ||
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_sending_data ;

  // register i_frontend_axi_wr_req
  always@(MUX_i_frontend_axi_cnt_req$write_1__SEL_1 or
	  MUX_i_frontend_axi_wr_req$write_1__VAL_1 or
	  MUX_i_frontend_axi_cnt_req$write_1__SEL_2 or
	  WILL_FIRE_RL_i_frontend_axi_wr_get_req or
	  i_frontend_axi_s_core_wr_in_addr_rv$port1__read)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_frontend_axi_cnt_req$write_1__SEL_1:
	  i_frontend_axi_wr_req$D_IN =
	      MUX_i_frontend_axi_wr_req$write_1__VAL_1;
      MUX_i_frontend_axi_cnt_req$write_1__SEL_2:
	  i_frontend_axi_wr_req$D_IN =
	      MUX_i_frontend_axi_wr_req$write_1__VAL_1;
      WILL_FIRE_RL_i_frontend_axi_wr_get_req:
	  i_frontend_axi_wr_req$D_IN =
	      i_frontend_axi_s_core_wr_in_addr_rv$port1__read[61:0];
      default: i_frontend_axi_wr_req$D_IN =
		   62'h2AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign i_frontend_axi_wr_req$EN =
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line &&
	     (x__h261222 == 32'hFFFFFFFF ||
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_wr_leftover_data &&
	     (x__h261222 == 32'hFFFFFFFF || i_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_wr_get_req ;

  // submodule d_backend_axi_mem_req_fifo
  assign d_backend_axi_mem_req_fifo$D_IN = d_cache_mem_req_fifo$D_OUT ;
  assign d_backend_axi_mem_req_fifo$ENQ =
	     d_cache_mem_req_fifo$EMPTY_N &&
	     d_backend_axi_mem_req_fifo$FULL_N ;
  assign d_backend_axi_mem_req_fifo$DEQ =
	     WILL_FIRE_RL_d_backend_axi_mem_req_rule ;
  assign d_backend_axi_mem_req_fifo$CLR = 1'b0 ;

  // submodule d_backend_axi_mem_rsp_fifo
  assign d_backend_axi_mem_rsp_fifo$D_IN =
	     MUX_d_backend_axi_mem_rsp_fifo$enq_1__SEL_1 ?
	       MUX_d_backend_axi_mem_rsp_fifo$enq_1__VAL_1 :
	       d_backend_axi_req_reg[257:1] ;
  assign d_backend_axi_mem_rsp_fifo$ENQ =
	     WILL_FIRE_RL_d_backend_axi_mem_get_rd &&
	     d_backend_axi_m_mem_rd_out_rv$port1__read[0] ||
	     WILL_FIRE_RL_d_backend_axi_mem_get_wr_rsp &&
	     d_backend_axi_cnt_wr_rsp_744_EQ_d_backend_axi__ETC___d1746 ;
  assign d_backend_axi_mem_rsp_fifo$DEQ =
	     d_backend_axi_mem_rsp_fifo$EMPTY_N &&
	     d_cache_mem_rsp_fifo$FULL_N ;
  assign d_backend_axi_mem_rsp_fifo$CLR = 1'b0 ;

  // submodule d_cache_cache_mem_bram_memory
  assign d_cache_cache_mem_bram_memory$ADDR =
	     WILL_FIRE_RL_d_cache_cache_mem_handle_req ?
	       d_cache_cache_mem_req_fifo$D_OUT[300:296] :
	       d_cache_cache_mem_mem_req[300:296] ;
  assign d_cache_cache_mem_bram_memory$DI =
	     WILL_FIRE_RL_d_cache_cache_mem_handle_req ?
	       256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       MUX_d_cache_cache_mem_bram_memory$put_3__VAL_2 ;
  assign d_cache_cache_mem_bram_memory$WE =
	     !WILL_FIRE_RL_d_cache_cache_mem_handle_req ;
  assign d_cache_cache_mem_bram_memory$EN =
	     d_cache_cache_mem_bram_serverAdapter_writeWithResp$whas ;

  // submodule d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq
  assign d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$D_IN = 1'd1 ;
  assign d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$EN =
	     WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp ;

  // submodule d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq
  assign d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$D_IN = 1'd1 ;
  assign d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$EN =
	     d_cache_cache_mem_bram_serverAdapter_outData_enqw$whas ;

  // submodule d_cache_cache_mem_bram_serverAdapter_outData_ff
  assign d_cache_cache_mem_bram_serverAdapter_outData_ff$D_IN =
	     d_cache_cache_mem_bram_memory$DO ;
  assign d_cache_cache_mem_bram_serverAdapter_outData_ff$ENQ =
	     d_cache_cache_mem_bram_serverAdapter_outData_enqw$whas &&
	     (!WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp ||
	      d_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N) ;
  assign d_cache_cache_mem_bram_serverAdapter_outData_ff$DEQ =
	     WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp &&
	     d_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N ;
  assign d_cache_cache_mem_bram_serverAdapter_outData_ff$CLR = 1'b0 ;

  // submodule d_cache_cache_mem_req_fifo
  always@(MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_1 or
	  d_cache_req_fifo$D_OUT or
	  MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_2 or
	  MUX_d_cache_cache_mem_req_fifo$enq_1__VAL_2 or
	  WILL_FIRE_RL_d_cache_wait_fill_rsp or
	  MUX_d_cache_cache_mem_req_fifo$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_1:
	  d_cache_cache_mem_req_fifo$D_IN = d_cache_req_fifo$D_OUT;
      MUX_d_cache_cache_mem_req_fifo$enq_1__SEL_2:
	  d_cache_cache_mem_req_fifo$D_IN =
	      MUX_d_cache_cache_mem_req_fifo$enq_1__VAL_2;
      WILL_FIRE_RL_d_cache_wait_fill_rsp:
	  d_cache_cache_mem_req_fifo$D_IN =
	      MUX_d_cache_cache_mem_req_fifo$enq_1__VAL_3;
      default: d_cache_cache_mem_req_fifo$D_IN =
		   323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign d_cache_cache_mem_req_fifo$ENQ =
	     WILL_FIRE_RL_d_cache_core_req && d_cache_tag_array$D_OUT_1[22] &&
	     d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294 ||
	     WILL_FIRE_RL_d_cache_start_miss &&
	     d_cache_tag_array$D_OUT_1[22] &&
	     d_cache_dirty_array$D_OUT_1 != 8'd0 ||
	     WILL_FIRE_RL_d_cache_wait_fill_rsp ;
  assign d_cache_cache_mem_req_fifo$DEQ =
	     WILL_FIRE_RL_d_cache_cache_mem_handle_req ;
  assign d_cache_cache_mem_req_fifo$CLR = 1'b0 ;

  // submodule d_cache_cache_mem_rsp_fifo
  assign d_cache_cache_mem_rsp_fifo$D_IN =
	     MUX_d_cache_cache_mem_rsp_fifo$enq_1__SEL_1 ?
	       MUX_d_cache_cache_mem_rsp_fifo$enq_1__VAL_1 :
	       MUX_d_cache_cache_mem_rsp_fifo$enq_1__VAL_2 ;
  assign d_cache_cache_mem_rsp_fifo$ENQ =
	     WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp &&
	     !d_cache_cache_mem_mem_req[290] ||
	     WILL_FIRE_RL_d_cache_cache_mem_write_data_st ;
  assign d_cache_cache_mem_rsp_fifo$DEQ =
	     WILL_FIRE_RL_d_cache_cache_mem_rsp ||
	     WILL_FIRE_RL_d_cache_writeback_rsp ;
  assign d_cache_cache_mem_rsp_fifo$CLR = 1'b0 ;

  // submodule d_cache_dirty_array
  assign d_cache_dirty_array$ADDR_1 =
	     WILL_FIRE_RL_d_cache_core_req ?
	       d_cache_req_fifo$D_OUT[300:296] :
	       d_cache_miss_req[300:296] ;
  assign d_cache_dirty_array$ADDR_2 = 5'h0 ;
  assign d_cache_dirty_array$ADDR_3 = 5'h0 ;
  assign d_cache_dirty_array$ADDR_4 = 5'h0 ;
  assign d_cache_dirty_array$ADDR_5 = 5'h0 ;
  assign d_cache_dirty_array$ADDR_IN =
	     MUX_d_cache_dirty_array$upd_1__SEL_1 ?
	       d_cache_req_fifo$D_OUT[300:296] :
	       d_cache_miss_req[300:296] ;
  assign d_cache_dirty_array$D_IN =
	     MUX_d_cache_dirty_array$upd_1__SEL_1 ?
	       MUX_d_cache_dirty_array$upd_2__VAL_1 :
	       8'd0 ;
  assign d_cache_dirty_array$WE =
	     WILL_FIRE_RL_d_cache_core_req && d_cache_req_fifo$D_OUT[290] &&
	     d_cache_tag_array$D_OUT_1[22] &&
	     d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294 ||
	     WILL_FIRE_RL_d_cache_wait_fill_rsp ;

  // submodule d_cache_mem_req_fifo
  always@(MUX_d_cache_mem_req_fifo$enq_1__SEL_1 or
	  d_cache_req_fifo$D_OUT or
	  WILL_FIRE_RL_d_cache_writeback_rsp or
	  MUX_d_cache_mem_req_fifo$enq_1__VAL_2 or
	  WILL_FIRE_RL_d_cache_send_fill_req or
	  MUX_d_cache_mem_req_fifo$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_cache_mem_req_fifo$enq_1__SEL_1:
	  d_cache_mem_req_fifo$D_IN = d_cache_req_fifo$D_OUT;
      WILL_FIRE_RL_d_cache_writeback_rsp:
	  d_cache_mem_req_fifo$D_IN = MUX_d_cache_mem_req_fifo$enq_1__VAL_2;
      WILL_FIRE_RL_d_cache_send_fill_req:
	  d_cache_mem_req_fifo$D_IN = MUX_d_cache_mem_req_fifo$enq_1__VAL_3;
      default: d_cache_mem_req_fifo$D_IN =
		   323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign d_cache_mem_req_fifo$ENQ =
	     WILL_FIRE_RL_d_cache_core_req && d_cache_req_fifo$D_OUT[290] &&
	     (!d_cache_tag_array$D_OUT_1[22] ||
	      !d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294) ||
	     WILL_FIRE_RL_d_cache_writeback_rsp ||
	     WILL_FIRE_RL_d_cache_send_fill_req ;
  assign d_cache_mem_req_fifo$DEQ =
	     d_cache_mem_req_fifo$EMPTY_N &&
	     d_backend_axi_mem_req_fifo$FULL_N ;
  assign d_cache_mem_req_fifo$CLR = 1'b0 ;

  // submodule d_cache_mem_rsp_fifo
  assign d_cache_mem_rsp_fifo$D_IN = d_backend_axi_mem_rsp_fifo$D_OUT ;
  assign d_cache_mem_rsp_fifo$ENQ =
	     d_backend_axi_mem_rsp_fifo$EMPTY_N &&
	     d_cache_mem_rsp_fifo$FULL_N ;
  assign d_cache_mem_rsp_fifo$DEQ =
	     WILL_FIRE_RL_d_cache_wait_mem_rsp_ ||
	     WILL_FIRE_RL_d_cache_wait_fill_rsp ;
  assign d_cache_mem_rsp_fifo$CLR = 1'b0 ;

  // submodule d_cache_req_fifo
  assign d_cache_req_fifo$D_IN = d_frontend_axi_req_fifo$D_OUT ;
  assign d_cache_req_fifo$ENQ =
	     d_frontend_axi_req_fifo$EMPTY_N && d_cache_req_fifo$FULL_N ;
  assign d_cache_req_fifo$DEQ = WILL_FIRE_RL_d_cache_core_req ;
  assign d_cache_req_fifo$CLR = 1'b0 ;

  // submodule d_cache_rsp_fifo
  assign d_cache_rsp_fifo$D_IN =
	     MUX_d_cache_rsp_fifo$enq_1__SEL_1 ?
	       d_cache_mem_rsp_fifo$D_OUT :
	       d_cache_cache_mem_rsp_fifo$D_OUT ;
  assign d_cache_rsp_fifo$ENQ =
	     WILL_FIRE_RL_d_cache_wait_mem_rsp_ && d_cache_write_miss ||
	     WILL_FIRE_RL_d_cache_cache_mem_rsp ;
  assign d_cache_rsp_fifo$DEQ =
	     d_cache_rsp_fifo$EMPTY_N && d_frontend_axi_rsp_fifo$FULL_N ;
  assign d_cache_rsp_fifo$CLR = 1'b0 ;

  // submodule d_cache_tag_array
  assign d_cache_tag_array$ADDR_1 =
	     WILL_FIRE_RL_d_cache_core_req ?
	       d_cache_req_fifo$D_OUT[300:296] :
	       d_cache_miss_req[300:296] ;
  assign d_cache_tag_array$ADDR_2 = 5'h0 ;
  assign d_cache_tag_array$ADDR_3 = 5'h0 ;
  assign d_cache_tag_array$ADDR_4 = 5'h0 ;
  assign d_cache_tag_array$ADDR_5 = 5'h0 ;
  assign d_cache_tag_array$ADDR_IN = d_cache_miss_req[300:296] ;
  assign d_cache_tag_array$D_IN = { 1'd1, d_cache_miss_req[322:301] } ;
  assign d_cache_tag_array$WE = WILL_FIRE_RL_d_cache_wait_fill_rsp ;

  // submodule d_frontend_axi_rd_req_fifo
  assign d_frontend_axi_rd_req_fifo$D_IN =
	     { d_frontend_axi_s_core_rd_in_rv$port1__read[61],
	       x__h325118,
	       d_frontend_axi_s_core_rd_in_rv$port1__read[60:29] } ;
  assign d_frontend_axi_rd_req_fifo$ENQ =
	     WILL_FIRE_RL_d_frontend_axi_rd_get_req ;
  assign d_frontend_axi_rd_req_fifo$DEQ =
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_ready ;
  assign d_frontend_axi_rd_req_fifo$CLR = 1'b0 ;

  // submodule d_frontend_axi_req_fifo
  always@(MUX_d_frontend_axi_cnt_req$write_1__SEL_1 or
	  MUX_d_frontend_axi_req_fifo$enq_1__VAL_1 or
	  MUX_d_frontend_axi_cnt_req$write_1__SEL_2 or
	  MUX_d_frontend_axi_req_fifo$enq_1__VAL_2 or
	  WILL_FIRE_RL_d_frontend_axi_rd_req_send or
	  MUX_d_frontend_axi_req_fifo$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_frontend_axi_cnt_req$write_1__SEL_1:
	  d_frontend_axi_req_fifo$D_IN =
	      MUX_d_frontend_axi_req_fifo$enq_1__VAL_1;
      MUX_d_frontend_axi_cnt_req$write_1__SEL_2:
	  d_frontend_axi_req_fifo$D_IN =
	      MUX_d_frontend_axi_req_fifo$enq_1__VAL_2;
      WILL_FIRE_RL_d_frontend_axi_rd_req_send:
	  d_frontend_axi_req_fifo$D_IN =
	      MUX_d_frontend_axi_req_fifo$enq_1__VAL_3;
      default: d_frontend_axi_req_fifo$D_IN =
		   323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign d_frontend_axi_req_fifo$ENQ =
	     WILL_FIRE_RL_d_frontend_axi_wr_set_line &&
	     (x__h566502 == 32'hFFFFFFFF ||
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_wr_leftover_data &&
	     (x__h566502 == 32'hFFFFFFFF || d_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ||
	     WILL_FIRE_RL_d_frontend_axi_rd_req_send ;
  assign d_frontend_axi_req_fifo$DEQ =
	     d_frontend_axi_req_fifo$EMPTY_N && d_cache_req_fifo$FULL_N ;
  assign d_frontend_axi_req_fifo$CLR = 1'b0 ;

  // submodule d_frontend_axi_rsp_fifo
  assign d_frontend_axi_rsp_fifo$D_IN = d_cache_rsp_fifo$D_OUT ;
  assign d_frontend_axi_rsp_fifo$ENQ =
	     d_cache_rsp_fifo$EMPTY_N && d_frontend_axi_rsp_fifo$FULL_N ;
  assign d_frontend_axi_rsp_fifo$DEQ =
	     WILL_FIRE_RL_d_frontend_axi_wr_rq_wait ||
	     WILL_FIRE_RL_d_frontend_axi_rd_axi_wait_data ;
  assign d_frontend_axi_rsp_fifo$CLR = 1'b0 ;

  // submodule i_backend_axi_mem_req_fifo
  assign i_backend_axi_mem_req_fifo$D_IN = i_cache_mem_req_fifo$D_OUT ;
  assign i_backend_axi_mem_req_fifo$ENQ =
	     i_cache_mem_req_fifo$EMPTY_N &&
	     i_backend_axi_mem_req_fifo$FULL_N ;
  assign i_backend_axi_mem_req_fifo$DEQ =
	     WILL_FIRE_RL_i_backend_axi_mem_req_rule ;
  assign i_backend_axi_mem_req_fifo$CLR = 1'b0 ;

  // submodule i_backend_axi_mem_rsp_fifo
  assign i_backend_axi_mem_rsp_fifo$D_IN =
	     MUX_i_backend_axi_mem_rsp_fifo$enq_1__SEL_1 ?
	       MUX_i_backend_axi_mem_rsp_fifo$enq_1__VAL_1 :
	       i_backend_axi_req_reg[257:1] ;
  assign i_backend_axi_mem_rsp_fifo$ENQ =
	     WILL_FIRE_RL_i_backend_axi_mem_get_rd &&
	     i_backend_axi_m_mem_rd_out_rv$port1__read[0] ||
	     WILL_FIRE_RL_i_backend_axi_mem_get_wr_rsp &&
	     i_backend_axi_cnt_wr_rsp_584_EQ_i_backend_axi__ETC___d1586 ;
  assign i_backend_axi_mem_rsp_fifo$DEQ =
	     i_backend_axi_mem_rsp_fifo$EMPTY_N &&
	     i_cache_mem_rsp_fifo$FULL_N ;
  assign i_backend_axi_mem_rsp_fifo$CLR = 1'b0 ;

  // submodule i_cache_cache_mem_bram_memory
  assign i_cache_cache_mem_bram_memory$ADDR =
	     WILL_FIRE_RL_i_cache_cache_mem_handle_req ?
	       i_cache_cache_mem_req_fifo$D_OUT[300:296] :
	       i_cache_cache_mem_mem_req[300:296] ;
  assign i_cache_cache_mem_bram_memory$DI =
	     WILL_FIRE_RL_i_cache_cache_mem_handle_req ?
	       256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       MUX_i_cache_cache_mem_bram_memory$put_3__VAL_2 ;
  assign i_cache_cache_mem_bram_memory$WE =
	     !WILL_FIRE_RL_i_cache_cache_mem_handle_req ;
  assign i_cache_cache_mem_bram_memory$EN =
	     i_cache_cache_mem_bram_serverAdapter_writeWithResp$whas ;

  // submodule i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq
  assign i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$D_IN = 1'd1 ;
  assign i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$EN =
	     WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp ;

  // submodule i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq
  assign i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$D_IN = 1'd1 ;
  assign i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$EN =
	     i_cache_cache_mem_bram_serverAdapter_outData_enqw$whas ;

  // submodule i_cache_cache_mem_bram_serverAdapter_outData_ff
  assign i_cache_cache_mem_bram_serverAdapter_outData_ff$D_IN =
	     i_cache_cache_mem_bram_memory$DO ;
  assign i_cache_cache_mem_bram_serverAdapter_outData_ff$ENQ =
	     i_cache_cache_mem_bram_serverAdapter_outData_enqw$whas &&
	     (!WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp ||
	      i_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N) ;
  assign i_cache_cache_mem_bram_serverAdapter_outData_ff$DEQ =
	     WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp &&
	     i_cache_cache_mem_bram_serverAdapter_outData_ff$EMPTY_N ;
  assign i_cache_cache_mem_bram_serverAdapter_outData_ff$CLR = 1'b0 ;

  // submodule i_cache_cache_mem_req_fifo
  assign i_cache_cache_mem_req_fifo$D_IN =
	     MUX_i_cache_cache_mem_req_fifo$enq_1__SEL_1 ?
	       i_cache_req_fifo$D_OUT :
	       MUX_i_cache_cache_mem_req_fifo$enq_1__VAL_2 ;
  assign i_cache_cache_mem_req_fifo$ENQ =
	     WILL_FIRE_RL_i_cache_core_req && !i_cache_req_fifo$D_OUT[290] &&
	     i_cache_tag_array$D_OUT_1[22] &&
	     i_cache_tag_array_sub_i_cache_req_fifo_first___ETC___d1007 ||
	     WILL_FIRE_RL_i_cache_fill_rule ;
  assign i_cache_cache_mem_req_fifo$DEQ =
	     WILL_FIRE_RL_i_cache_cache_mem_handle_req ;
  assign i_cache_cache_mem_req_fifo$CLR = 1'b0 ;

  // submodule i_cache_cache_mem_rsp_fifo
  assign i_cache_cache_mem_rsp_fifo$D_IN =
	     MUX_i_cache_cache_mem_rsp_fifo$enq_1__SEL_1 ?
	       MUX_i_cache_cache_mem_rsp_fifo$enq_1__VAL_1 :
	       MUX_i_cache_cache_mem_rsp_fifo$enq_1__VAL_2 ;
  assign i_cache_cache_mem_rsp_fifo$ENQ =
	     WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp &&
	     !i_cache_cache_mem_mem_req[290] ||
	     WILL_FIRE_RL_i_cache_cache_mem_write_data_st ;
  assign i_cache_cache_mem_rsp_fifo$DEQ = WILL_FIRE_RL_i_cache_cache_mem_rsp ;
  assign i_cache_cache_mem_rsp_fifo$CLR = 1'b0 ;

  // submodule i_cache_hit_req_fifo
  assign i_cache_hit_req_fifo$D_IN =
	     MUX_i_cache_cache_mem_req_fifo$enq_1__SEL_1 ;
  assign i_cache_hit_req_fifo$ENQ =
	     WILL_FIRE_RL_i_cache_core_req && !i_cache_req_fifo$D_OUT[290] &&
	     i_cache_tag_array$D_OUT_1[22] &&
	     i_cache_tag_array_sub_i_cache_req_fifo_first___ETC___d1007 ||
	     WILL_FIRE_RL_i_cache_fill_rule ;
  assign i_cache_hit_req_fifo$DEQ = WILL_FIRE_RL_i_cache_cache_mem_rsp ;
  assign i_cache_hit_req_fifo$CLR = 1'b0 ;

  // submodule i_cache_mem_req_fifo
  assign i_cache_mem_req_fifo$D_IN =
	     { x_addr__h698385,
	       289'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFF,
	       i_cache_req_fifo$D_OUT[1],
	       1'd0 } ;
  assign i_cache_mem_req_fifo$ENQ =
	     WILL_FIRE_RL_i_cache_core_req && !i_cache_req_fifo$D_OUT[290] &&
	     (!i_cache_tag_array$D_OUT_1[22] ||
	      !i_cache_tag_array_sub_i_cache_req_fifo_first___ETC___d1007) ;
  assign i_cache_mem_req_fifo$DEQ =
	     i_cache_mem_req_fifo$EMPTY_N &&
	     i_backend_axi_mem_req_fifo$FULL_N ;
  assign i_cache_mem_req_fifo$CLR = 1'b0 ;

  // submodule i_cache_mem_rsp_fifo
  assign i_cache_mem_rsp_fifo$D_IN = i_backend_axi_mem_rsp_fifo$D_OUT ;
  assign i_cache_mem_rsp_fifo$ENQ =
	     i_backend_axi_mem_rsp_fifo$EMPTY_N &&
	     i_cache_mem_rsp_fifo$FULL_N ;
  assign i_cache_mem_rsp_fifo$DEQ = WILL_FIRE_RL_i_cache_fill_rule ;
  assign i_cache_mem_rsp_fifo$CLR = 1'b0 ;

  // submodule i_cache_miss_q
  assign i_cache_miss_q$D_IN = { i_cache_rsp_cb_i, i_cache_req_fifo$D_OUT } ;
  assign i_cache_miss_q$ENQ =
	     WILL_FIRE_RL_i_cache_core_req && !i_cache_req_fifo$D_OUT[290] &&
	     (!i_cache_tag_array$D_OUT_1[22] ||
	      !i_cache_tag_array_sub_i_cache_req_fifo_first___ETC___d1007) ;
  assign i_cache_miss_q$DEQ = WILL_FIRE_RL_i_cache_fill_rule ;
  assign i_cache_miss_q$CLR = 1'b0 ;

  // submodule i_cache_req_fifo
  assign i_cache_req_fifo$D_IN = i_frontend_axi_req_fifo$D_OUT ;
  assign i_cache_req_fifo$ENQ =
	     i_frontend_axi_req_fifo$EMPTY_N && i_cache_req_fifo$FULL_N ;
  assign i_cache_req_fifo$DEQ = WILL_FIRE_RL_i_cache_core_req ;
  assign i_cache_req_fifo$CLR = 1'b0 ;

  // submodule i_cache_rsp_cb_buff
  assign i_cache_rsp_cb_buff$ADDR_1 = i_cache_rsp_cb_o ;
  assign i_cache_rsp_cb_buff$ADDR_2 = 4'h0 ;
  assign i_cache_rsp_cb_buff$ADDR_3 = 4'h0 ;
  assign i_cache_rsp_cb_buff$ADDR_4 = 4'h0 ;
  assign i_cache_rsp_cb_buff$ADDR_5 = 4'h0 ;
  always@(MUX_i_cache_rsp_cb_buff$upd_1__SEL_1 or
	  i_cache_rsp_cb_i or
	  MUX_i_cache_rsp_cb_buff$upd_1__SEL_2 or
	  i_cache_token_hit or
	  WILL_FIRE_RL_i_cache_fill_rule or i_cache_miss_q$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_cache_rsp_cb_buff$upd_1__SEL_1:
	  i_cache_rsp_cb_buff$ADDR_IN = i_cache_rsp_cb_i;
      MUX_i_cache_rsp_cb_buff$upd_1__SEL_2:
	  i_cache_rsp_cb_buff$ADDR_IN = i_cache_token_hit;
      WILL_FIRE_RL_i_cache_fill_rule:
	  i_cache_rsp_cb_buff$ADDR_IN = i_cache_miss_q$D_OUT[326:323];
      default: i_cache_rsp_cb_buff$ADDR_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_i_cache_rsp_cb_buff$upd_1__SEL_1 or
	  MUX_i_cache_rsp_cb_buff$upd_1__SEL_2 or
	  MUX_i_cache_rsp_cb_buff$upd_2__VAL_2 or
	  WILL_FIRE_RL_i_cache_fill_rule or
	  MUX_i_cache_rsp_cb_buff$upd_2__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_cache_rsp_cb_buff$upd_1__SEL_1:
	  i_cache_rsp_cb_buff$D_IN =
	      258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      MUX_i_cache_rsp_cb_buff$upd_1__SEL_2:
	  i_cache_rsp_cb_buff$D_IN = MUX_i_cache_rsp_cb_buff$upd_2__VAL_2;
      WILL_FIRE_RL_i_cache_fill_rule:
	  i_cache_rsp_cb_buff$D_IN = MUX_i_cache_rsp_cb_buff$upd_2__VAL_3;
      default: i_cache_rsp_cb_buff$D_IN =
		   258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign i_cache_rsp_cb_buff$WE =
	     WILL_FIRE_RL_i_cache_core_req && !i_cache_req_fifo$D_OUT[290] ||
	     WILL_FIRE_RL_i_cache_cache_mem_rsp && i_cache_state == 3'd1 &&
	     i_cache_hit_req_fifo$D_OUT ||
	     WILL_FIRE_RL_i_cache_fill_rule ;

  // submodule i_cache_rsp_cb_n
  assign i_cache_rsp_cb_n$DATA_A = 5'd1 ;
  assign i_cache_rsp_cb_n$DATA_B = 5'd31 ;
  assign i_cache_rsp_cb_n$DATA_C = 5'h0 ;
  assign i_cache_rsp_cb_n$DATA_F = 5'h0 ;
  assign i_cache_rsp_cb_n$ADDA = MUX_i_cache_rsp_cb_buff$upd_1__SEL_1 ;
  assign i_cache_rsp_cb_n$ADDB =
	     CAN_FIRE_RL_i_cache_send_rsp && !WILL_FIRE_RL_i_cache_core_req ;
  assign i_cache_rsp_cb_n$SETC = 1'b0 ;
  assign i_cache_rsp_cb_n$SETF = 1'b0 ;

  // submodule i_cache_tag_array
  assign i_cache_tag_array$ADDR_1 = i_cache_req_fifo$D_OUT[300:296] ;
  assign i_cache_tag_array$ADDR_2 = 5'h0 ;
  assign i_cache_tag_array$ADDR_3 = 5'h0 ;
  assign i_cache_tag_array$ADDR_4 = 5'h0 ;
  assign i_cache_tag_array$ADDR_5 = 5'h0 ;
  assign i_cache_tag_array$ADDR_IN = i_cache_miss_q$D_OUT[300:296] ;
  assign i_cache_tag_array$D_IN = { 1'd1, i_cache_miss_q$D_OUT[322:301] } ;
  assign i_cache_tag_array$WE = WILL_FIRE_RL_i_cache_fill_rule ;

  // submodule i_frontend_axi_rd_req_fifo
  assign i_frontend_axi_rd_req_fifo$D_IN =
	     { i_frontend_axi_s_core_rd_in_rv$port1__read[61],
	       x__h19832,
	       i_frontend_axi_s_core_rd_in_rv$port1__read[60:29] } ;
  assign i_frontend_axi_rd_req_fifo$ENQ =
	     WILL_FIRE_RL_i_frontend_axi_rd_get_req ;
  assign i_frontend_axi_rd_req_fifo$DEQ =
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_ready ;
  assign i_frontend_axi_rd_req_fifo$CLR = 1'b0 ;

  // submodule i_frontend_axi_req_fifo
  always@(MUX_i_frontend_axi_cnt_req$write_1__SEL_1 or
	  MUX_i_frontend_axi_req_fifo$enq_1__VAL_1 or
	  MUX_i_frontend_axi_cnt_req$write_1__SEL_2 or
	  MUX_i_frontend_axi_req_fifo$enq_1__VAL_2 or
	  WILL_FIRE_RL_i_frontend_axi_rd_req_send or
	  MUX_i_frontend_axi_req_fifo$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_frontend_axi_cnt_req$write_1__SEL_1:
	  i_frontend_axi_req_fifo$D_IN =
	      MUX_i_frontend_axi_req_fifo$enq_1__VAL_1;
      MUX_i_frontend_axi_cnt_req$write_1__SEL_2:
	  i_frontend_axi_req_fifo$D_IN =
	      MUX_i_frontend_axi_req_fifo$enq_1__VAL_2;
      WILL_FIRE_RL_i_frontend_axi_rd_req_send:
	  i_frontend_axi_req_fifo$D_IN =
	      MUX_i_frontend_axi_req_fifo$enq_1__VAL_3;
      default: i_frontend_axi_req_fifo$D_IN =
		   323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign i_frontend_axi_req_fifo$ENQ =
	     WILL_FIRE_RL_i_frontend_axi_wr_set_line &&
	     (x__h261222 == 32'hFFFFFFFF ||
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_wr_leftover_data &&
	     (x__h261222 == 32'hFFFFFFFF || i_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ||
	     WILL_FIRE_RL_i_frontend_axi_rd_req_send ;
  assign i_frontend_axi_req_fifo$DEQ =
	     i_frontend_axi_req_fifo$EMPTY_N && i_cache_req_fifo$FULL_N ;
  assign i_frontend_axi_req_fifo$CLR = 1'b0 ;

  // submodule i_frontend_axi_rsp_fifo
  assign i_frontend_axi_rsp_fifo$D_IN =
	     i_cache_rsp_fifo_rv$port1__read[256:0] ;
  assign i_frontend_axi_rsp_fifo$ENQ =
	     i_cache_rsp_fifo_rv$port1__read[257] &&
	     i_frontend_axi_rsp_fifo$FULL_N ;
  assign i_frontend_axi_rsp_fifo$DEQ =
	     WILL_FIRE_RL_i_frontend_axi_wr_rq_wait ||
	     WILL_FIRE_RL_i_frontend_axi_rd_axi_wait_data ;
  assign i_frontend_axi_rsp_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_d_frontend_axi_cache_wr_req_96_BIT_ETC___d646 =
	     _0_CONCAT_d_frontend_axi_cache_wr_req_96_BITS_3_ETC___d614 ?
	       { CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q43,
		 CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q44,
		 CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q45,
		 CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q46,
		 CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q47,
		 CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q48,
		 CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q49 } :
	       224'd0 ;
  assign IF_0_CONCAT_d_frontend_axi_cache_wr_req_96_BIT_ETC___d726 =
	     _0_CONCAT_d_frontend_axi_cache_wr_req_96_BITS_3_ETC___d614 ?
	       { CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q19,
		 CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q20,
		 CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q21,
		 CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q22,
		 CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q23,
		 CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q24,
		 CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q25 } :
	       224'd0 ;
  assign IF_0_CONCAT_d_frontend_axi_v_axi_data_78_BITS__ETC___d520 =
	     _0_CONCAT_d_frontend_axi_v_axi_data_78_BITS_69__ETC___d509 ?
	       CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 :
	       32'd0 ;
  assign IF_0_CONCAT_d_frontend_axi_v_axi_data_78_BITS__ETC___d551 =
	     _0_CONCAT_d_frontend_axi_v_axi_data_78_BITS_69__ETC___d509 ?
	       CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 :
	       32'd0 ;
  assign IF_0_CONCAT_i_frontend_axi_cache_wr_req_19_BIT_ETC___d269 =
	     _0_CONCAT_i_frontend_axi_cache_wr_req_19_BITS_3_ETC___d237 ?
	       { CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q31,
		 CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q32,
		 CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q33,
		 CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q34,
		 CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q35,
		 CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q36,
		 CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q37 } :
	       224'd0 ;
  assign IF_0_CONCAT_i_frontend_axi_cache_wr_req_19_BIT_ETC___d349 =
	     _0_CONCAT_i_frontend_axi_cache_wr_req_19_BITS_3_ETC___d237 ?
	       { CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q7,
		 CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q8,
		 CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q9,
		 CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q10,
		 CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q11,
		 CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q12,
		 CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q13 } :
	       224'd0 ;
  assign IF_0_CONCAT_i_frontend_axi_v_axi_data_00_BITS__ETC___d142 =
	     _0_CONCAT_i_frontend_axi_v_axi_data_00_BITS_69__ETC___d131 ?
	       CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 :
	       32'd0 ;
  assign IF_0_CONCAT_i_frontend_axi_v_axi_data_00_BITS__ETC___d173 =
	     _0_CONCAT_i_frontend_axi_v_axi_data_00_BITS_69__ETC___d131 ?
	       CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 :
	       32'd0 ;
  assign IF_7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_re_ETC___d674 =
	     (x__h566502 == 32'hFFFFFFFF ||
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ?
	       256'd0 :
	       d_frontend_axi_cache_wr_req_96_BITS_357_TO_134_ETC___d653 ;
  assign IF_7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_re_ETC___d739 =
	     (x__h566502 == 32'hFFFFFFFF || d_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ?
	       256'd0 :
	       d_frontend_axi_cache_wr_req_96_BITS_357_TO_134_ETC___d732 ;
  assign IF_7_MINUS_0_CONCAT_d_frontend_axi_v_axi_data__ETC___d502 =
	     x__h456781[9:5] == d_frontend_axi_v_axi_data[74:70] ;
  assign IF_7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_re_ETC___d297 =
	     (x__h261222 == 32'hFFFFFFFF ||
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ?
	       256'd0 :
	       i_frontend_axi_cache_wr_req_19_BITS_357_TO_134_ETC___d276 ;
  assign IF_7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_re_ETC___d362 =
	     (x__h261222 == 32'hFFFFFFFF || i_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ?
	       256'd0 :
	       i_frontend_axi_cache_wr_req_19_BITS_357_TO_134_ETC___d355 ;
  assign IF_7_MINUS_0_CONCAT_i_frontend_axi_v_axi_data__ETC___d124 =
	     x__h151501[9:5] == i_frontend_axi_v_axi_data[74:70] ;
  assign IF_NOT_d_cache_req_fifo_first__287_BITS_13_TO__ETC___d1349 =
	     (d_cache_req_fifo$D_OUT[13:10] != 4'd0 ||
	      d_cache_dirty_array$D_OUT_1[2]) ?
	       result__h854797 :
	       IF_NOT_d_cache_req_fifo_first__287_BITS_9_TO_6_ETC___d1345 ;
  assign IF_NOT_d_cache_req_fifo_first__287_BITS_17_TO__ETC___d1353 =
	     (d_cache_req_fifo$D_OUT[17:14] != 4'd0 ||
	      d_cache_dirty_array$D_OUT_1[3]) ?
	       result__h854733 :
	       IF_NOT_d_cache_req_fifo_first__287_BITS_13_TO__ETC___d1349 ;
  assign IF_NOT_d_cache_req_fifo_first__287_BITS_21_TO__ETC___d1357 =
	     (d_cache_req_fifo$D_OUT[21:18] != 4'd0 ||
	      d_cache_dirty_array$D_OUT_1[4]) ?
	       result__h854669 :
	       IF_NOT_d_cache_req_fifo_first__287_BITS_17_TO__ETC___d1353 ;
  assign IF_NOT_d_cache_req_fifo_first__287_BITS_25_TO__ETC___d1361 =
	     (d_cache_req_fifo$D_OUT[25:22] != 4'd0 ||
	      d_cache_dirty_array$D_OUT_1[5]) ?
	       result__h854605 :
	       IF_NOT_d_cache_req_fifo_first__287_BITS_21_TO__ETC___d1357 ;
  assign IF_NOT_d_cache_req_fifo_first__287_BITS_29_TO__ETC___d1365 =
	     (d_cache_req_fifo$D_OUT[29:26] != 4'd0 ||
	      d_cache_dirty_array$D_OUT_1[6]) ?
	       result__h854541 :
	       IF_NOT_d_cache_req_fifo_first__287_BITS_25_TO__ETC___d1361 ;
  assign IF_NOT_d_cache_req_fifo_first__287_BITS_5_TO_2_ETC___d1341 =
	     (d_cache_req_fifo$D_OUT[5:2] != 4'd0 ||
	      d_cache_dirty_array$D_OUT_1[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_NOT_d_cache_req_fifo_first__287_BITS_9_TO_6_ETC___d1345 =
	     (d_cache_req_fifo$D_OUT[9:6] != 4'd0 ||
	      d_cache_dirty_array$D_OUT_1[1]) ?
	       result__h854861 :
	       IF_NOT_d_cache_req_fifo_first__287_BITS_5_TO_2_ETC___d1341 ;
  assign IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1687 =
	     { (d_backend_axi_line_chunk == 3'd7) ?
		 d_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 d_backend_axi_line_reg[255:224],
	       (d_backend_axi_line_chunk == 3'd6) ?
		 d_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 d_backend_axi_line_reg[223:192],
	       (d_backend_axi_line_chunk == 3'd5) ?
		 d_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 d_backend_axi_line_reg[191:160],
	       (d_backend_axi_line_chunk == 3'd4) ?
		 d_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 d_backend_axi_line_reg[159:128] } ;
  assign IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1694 =
	     { IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1687,
	       (d_backend_axi_line_chunk == 3'd3) ?
		 d_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 d_backend_axi_line_reg[127:96],
	       (d_backend_axi_line_chunk == 3'd2) ?
		 d_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 d_backend_axi_line_reg[95:64] } ;
  assign IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1701 =
	     { IF_d_backend_axi_line_chunk_671_EQ_7_672_THEN__ETC___d1694,
	       (d_backend_axi_line_chunk == 3'd1) ?
		 d_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 d_backend_axi_line_reg[63:32],
	       (d_backend_axi_line_chunk == 3'd0) ?
		 d_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 d_backend_axi_line_reg[31:0] } ;
  assign IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708 =
	     { d_frontend_axi_cache_wr_req[37] ?
		 d_frontend_axi_cache_wr_req[69:62] :
		 8'd0,
	       d_frontend_axi_cache_wr_req[36] ?
		 d_frontend_axi_cache_wr_req[61:54] :
		 8'd0,
	       d_frontend_axi_cache_wr_req[35] ?
		 d_frontend_axi_cache_wr_req[53:46] :
		 8'd0,
	       d_frontend_axi_cache_wr_req[34] ?
		 d_frontend_axi_cache_wr_req[45:38] :
		 8'd0 } ;
  assign IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628 =
	     { d_frontend_axi_s_core_wr_in_data_rv$port1__read[4] ?
		 d_frontend_axi_s_core_wr_in_data_rv$port1__read[36:29] :
		 8'd0,
	       d_frontend_axi_s_core_wr_in_data_rv$port1__read[3] ?
		 d_frontend_axi_s_core_wr_in_data_rv$port1__read[28:21] :
		 8'd0,
	       d_frontend_axi_s_core_wr_in_data_rv$port1__read[2] ?
		 d_frontend_axi_s_core_wr_in_data_rv$port1__read[20:13] :
		 8'd0,
	       d_frontend_axi_s_core_wr_in_data_rv$port1__read[1] ?
		 d_frontend_axi_s_core_wr_in_data_rv$port1__read[12:5] :
		 8'd0 } ;
  assign IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1527 =
	     { (i_backend_axi_line_chunk == 3'd7) ?
		 i_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 i_backend_axi_line_reg[255:224],
	       (i_backend_axi_line_chunk == 3'd6) ?
		 i_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 i_backend_axi_line_reg[223:192],
	       (i_backend_axi_line_chunk == 3'd5) ?
		 i_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 i_backend_axi_line_reg[191:160],
	       (i_backend_axi_line_chunk == 3'd4) ?
		 i_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 i_backend_axi_line_reg[159:128] } ;
  assign IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1534 =
	     { IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1527,
	       (i_backend_axi_line_chunk == 3'd3) ?
		 i_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 i_backend_axi_line_reg[127:96],
	       (i_backend_axi_line_chunk == 3'd2) ?
		 i_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 i_backend_axi_line_reg[95:64] } ;
  assign IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1541 =
	     { IF_i_backend_axi_line_chunk_511_EQ_7_512_THEN__ETC___d1534,
	       (i_backend_axi_line_chunk == 3'd1) ?
		 i_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 i_backend_axi_line_reg[63:32],
	       (i_backend_axi_line_chunk == 3'd0) ?
		 i_backend_axi_m_mem_rd_out_rv$port1__read[34:3] :
		 i_backend_axi_line_reg[31:0] } ;
  assign IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331 =
	     { i_frontend_axi_cache_wr_req[37] ?
		 i_frontend_axi_cache_wr_req[69:62] :
		 8'd0,
	       i_frontend_axi_cache_wr_req[36] ?
		 i_frontend_axi_cache_wr_req[61:54] :
		 8'd0,
	       i_frontend_axi_cache_wr_req[35] ?
		 i_frontend_axi_cache_wr_req[53:46] :
		 8'd0,
	       i_frontend_axi_cache_wr_req[34] ?
		 i_frontend_axi_cache_wr_req[45:38] :
		 8'd0 } ;
  assign IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251 =
	     { i_frontend_axi_s_core_wr_in_data_rv$port1__read[4] ?
		 i_frontend_axi_s_core_wr_in_data_rv$port1__read[36:29] :
		 8'd0,
	       i_frontend_axi_s_core_wr_in_data_rv$port1__read[3] ?
		 i_frontend_axi_s_core_wr_in_data_rv$port1__read[28:21] :
		 8'd0,
	       i_frontend_axi_s_core_wr_in_data_rv$port1__read[2] ?
		 i_frontend_axi_s_core_wr_in_data_rv$port1__read[20:13] :
		 8'd0,
	       i_frontend_axi_s_core_wr_in_data_rv$port1__read[1] ?
		 i_frontend_axi_s_core_wr_in_data_rv$port1__read[12:5] :
		 8'd0 } ;
  assign _0_CONCAT_d_frontend_axi_cache_wr_req_96_BITS_3_ETC___d614 =
	     init_chunk_line__h566478 <= 32'd8 ;
  assign _0_CONCAT_d_frontend_axi_s_core_rd_in_rvport1__ETC__q39 =
	     { 5'd0, d_frontend_axi_s_core_rd_in_rv$port1__read[28:21] } +
	     13'd1 ;
  assign _0_CONCAT_d_frontend_axi_s_core_wr_in_addr_rvp_ETC__q41 =
	     { 5'd0,
	       d_frontend_axi_s_core_wr_in_addr_rv$port1__read[28:21] } +
	     13'd1 ;
  assign _0_CONCAT_d_frontend_axi_v_axi_data_78_BITS_69__ETC___d509 =
	     init_chunk_line__h433599 <= 32'd8 ;
  assign _0_CONCAT_i_frontend_axi_cache_wr_req_19_BITS_3_ETC___d237 =
	     init_chunk_line__h261198 <= 32'd8 ;
  assign _0_CONCAT_i_frontend_axi_s_core_rd_in_rvport1__ETC__q27 =
	     { 5'd0, i_frontend_axi_s_core_rd_in_rv$port1__read[28:21] } +
	     13'd1 ;
  assign _0_CONCAT_i_frontend_axi_s_core_wr_in_addr_rvp_ETC__q29 =
	     { 5'd0,
	       i_frontend_axi_s_core_wr_in_addr_rv$port1__read[28:21] } +
	     13'd1 ;
  assign _0_CONCAT_i_frontend_axi_v_axi_data_00_BITS_69__ETC___d131 =
	     init_chunk_line__h128319 <= 32'd8 ;
  assign _1_MINUS_d_frontend_axi_v_axi_data_BITS_32_TO_1__q2 =
	     32'd1 - d_frontend_axi_v_axi_data[32:1] ;
  assign _1_MINUS_i_frontend_axi_v_axi_data_BITS_32_TO_1__q1 =
	     32'd1 - i_frontend_axi_v_axi_data[32:1] ;
  assign _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608 =
	     available_chunks__h566479 == new_words__h506316 ;
  assign _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231 =
	     available_chunks__h261199 == new_words__h201036 ;
  assign addr__h904337 = { x__h904361, 5'd0 } ;
  assign available_chunks__h128320 = x__h128341 + 32'd1 ;
  assign available_chunks__h261199 = x__h261222 + 32'd1 ;
  assign available_chunks__h433600 = x__h433621 + 32'd1 ;
  assign available_chunks__h566479 = x__h566502 + 32'd1 ;
  assign axi_rsp_data__h102187 =
	     i_frontend_axi_v_axi_data[64:33] |
	     (i_frontend_axi_v_axi_data_00_BITS_32_TO_1_16_U_ETC___d130 ?
		CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q4 :
		32'd0) ;
  assign axi_rsp_data__h144280 =
	     i_frontend_axi_v_axi_data[64:33] |
	     (i_frontend_axi_v_axi_data_00_BITS_32_TO_1_16_U_ETC___d130 ?
		CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q6 :
		32'd0) ;
  assign axi_rsp_data__h407470 =
	     d_frontend_axi_v_axi_data[64:33] |
	     (d_frontend_axi_v_axi_data_78_BITS_32_TO_1_94_U_ETC___d508 ?
		CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q16 :
		32'd0) ;
  assign axi_rsp_data__h449560 =
	     d_frontend_axi_v_axi_data[64:33] |
	     (d_frontend_axi_v_axi_data_78_BITS_32_TO_1_94_U_ETC___d508 ?
		CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q18 :
		32'd0) ;
  assign core_r_addr__h216971 = { i_frontend_axi_wr_req[60:34], 5'd0 } ;
  assign core_r_addr__h522251 = { d_frontend_axi_wr_req[60:34], 5'd0 } ;
  assign d_backend_axi_cnt_burst_721_EQ_d_backend_axi_t_ETC___d1734 =
	     d_backend_axi_cnt_burst == d_backend_axi_tot_burst ;
  assign d_backend_axi_cnt_wr_rsp_744_EQ_d_backend_axi__ETC___d1746 =
	     d_backend_axi_cnt_wr_rsp == d_backend_axi_tot_burst ;
  assign d_cache_cache_mem_bram_serverAdapter_cnt_075_P_ETC___d1081 =
	     d_cache_cache_mem_bram_serverAdapter_cnt +
	     (d_cache_cache_mem_bram_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_d_cache_cache_mem_get_rd_rsp ? 3'd7 : 3'd0) ;
  assign d_cache_cache_mem_bram_serverAdapter_cnt_075_S_ETC___d1108 =
	     (d_cache_cache_mem_bram_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign d_cache_tag_array_sub_d_cache_req_fifo_first___ETC___d1294 =
	     d_cache_tag_array$D_OUT_1[21:0] ==
	     d_cache_req_fifo$D_OUT[322:301] ;
  assign d_frontend_axi_cache_wr_req_96_BITS_133_TO_102_ETC___d652 =
	     d_frontend_axi_cache_wr_req[133:102] |
	     (_0_CONCAT_d_frontend_axi_cache_wr_req_96_BITS_3_ETC___d614 ?
		CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q50 :
		32'd0) ;
  assign d_frontend_axi_cache_wr_req_96_BITS_133_TO_102_ETC___d731 =
	     d_frontend_axi_cache_wr_req[133:102] |
	     (_0_CONCAT_d_frontend_axi_cache_wr_req_96_BITS_3_ETC___d614 ?
		CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q26 :
		32'd0) ;
  assign d_frontend_axi_cache_wr_req_96_BITS_357_TO_134_ETC___d653 =
	     { d_frontend_axi_cache_wr_req[357:134] |
	       IF_0_CONCAT_d_frontend_axi_cache_wr_req_96_BIT_ETC___d646,
	       d_frontend_axi_cache_wr_req_96_BITS_133_TO_102_ETC___d652 } ;
  assign d_frontend_axi_cache_wr_req_96_BITS_357_TO_134_ETC___d732 =
	     { d_frontend_axi_cache_wr_req[357:134] |
	       IF_0_CONCAT_d_frontend_axi_cache_wr_req_96_BIT_ETC___d726,
	       d_frontend_axi_cache_wr_req_96_BITS_133_TO_102_ETC___d731 } ;
  assign d_frontend_axi_cnt_bits_84_PLUS_32_85_EQ_d_fro_ETC___d488 =
	     d_frontend_axi_cnt_bits + 13'd32 ==
	     d_frontend_axi_curr_info[44:32] ;
  assign d_frontend_axi_v_axi_data_78_BITS_32_TO_1_94_U_ETC___d508 =
	     d_frontend_axi_v_axi_data[32:1] <= 32'd1 ;
  assign i_backend_axi_cnt_burst_561_EQ_i_backend_axi_t_ETC___d1574 =
	     i_backend_axi_cnt_burst == i_backend_axi_tot_burst ;
  assign i_backend_axi_cnt_wr_rsp_584_EQ_i_backend_axi__ETC___d1586 =
	     i_backend_axi_cnt_wr_rsp == i_backend_axi_tot_burst ;
  assign i_cache_cache_mem_bram_serverAdapter_cnt_74_PL_ETC___d780 =
	     i_cache_cache_mem_bram_serverAdapter_cnt +
	     (i_cache_cache_mem_bram_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_i_cache_cache_mem_get_rd_rsp ? 3'd7 : 3'd0) ;
  assign i_cache_cache_mem_bram_serverAdapter_cnt_74_SLT_3___d808 =
	     (i_cache_cache_mem_bram_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign i_cache_rsp_cb_n_value__80_ULE_9_81_AND_i_cach_ETC___d989 =
	     i_cache_rsp_cb_n$Q_OUT <= 5'd9 &&
	     i_cache_cache_mem_req_fifo$FULL_N &&
	     i_cache_hit_req_fifo$FULL_N &&
	     i_cache_miss_q$FULL_N &&
	     i_cache_mem_req_fifo$FULL_N ;
  assign i_cache_tag_array_sub_i_cache_req_fifo_first___ETC___d1007 =
	     i_cache_tag_array$D_OUT_1[21:0] ==
	     i_cache_req_fifo$D_OUT[322:301] ;
  assign i_frontend_axi_cache_wr_req_19_BITS_133_TO_102_ETC___d275 =
	     i_frontend_axi_cache_wr_req[133:102] |
	     (_0_CONCAT_i_frontend_axi_cache_wr_req_19_BITS_3_ETC___d237 ?
		CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q38 :
		32'd0) ;
  assign i_frontend_axi_cache_wr_req_19_BITS_133_TO_102_ETC___d354 =
	     i_frontend_axi_cache_wr_req[133:102] |
	     (_0_CONCAT_i_frontend_axi_cache_wr_req_19_BITS_3_ETC___d237 ?
		CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q14 :
		32'd0) ;
  assign i_frontend_axi_cache_wr_req_19_BITS_357_TO_134_ETC___d276 =
	     { i_frontend_axi_cache_wr_req[357:134] |
	       IF_0_CONCAT_i_frontend_axi_cache_wr_req_19_BIT_ETC___d269,
	       i_frontend_axi_cache_wr_req_19_BITS_133_TO_102_ETC___d275 } ;
  assign i_frontend_axi_cache_wr_req_19_BITS_357_TO_134_ETC___d355 =
	     { i_frontend_axi_cache_wr_req[357:134] |
	       IF_0_CONCAT_i_frontend_axi_cache_wr_req_19_BIT_ETC___d349,
	       i_frontend_axi_cache_wr_req_19_BITS_133_TO_102_ETC___d354 } ;
  assign i_frontend_axi_cnt_bits_06_PLUS_32_07_EQ_i_fro_ETC___d110 =
	     i_frontend_axi_cnt_bits + 13'd32 ==
	     i_frontend_axi_curr_info[44:32] ;
  assign i_frontend_axi_v_axi_data_00_BITS_32_TO_1_16_U_ETC___d130 =
	     i_frontend_axi_v_axi_data[32:1] <= 32'd1 ;
  assign init_chunk_line__h128319 =
	     { 29'd0, i_frontend_axi_v_axi_data[69:67] } ;
  assign init_chunk_line__h261198 =
	     { 29'd0, i_frontend_axi_cache_wr_req[362:360] } ;
  assign init_chunk_line__h433599 =
	     { 29'd0, d_frontend_axi_v_axi_data[69:67] } ;
  assign init_chunk_line__h566478 =
	     { 29'd0, d_frontend_axi_cache_wr_req[362:360] } ;
  assign new_words__h201036 =
	     (i_frontend_axi_cache_wr_req[32:1] == 32'd0) ?
	       32'd1 :
	       x__h201098 + 32'd1 ;
  assign new_words__h506316 =
	     (d_frontend_axi_cache_wr_req[32:1] == 32'd0) ?
	       32'd1 :
	       x__h506378 + 32'd1 ;
  assign r_addr__h953774 = { d_cache_miss_req[322:296], 5'd0 } ;
  assign res___1_addr__h102279 =
	     i_frontend_axi_v_axi_data[96:65] + y__h102305 ;
  assign res___1_addr__h217367 =
	     i_frontend_axi_cache_wr_req[389:358] + y__h228400 ;
  assign res___1_addr__h407559 =
	     d_frontend_axi_v_axi_data[96:65] + y__h407585 ;
  assign res___1_addr__h522647 =
	     d_frontend_axi_cache_wr_req[389:358] + y__h533680 ;
  assign res___1_strb__h217369 =
	     i_frontend_axi_cache_wr_req[101:70] | y__h228007 ;
  assign res___1_strb__h277574 =
	     i_frontend_axi_cache_wr_req[101:70] | y__h287870 ;
  assign res___1_strb__h522649 =
	     d_frontend_axi_cache_wr_req[101:70] | y__h533287 ;
  assign res___1_strb__h582854 =
	     d_frontend_axi_cache_wr_req[101:70] | y__h593150 ;
  assign res_addr__h144386 = i_frontend_axi_v_axi_data[96:65] + y__h144411 ;
  assign res_addr__h277601 =
	     i_frontend_axi_cache_wr_req[389:358] + y__h288317 ;
  assign res_addr__h449666 = d_frontend_axi_v_axi_data[96:65] + y__h449691 ;
  assign res_addr__h582881 =
	     d_frontend_axi_cache_wr_req[389:358] + y__h593597 ;
  assign res_axi_data__h217399 =
	     i_frontend_axi_s_core_wr_in_data_rv$port1__read[36:5] >>
	     x__h289337 ;
  assign res_axi_data__h277604 =
	     i_frontend_axi_cache_wr_req[69:38] >> x__h289337 ;
  assign res_axi_data__h522679 =
	     d_frontend_axi_s_core_wr_in_data_rv$port1__read[36:5] >>
	     x__h594617 ;
  assign res_axi_data__h582884 =
	     d_frontend_axi_cache_wr_req[69:38] >> x__h594617 ;
  assign res_axi_strb__h217400 =
	     i_frontend_axi_s_core_wr_in_data_rv$port1__read[4:1] >>
	     y__h288317 ;
  assign res_axi_strb__h277605 =
	     i_frontend_axi_cache_wr_req[37:34] >> y__h288317 ;
  assign res_axi_strb__h522680 =
	     d_frontend_axi_s_core_wr_in_data_rv$port1__read[4:1] >>
	     y__h593597 ;
  assign res_axi_strb__h582885 =
	     d_frontend_axi_cache_wr_req[37:34] >> y__h593597 ;
  assign res_axi_word_chunk__h144388 =
	     i_frontend_axi_v_axi_data[32:1] + available_chunks__h128320 ;
  assign res_axi_word_chunk__h449668 =
	     d_frontend_axi_v_axi_data[32:1] + available_chunks__h433600 ;
  assign result__h854477 =
	     { 1'd1,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_29_TO__ETC___d1365[6:0] } ;
  assign result__h854541 =
	     { IF_NOT_d_cache_req_fifo_first__287_BITS_25_TO__ETC___d1361[7],
	       1'd1,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_25_TO__ETC___d1361[5:0] } ;
  assign result__h854605 =
	     { IF_NOT_d_cache_req_fifo_first__287_BITS_21_TO__ETC___d1357[7:6],
	       1'd1,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_21_TO__ETC___d1357[4:0] } ;
  assign result__h854669 =
	     { IF_NOT_d_cache_req_fifo_first__287_BITS_17_TO__ETC___d1353[7:5],
	       1'd1,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_17_TO__ETC___d1353[3:0] } ;
  assign result__h854733 =
	     { IF_NOT_d_cache_req_fifo_first__287_BITS_13_TO__ETC___d1349[7:4],
	       1'd1,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_13_TO__ETC___d1349[2:0] } ;
  assign result__h854797 =
	     { IF_NOT_d_cache_req_fifo_first__287_BITS_9_TO_6_ETC___d1345[7:3],
	       1'd1,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_9_TO_6_ETC___d1345[1:0] } ;
  assign result__h854861 =
	     { IF_NOT_d_cache_req_fifo_first__287_BITS_5_TO_2_ETC___d1341[7:2],
	       1'd1,
	       IF_NOT_d_cache_req_fifo_first__287_BITS_5_TO_2_ETC___d1341[0] } ;
  assign x1_avValue_axi_data__h228362 =
	     (x__h261222 == 32'hFFFFFFFF) ? res_axi_data__h217399 : 32'd0 ;
  assign x1_avValue_axi_data__h288258 =
	     (x__h261222 == 32'hFFFFFFFF) ? res_axi_data__h277604 : 32'd0 ;
  assign x1_avValue_axi_data__h533642 =
	     (x__h566502 == 32'hFFFFFFFF) ? res_axi_data__h522679 : 32'd0 ;
  assign x1_avValue_axi_data__h593538 =
	     (x__h566502 == 32'hFFFFFFFF) ? res_axi_data__h582884 : 32'd0 ;
  assign x1_avValue_axi_strb__h228363 =
	     (x__h261222 == 32'hFFFFFFFF) ? res_axi_strb__h217400 : 4'd0 ;
  assign x1_avValue_axi_strb__h288259 =
	     (x__h261222 == 32'hFFFFFFFF) ? res_axi_strb__h277605 : 4'd0 ;
  assign x1_avValue_axi_strb__h533643 =
	     (x__h566502 == 32'hFFFFFFFF) ? res_axi_strb__h522680 : 4'd0 ;
  assign x1_avValue_axi_strb__h593539 =
	     (x__h566502 == 32'hFFFFFFFF) ? res_axi_strb__h582885 : 4'd0 ;
  assign x1_avValue_strb__h228361 =
	     (x__h261222 == 32'hFFFFFFFF ||
	      i_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ?
	       32'd0 :
	       res___1_strb__h217369 ;
  assign x1_avValue_strb__h288257 =
	     (x__h261222 == 32'hFFFFFFFF || i_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_i_frontend_axi_cache_wr_req_1_ETC___d231) ?
	       32'd0 :
	       res___1_strb__h277574 ;
  assign x1_avValue_strb__h533641 =
	     (x__h566502 == 32'hFFFFFFFF ||
	      d_frontend_axi_s_core_wr_in_data_rv$port1__read[0] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ?
	       32'd0 :
	       res___1_strb__h522649 ;
  assign x1_avValue_strb__h593537 =
	     (x__h566502 == 32'hFFFFFFFF || d_frontend_axi_cache_wr_req[33] ||
	      _7_MINUS_0_CONCAT_d_frontend_axi_cache_wr_req_9_ETC___d608) ?
	       32'd0 :
	       res___1_strb__h582854 ;
  assign x25104_MINUS_1__q40 = x__h325104 - 32'd1 ;
  assign x68865_MINUS_1__q30 = x__h168865 - 32'd1 ;
  assign x74145_MINUS_1__q42 = x__h474145 - 32'd1 ;
  assign x9818_MINUS_1__q28 = x__h19818 - 32'd1 ;
  assign x__h128341 = 32'd7 - init_chunk_line__h128319 ;
  assign x__h151501 =
	     (x__h128341 == 32'hFFFFFFFF) ?
	       res_addr__h144386 :
	       res___1_addr__h102279 ;
  assign x__h151661 =
	     (x__h128341 == 32'hFFFFFFFF) ?
	       res_axi_word_chunk__h144388 :
	       32'd0 ;
  assign x__h168844 =
	     x68865_MINUS_1__q30[9:5] -
	     i_frontend_axi_s_core_wr_in_addr_rv$port1__read[38:34] ;
  assign x__h168865 =
	     i_frontend_axi_s_core_wr_in_addr_rv$port1__read[60:29] +
	     y__h168868 ;
  assign x__h168871 =
	     { _0_CONCAT_i_frontend_axi_s_core_wr_in_addr_rvp_ETC__q29[7:0],
	       5'd0 } ;
  assign x__h19797 =
	     x9818_MINUS_1__q28[9:5] -
	     i_frontend_axi_s_core_rd_in_rv$port1__read[38:34] ;
  assign x__h19818 =
	     i_frontend_axi_s_core_rd_in_rv$port1__read[60:29] + y__h19821 ;
  assign x__h19832 =
	     { _0_CONCAT_i_frontend_axi_s_core_rd_in_rvport1__ETC__q27[7:0],
	       5'd0 } ;
  assign x__h201098 = 32'd0 - i_frontend_axi_cache_wr_req[32:1] ;
  assign x__h228009 =
	     { 28'd0, i_frontend_axi_s_core_wr_in_data_rv$port1__read[4:1] } ;
  assign x__h261222 = 32'd7 - init_chunk_line__h261198 ;
  assign x__h287872 = { 28'd0, i_frontend_axi_cache_wr_req[37:34] } ;
  assign x__h288270 =
	     (x__h261222 == 32'hFFFFFFFF) ?
	       res_addr__h277601 :
	       res___1_addr__h217367 ;
  assign x__h289337 = { available_chunks__h261199[26:0], 5'd0 } ;
  assign x__h289384 =
	     (x__h261222 == 32'hFFFFFFFF) ?
	       available_chunks__h261199 :
	       32'd0 ;
  assign x__h325083 =
	     x25104_MINUS_1__q40[9:5] -
	     d_frontend_axi_s_core_rd_in_rv$port1__read[38:34] ;
  assign x__h325104 =
	     d_frontend_axi_s_core_rd_in_rv$port1__read[60:29] + y__h325107 ;
  assign x__h325118 =
	     { _0_CONCAT_d_frontend_axi_s_core_rd_in_rvport1__ETC__q39[7:0],
	       5'd0 } ;
  assign x__h433621 = 32'd7 - init_chunk_line__h433599 ;
  assign x__h456781 =
	     (x__h433621 == 32'hFFFFFFFF) ?
	       res_addr__h449666 :
	       res___1_addr__h407559 ;
  assign x__h456941 =
	     (x__h433621 == 32'hFFFFFFFF) ?
	       res_axi_word_chunk__h449668 :
	       32'd0 ;
  assign x__h474124 =
	     x74145_MINUS_1__q42[9:5] -
	     d_frontend_axi_s_core_wr_in_addr_rv$port1__read[38:34] ;
  assign x__h474145 =
	     d_frontend_axi_s_core_wr_in_addr_rv$port1__read[60:29] +
	     y__h474148 ;
  assign x__h474151 =
	     { _0_CONCAT_d_frontend_axi_s_core_wr_in_addr_rvp_ETC__q41[7:0],
	       5'd0 } ;
  assign x__h506378 = 32'd0 - d_frontend_axi_cache_wr_req[32:1] ;
  assign x__h533289 =
	     { 28'd0, d_frontend_axi_s_core_wr_in_data_rv$port1__read[4:1] } ;
  assign x__h566502 = 32'd7 - init_chunk_line__h566478 ;
  assign x__h593152 = { 28'd0, d_frontend_axi_cache_wr_req[37:34] } ;
  assign x__h593550 =
	     (x__h566502 == 32'hFFFFFFFF) ?
	       res_addr__h582881 :
	       res___1_addr__h522647 ;
  assign x__h594617 = { available_chunks__h566479[26:0], 5'd0 } ;
  assign x__h594664 =
	     (x__h566502 == 32'hFFFFFFFF) ?
	       available_chunks__h566479 :
	       32'd0 ;
  assign x__h904361 =
	     { d_cache_tag_array$D_OUT_1[21:0], d_cache_miss_req[300:296] } ;
  assign x_addr__h228244 = i_frontend_axi_wr_req[60:29] + 32'd32 ;
  assign x_addr__h533524 = d_frontend_axi_wr_req[60:29] + 32'd32 ;
  assign x_addr__h698385 = { i_cache_req_fifo$D_OUT[322:296], 5'd0 } ;
  assign y__h102305 =
	     { _1_MINUS_i_frontend_axi_v_axi_data_BITS_32_TO_1__q1[29:0],
	       2'd0 } ;
  assign y__h144411 = { available_chunks__h128320[29:0], 2'd0 } ;
  assign y__h168868 = { 19'd0, x__h168871 } >> 3 ;
  assign y__h19821 = { 19'd0, x__h19832 } >> 3 ;
  assign y__h228007 = x__h228009 << y__h228010 ;
  assign y__h228010 = { 27'd0, i_frontend_axi_cache_wr_req[362:360], 2'd0 } ;
  assign y__h228400 = { new_words__h201036[29:0], 2'd0 } ;
  assign y__h287870 = x__h287872 << y__h228010 ;
  assign y__h288317 = { available_chunks__h261199[29:0], 2'd0 } ;
  assign y__h325107 = { 19'd0, x__h325118 } >> 3 ;
  assign y__h407585 =
	     { _1_MINUS_d_frontend_axi_v_axi_data_BITS_32_TO_1__q2[29:0],
	       2'd0 } ;
  assign y__h449691 = { available_chunks__h433600[29:0], 2'd0 } ;
  assign y__h474148 = { 19'd0, x__h474151 } >> 3 ;
  assign y__h533287 = x__h533289 << y__h533290 ;
  assign y__h533290 = { 27'd0, d_frontend_axi_cache_wr_req[362:360], 2'd0 } ;
  assign y__h533680 = { new_words__h506316[29:0], 2'd0 } ;
  assign y__h593150 = x__h593152 << y__h533290 ;
  assign y__h593597 = { available_chunks__h566479[29:0], 2'd0 } ;
  always@(i_backend_axi_cnt_burst or i_backend_axi_req_reg)
  begin
    case (i_backend_axi_cnt_burst)
      8'd0: data__h1082863 = i_backend_axi_req_reg[65:34];
      8'd1: data__h1082863 = i_backend_axi_req_reg[97:66];
      8'd2: data__h1082863 = i_backend_axi_req_reg[129:98];
      8'd3: data__h1082863 = i_backend_axi_req_reg[161:130];
      8'd4: data__h1082863 = i_backend_axi_req_reg[193:162];
      8'd5: data__h1082863 = i_backend_axi_req_reg[225:194];
      8'd6: data__h1082863 = i_backend_axi_req_reg[257:226];
      8'd7: data__h1082863 = i_backend_axi_req_reg[289:258];
      default: data__h1082863 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(i_backend_axi_cnt_burst or i_backend_axi_req_reg)
  begin
    case (i_backend_axi_cnt_burst)
      8'd0: strb__h1082864 = i_backend_axi_req_reg[5:2];
      8'd1: strb__h1082864 = i_backend_axi_req_reg[9:6];
      8'd2: strb__h1082864 = i_backend_axi_req_reg[13:10];
      8'd3: strb__h1082864 = i_backend_axi_req_reg[17:14];
      8'd4: strb__h1082864 = i_backend_axi_req_reg[21:18];
      8'd5: strb__h1082864 = i_backend_axi_req_reg[25:22];
      8'd6: strb__h1082864 = i_backend_axi_req_reg[29:26];
      8'd7: strb__h1082864 = i_backend_axi_req_reg[33:30];
      default: strb__h1082864 = 4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(d_backend_axi_cnt_burst or d_backend_axi_req_reg)
  begin
    case (d_backend_axi_cnt_burst)
      8'd0: data__h1179674 = d_backend_axi_req_reg[65:34];
      8'd1: data__h1179674 = d_backend_axi_req_reg[97:66];
      8'd2: data__h1179674 = d_backend_axi_req_reg[129:98];
      8'd3: data__h1179674 = d_backend_axi_req_reg[161:130];
      8'd4: data__h1179674 = d_backend_axi_req_reg[193:162];
      8'd5: data__h1179674 = d_backend_axi_req_reg[225:194];
      8'd6: data__h1179674 = d_backend_axi_req_reg[257:226];
      8'd7: data__h1179674 = d_backend_axi_req_reg[289:258];
      default: data__h1179674 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(d_backend_axi_cnt_burst or d_backend_axi_req_reg)
  begin
    case (d_backend_axi_cnt_burst)
      8'd0: strb__h1179675 = d_backend_axi_req_reg[5:2];
      8'd1: strb__h1179675 = d_backend_axi_req_reg[9:6];
      8'd2: strb__h1179675 = d_backend_axi_req_reg[13:10];
      8'd3: strb__h1179675 = d_backend_axi_req_reg[17:14];
      8'd4: strb__h1179675 = d_backend_axi_req_reg[21:18];
      8'd5: strb__h1179675 = d_backend_axi_req_reg[25:22];
      8'd6: strb__h1179675 = d_backend_axi_req_reg[29:26];
      8'd7: strb__h1179675 = d_backend_axi_req_reg[33:30];
      default: strb__h1179675 = 4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h128319 or i_frontend_axi_rsp_fifo$D_OUT)
  begin
    case (init_chunk_line__h128319)
      32'd0:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
	      i_frontend_axi_rsp_fifo$D_OUT[32:1];
      32'd1:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
	      i_frontend_axi_rsp_fifo$D_OUT[64:33];
      32'd2:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
	      i_frontend_axi_rsp_fifo$D_OUT[96:65];
      32'd3:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
	      i_frontend_axi_rsp_fifo$D_OUT[128:97];
      32'd4:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
	      i_frontend_axi_rsp_fifo$D_OUT[160:129];
      32'd5:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
	      i_frontend_axi_rsp_fifo$D_OUT[192:161];
      32'd6:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
	      i_frontend_axi_rsp_fifo$D_OUT[224:193];
      32'd7:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
	      i_frontend_axi_rsp_fifo$D_OUT[256:225];
      32'd8: CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 = 32'd0;
      default: CASE_init_chunk_line28319_0_i_frontend_axi_rsp_ETC__q3 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(i_frontend_axi_v_axi_data or
	  IF_0_CONCAT_i_frontend_axi_v_axi_data_00_BITS__ETC___d142)
  begin
    case (i_frontend_axi_v_axi_data[32:1])
      32'd0:
	  CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q4 =
	      IF_0_CONCAT_i_frontend_axi_v_axi_data_00_BITS__ETC___d142;
      32'd1: CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q4 = 32'd0;
      default: CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q4 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h128319 or i_frontend_axi_rd_line)
  begin
    case (init_chunk_line__h128319)
      32'd0:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
	      i_frontend_axi_rd_line[31:0];
      32'd1:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
	      i_frontend_axi_rd_line[63:32];
      32'd2:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
	      i_frontend_axi_rd_line[95:64];
      32'd3:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
	      i_frontend_axi_rd_line[127:96];
      32'd4:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
	      i_frontend_axi_rd_line[159:128];
      32'd5:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
	      i_frontend_axi_rd_line[191:160];
      32'd6:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
	      i_frontend_axi_rd_line[223:192];
      32'd7:
	  CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
	      i_frontend_axi_rd_line[255:224];
      32'd8: CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 = 32'd0;
      default: CASE_init_chunk_line28319_0_i_frontend_axi_rd__ETC__q5 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(i_frontend_axi_v_axi_data or
	  IF_0_CONCAT_i_frontend_axi_v_axi_data_00_BITS__ETC___d173)
  begin
    case (i_frontend_axi_v_axi_data[32:1])
      32'd0:
	  CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q6 =
	      IF_0_CONCAT_i_frontend_axi_v_axi_data_00_BITS__ETC___d173;
      32'd1: CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q6 = 32'd0;
      default: CASE_i_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q6 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q7 = 32'd0;
      32'd7:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q7 =
	      IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q7 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q8 = 32'd0;
      32'd6:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q8 =
	      IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q8 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q9 = 32'd0;
      32'd5:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q9 =
	      IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q9 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q10 = 32'd0;
      32'd4:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q10 =
	      IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q10 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q11 = 32'd0;
      32'd3:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q11 =
	      IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q11 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q12 = 32'd0;
      32'd2:
	  CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q12 =
	      IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331;
      default: CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q12 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q13 = 32'd0;
      32'd1:
	  CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q13 =
	      IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331;
      default: CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q13 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331)
  begin
    case (init_chunk_line__h261198)
      32'd0:
	  CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q14 =
	      IF_i_frontend_axi_cache_wr_req_19_BIT_37_18_TH_ETC___d331;
      32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q14 = 32'd0;
      default: CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q14 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h433599 or d_frontend_axi_rsp_fifo$D_OUT)
  begin
    case (init_chunk_line__h433599)
      32'd0:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
	      d_frontend_axi_rsp_fifo$D_OUT[32:1];
      32'd1:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
	      d_frontend_axi_rsp_fifo$D_OUT[64:33];
      32'd2:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
	      d_frontend_axi_rsp_fifo$D_OUT[96:65];
      32'd3:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
	      d_frontend_axi_rsp_fifo$D_OUT[128:97];
      32'd4:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
	      d_frontend_axi_rsp_fifo$D_OUT[160:129];
      32'd5:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
	      d_frontend_axi_rsp_fifo$D_OUT[192:161];
      32'd6:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
	      d_frontend_axi_rsp_fifo$D_OUT[224:193];
      32'd7:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
	      d_frontend_axi_rsp_fifo$D_OUT[256:225];
      32'd8: CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 = 32'd0;
      default: CASE_init_chunk_line33599_0_d_frontend_axi_rsp_ETC__q15 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(d_frontend_axi_v_axi_data or
	  IF_0_CONCAT_d_frontend_axi_v_axi_data_78_BITS__ETC___d520)
  begin
    case (d_frontend_axi_v_axi_data[32:1])
      32'd0:
	  CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q16 =
	      IF_0_CONCAT_d_frontend_axi_v_axi_data_78_BITS__ETC___d520;
      32'd1: CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q16 = 32'd0;
      default: CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q16 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h433599 or d_frontend_axi_rd_line)
  begin
    case (init_chunk_line__h433599)
      32'd0:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
	      d_frontend_axi_rd_line[31:0];
      32'd1:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
	      d_frontend_axi_rd_line[63:32];
      32'd2:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
	      d_frontend_axi_rd_line[95:64];
      32'd3:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
	      d_frontend_axi_rd_line[127:96];
      32'd4:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
	      d_frontend_axi_rd_line[159:128];
      32'd5:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
	      d_frontend_axi_rd_line[191:160];
      32'd6:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
	      d_frontend_axi_rd_line[223:192];
      32'd7:
	  CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
	      d_frontend_axi_rd_line[255:224];
      32'd8: CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 = 32'd0;
      default: CASE_init_chunk_line33599_0_d_frontend_axi_rd__ETC__q17 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(d_frontend_axi_v_axi_data or
	  IF_0_CONCAT_d_frontend_axi_v_axi_data_78_BITS__ETC___d551)
  begin
    case (d_frontend_axi_v_axi_data[32:1])
      32'd0:
	  CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q18 =
	      IF_0_CONCAT_d_frontend_axi_v_axi_data_78_BITS__ETC___d551;
      32'd1: CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q18 = 32'd0;
      default: CASE_d_frontend_axi_v_axi_data_BITS_32_TO_1_0__ETC__q18 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q19 = 32'd0;
      32'd7:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q19 =
	      IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q19 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q20 = 32'd0;
      32'd6:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q20 =
	      IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q20 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q21 = 32'd0;
      32'd5:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q21 =
	      IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q21 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q22 = 32'd0;
      32'd4:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q22 =
	      IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q22 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q23 = 32'd0;
      32'd3:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q23 =
	      IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q23 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q24 = 32'd0;
      32'd2:
	  CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q24 =
	      IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708;
      default: CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q24 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q25 = 32'd0;
      32'd1:
	  CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q25 =
	      IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708;
      default: CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q25 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708)
  begin
    case (init_chunk_line__h566478)
      32'd0:
	  CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q26 =
	      IF_d_frontend_axi_cache_wr_req_96_BIT_37_95_TH_ETC___d708;
      32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q26 = 32'd0;
      default: CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q26 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q31 = 32'd0;
      32'd7:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q31 =
	      IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q31 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q32 = 32'd0;
      32'd6:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q32 =
	      IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q32 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q33 = 32'd0;
      32'd5:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q33 =
	      IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_0__ETC__q33 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q34 = 32'd0;
      32'd4:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q34 =
	      IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_0_4_IF_ETC__q34 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd2, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q35 = 32'd0;
      32'd3:
	  CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q35 =
	      IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251;
      default: CASE_init_chunk_line61198_0_0_1_0_2_0_3_IF_i_f_ETC__q35 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd1, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q36 = 32'd0;
      32'd2:
	  CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q36 =
	      IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251;
      default: CASE_init_chunk_line61198_0_0_1_0_2_IF_i_front_ETC__q36 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251)
  begin
    case (init_chunk_line__h261198)
      32'd0, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q37 = 32'd0;
      32'd1:
	  CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q37 =
	      IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251;
      default: CASE_init_chunk_line61198_0_0_1_IF_i_frontend__ETC__q37 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h261198 or
	  IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251)
  begin
    case (init_chunk_line__h261198)
      32'd0:
	  CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q38 =
	      IF_i_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d251;
      32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q38 = 32'd0;
      default: CASE_init_chunk_line61198_0_IF_i_frontend_axi__ETC__q38 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q43 = 32'd0;
      32'd7:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q43 =
	      IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q43 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q44 = 32'd0;
      32'd6:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q44 =
	      IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q44 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q45 = 32'd0;
      32'd5:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q45 =
	      IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_0__ETC__q45 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q46 = 32'd0;
      32'd4:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q46 =
	      IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_0_4_IF_ETC__q46 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd2, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q47 = 32'd0;
      32'd3:
	  CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q47 =
	      IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628;
      default: CASE_init_chunk_line66478_0_0_1_0_2_0_3_IF_d_f_ETC__q47 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd1, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q48 = 32'd0;
      32'd2:
	  CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q48 =
	      IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628;
      default: CASE_init_chunk_line66478_0_0_1_0_2_IF_d_front_ETC__q48 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628)
  begin
    case (init_chunk_line__h566478)
      32'd0, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q49 = 32'd0;
      32'd1:
	  CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q49 =
	      IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628;
      default: CASE_init_chunk_line66478_0_0_1_IF_d_frontend__ETC__q49 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(init_chunk_line__h566478 or
	  IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628)
  begin
    case (init_chunk_line__h566478)
      32'd0:
	  CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q50 =
	      IF_d_frontend_axi_s_core_wr_in_data_rv_port1___ETC___d628;
      32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q50 = 32'd0;
      default: CASE_init_chunk_line66478_0_IF_d_frontend_axi__ETC__q50 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        d_backend_axi_cnt_burst <= `BSV_ASSIGNMENT_DELAY 8'd0;
	d_backend_axi_cnt_wr_rsp <= `BSV_ASSIGNMENT_DELAY 8'd0;
	d_backend_axi_line_chunk <= `BSV_ASSIGNMENT_DELAY 3'd0;
	d_backend_axi_m_mem_rd_in_rv <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	d_backend_axi_m_mem_rd_out_rv <= `BSV_ASSIGNMENT_DELAY 37'h0AAAAAAAAA;
	d_backend_axi_m_mem_wr_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	d_backend_axi_m_mem_wr_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	    38'h0AAAAAAAAA;
	d_backend_axi_m_mem_wr_out_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	d_backend_axi_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_backend_axi_tot_burst <= `BSV_ASSIGNMENT_DELAY 8'd0;
	d_backend_axi_wr_rsp_complete <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_cache_mem_bram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	d_cache_cache_mem_bram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_cache_cache_mem_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_cache_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	d_cache_write_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_frontend_axi_axi_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_frontend_axi_cnt_bits <= `BSV_ASSIGNMENT_DELAY 13'd0;
	d_frontend_axi_cnt_req <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_frontend_axi_core_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	d_frontend_axi_last_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_frontend_axi_s_core_rd_in_rv <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	d_frontend_axi_s_core_rd_out_rv <= `BSV_ASSIGNMENT_DELAY
	    37'h0AAAAAAAAA;
	d_frontend_axi_s_core_wr_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	d_frontend_axi_s_core_wr_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	    38'h0AAAAAAAAA;
	d_frontend_axi_s_core_wr_out_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	d_frontend_axi_total_req <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_backend_axi_cnt_burst <= `BSV_ASSIGNMENT_DELAY 8'd0;
	i_backend_axi_cnt_wr_rsp <= `BSV_ASSIGNMENT_DELAY 8'd0;
	i_backend_axi_line_chunk <= `BSV_ASSIGNMENT_DELAY 3'd0;
	i_backend_axi_m_mem_rd_in_rv <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	i_backend_axi_m_mem_rd_out_rv <= `BSV_ASSIGNMENT_DELAY 37'h0AAAAAAAAA;
	i_backend_axi_m_mem_wr_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	i_backend_axi_m_mem_wr_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	    38'h0AAAAAAAAA;
	i_backend_axi_m_mem_wr_out_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	i_backend_axi_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	i_backend_axi_tot_burst <= `BSV_ASSIGNMENT_DELAY 8'd0;
	i_backend_axi_wr_rsp_complete <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_cache_mem_bram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	i_cache_cache_mem_bram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	i_cache_cache_mem_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	i_cache_rsp_cb_i <= `BSV_ASSIGNMENT_DELAY 4'd0;
	i_cache_rsp_cb_o <= `BSV_ASSIGNMENT_DELAY 4'd0;
	i_cache_rsp_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	i_cache_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	i_frontend_axi_axi_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	i_frontend_axi_cnt_bits <= `BSV_ASSIGNMENT_DELAY 13'd0;
	i_frontend_axi_cnt_req <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_frontend_axi_core_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	i_frontend_axi_last_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_frontend_axi_s_core_rd_in_rv <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	i_frontend_axi_s_core_rd_out_rv <= `BSV_ASSIGNMENT_DELAY
	    37'h0AAAAAAAAA;
	i_frontend_axi_s_core_wr_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	    63'h2AAAAAAAAAAAAAAA;
	i_frontend_axi_s_core_wr_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	    38'h0AAAAAAAAA;
	i_frontend_axi_s_core_wr_out_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	i_frontend_axi_total_req <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (d_backend_axi_cnt_burst$EN)
	  d_backend_axi_cnt_burst <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_cnt_burst$D_IN;
	if (d_backend_axi_cnt_wr_rsp$EN)
	  d_backend_axi_cnt_wr_rsp <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_cnt_wr_rsp$D_IN;
	if (d_backend_axi_line_chunk$EN)
	  d_backend_axi_line_chunk <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_line_chunk$D_IN;
	if (d_backend_axi_m_mem_rd_in_rv$EN)
	  d_backend_axi_m_mem_rd_in_rv <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_m_mem_rd_in_rv$D_IN;
	if (d_backend_axi_m_mem_rd_out_rv$EN)
	  d_backend_axi_m_mem_rd_out_rv <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_m_mem_rd_out_rv$D_IN;
	if (d_backend_axi_m_mem_wr_in_addr_rv$EN)
	  d_backend_axi_m_mem_wr_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_m_mem_wr_in_addr_rv$D_IN;
	if (d_backend_axi_m_mem_wr_in_data_rv$EN)
	  d_backend_axi_m_mem_wr_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_m_mem_wr_in_data_rv$D_IN;
	if (d_backend_axi_m_mem_wr_out_rv$EN)
	  d_backend_axi_m_mem_wr_out_rv <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_m_mem_wr_out_rv$D_IN;
	if (d_backend_axi_state$EN)
	  d_backend_axi_state <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_state$D_IN;
	if (d_backend_axi_tot_burst$EN)
	  d_backend_axi_tot_burst <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_tot_burst$D_IN;
	if (d_backend_axi_wr_rsp_complete$EN)
	  d_backend_axi_wr_rsp_complete <= `BSV_ASSIGNMENT_DELAY
	      d_backend_axi_wr_rsp_complete$D_IN;
	if (d_cache_cache_mem_bram_serverAdapter_cnt$EN)
	  d_cache_cache_mem_bram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      d_cache_cache_mem_bram_serverAdapter_cnt$D_IN;
	if (d_cache_cache_mem_bram_serverAdapter_s1$EN)
	  d_cache_cache_mem_bram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_cache_mem_bram_serverAdapter_s1$D_IN;
	if (d_cache_cache_mem_state$EN)
	  d_cache_cache_mem_state <= `BSV_ASSIGNMENT_DELAY
	      d_cache_cache_mem_state$D_IN;
	if (d_cache_state$EN)
	  d_cache_state <= `BSV_ASSIGNMENT_DELAY d_cache_state$D_IN;
	if (d_cache_write_miss$EN)
	  d_cache_write_miss <= `BSV_ASSIGNMENT_DELAY d_cache_write_miss$D_IN;
	if (d_frontend_axi_axi_state$EN)
	  d_frontend_axi_axi_state <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_axi_state$D_IN;
	if (d_frontend_axi_cnt_bits$EN)
	  d_frontend_axi_cnt_bits <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_cnt_bits$D_IN;
	if (d_frontend_axi_cnt_req$EN)
	  d_frontend_axi_cnt_req <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_cnt_req$D_IN;
	if (d_frontend_axi_core_state$EN)
	  d_frontend_axi_core_state <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_core_state$D_IN;
	if (d_frontend_axi_last_req$EN)
	  d_frontend_axi_last_req <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_last_req$D_IN;
	if (d_frontend_axi_s_core_rd_in_rv$EN)
	  d_frontend_axi_s_core_rd_in_rv <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_s_core_rd_in_rv$D_IN;
	if (d_frontend_axi_s_core_rd_out_rv$EN)
	  d_frontend_axi_s_core_rd_out_rv <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_s_core_rd_out_rv$D_IN;
	if (d_frontend_axi_s_core_wr_in_addr_rv$EN)
	  d_frontend_axi_s_core_wr_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_s_core_wr_in_addr_rv$D_IN;
	if (d_frontend_axi_s_core_wr_in_data_rv$EN)
	  d_frontend_axi_s_core_wr_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_s_core_wr_in_data_rv$D_IN;
	if (d_frontend_axi_s_core_wr_out_rv$EN)
	  d_frontend_axi_s_core_wr_out_rv <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_s_core_wr_out_rv$D_IN;
	if (d_frontend_axi_total_req$EN)
	  d_frontend_axi_total_req <= `BSV_ASSIGNMENT_DELAY
	      d_frontend_axi_total_req$D_IN;
	if (i_backend_axi_cnt_burst$EN)
	  i_backend_axi_cnt_burst <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_cnt_burst$D_IN;
	if (i_backend_axi_cnt_wr_rsp$EN)
	  i_backend_axi_cnt_wr_rsp <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_cnt_wr_rsp$D_IN;
	if (i_backend_axi_line_chunk$EN)
	  i_backend_axi_line_chunk <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_line_chunk$D_IN;
	if (i_backend_axi_m_mem_rd_in_rv$EN)
	  i_backend_axi_m_mem_rd_in_rv <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_m_mem_rd_in_rv$D_IN;
	if (i_backend_axi_m_mem_rd_out_rv$EN)
	  i_backend_axi_m_mem_rd_out_rv <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_m_mem_rd_out_rv$D_IN;
	if (i_backend_axi_m_mem_wr_in_addr_rv$EN)
	  i_backend_axi_m_mem_wr_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_m_mem_wr_in_addr_rv$D_IN;
	if (i_backend_axi_m_mem_wr_in_data_rv$EN)
	  i_backend_axi_m_mem_wr_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_m_mem_wr_in_data_rv$D_IN;
	if (i_backend_axi_m_mem_wr_out_rv$EN)
	  i_backend_axi_m_mem_wr_out_rv <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_m_mem_wr_out_rv$D_IN;
	if (i_backend_axi_state$EN)
	  i_backend_axi_state <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_state$D_IN;
	if (i_backend_axi_tot_burst$EN)
	  i_backend_axi_tot_burst <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_tot_burst$D_IN;
	if (i_backend_axi_wr_rsp_complete$EN)
	  i_backend_axi_wr_rsp_complete <= `BSV_ASSIGNMENT_DELAY
	      i_backend_axi_wr_rsp_complete$D_IN;
	if (i_cache_cache_mem_bram_serverAdapter_cnt$EN)
	  i_cache_cache_mem_bram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      i_cache_cache_mem_bram_serverAdapter_cnt$D_IN;
	if (i_cache_cache_mem_bram_serverAdapter_s1$EN)
	  i_cache_cache_mem_bram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_cache_mem_bram_serverAdapter_s1$D_IN;
	if (i_cache_cache_mem_state$EN)
	  i_cache_cache_mem_state <= `BSV_ASSIGNMENT_DELAY
	      i_cache_cache_mem_state$D_IN;
	if (i_cache_rsp_cb_i$EN)
	  i_cache_rsp_cb_i <= `BSV_ASSIGNMENT_DELAY i_cache_rsp_cb_i$D_IN;
	if (i_cache_rsp_cb_o$EN)
	  i_cache_rsp_cb_o <= `BSV_ASSIGNMENT_DELAY i_cache_rsp_cb_o$D_IN;
	if (i_cache_rsp_fifo_rv$EN)
	  i_cache_rsp_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	      i_cache_rsp_fifo_rv$D_IN;
	if (i_cache_state$EN)
	  i_cache_state <= `BSV_ASSIGNMENT_DELAY i_cache_state$D_IN;
	if (i_frontend_axi_axi_state$EN)
	  i_frontend_axi_axi_state <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_axi_state$D_IN;
	if (i_frontend_axi_cnt_bits$EN)
	  i_frontend_axi_cnt_bits <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_cnt_bits$D_IN;
	if (i_frontend_axi_cnt_req$EN)
	  i_frontend_axi_cnt_req <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_cnt_req$D_IN;
	if (i_frontend_axi_core_state$EN)
	  i_frontend_axi_core_state <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_core_state$D_IN;
	if (i_frontend_axi_last_req$EN)
	  i_frontend_axi_last_req <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_last_req$D_IN;
	if (i_frontend_axi_s_core_rd_in_rv$EN)
	  i_frontend_axi_s_core_rd_in_rv <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_s_core_rd_in_rv$D_IN;
	if (i_frontend_axi_s_core_rd_out_rv$EN)
	  i_frontend_axi_s_core_rd_out_rv <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_s_core_rd_out_rv$D_IN;
	if (i_frontend_axi_s_core_wr_in_addr_rv$EN)
	  i_frontend_axi_s_core_wr_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_s_core_wr_in_addr_rv$D_IN;
	if (i_frontend_axi_s_core_wr_in_data_rv$EN)
	  i_frontend_axi_s_core_wr_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_s_core_wr_in_data_rv$D_IN;
	if (i_frontend_axi_s_core_wr_out_rv$EN)
	  i_frontend_axi_s_core_wr_out_rv <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_s_core_wr_out_rv$D_IN;
	if (i_frontend_axi_total_req$EN)
	  i_frontend_axi_total_req <= `BSV_ASSIGNMENT_DELAY
	      i_frontend_axi_total_req$D_IN;
      end
    if (d_backend_axi_line_reg$EN)
      d_backend_axi_line_reg <= `BSV_ASSIGNMENT_DELAY
	  d_backend_axi_line_reg$D_IN;
    if (d_backend_axi_req_reg$EN)
      d_backend_axi_req_reg <= `BSV_ASSIGNMENT_DELAY
	  d_backend_axi_req_reg$D_IN;
    if (d_cache_cache_mem_mem_req$EN)
      d_cache_cache_mem_mem_req <= `BSV_ASSIGNMENT_DELAY
	  d_cache_cache_mem_mem_req$D_IN;
    if (d_cache_cache_mem_prev_line$EN)
      d_cache_cache_mem_prev_line <= `BSV_ASSIGNMENT_DELAY
	  d_cache_cache_mem_prev_line$D_IN;
    if (d_cache_miss_req$EN)
      d_cache_miss_req <= `BSV_ASSIGNMENT_DELAY d_cache_miss_req$D_IN;
    if (d_cache_wb_addr$EN)
      d_cache_wb_addr <= `BSV_ASSIGNMENT_DELAY d_cache_wb_addr$D_IN;
    if (d_frontend_axi_cache_wr_req$EN)
      d_frontend_axi_cache_wr_req <= `BSV_ASSIGNMENT_DELAY
	  d_frontend_axi_cache_wr_req$D_IN;
    if (d_frontend_axi_curr_info$EN)
      d_frontend_axi_curr_info <= `BSV_ASSIGNMENT_DELAY
	  d_frontend_axi_curr_info$D_IN;
    if (d_frontend_axi_rd_addr$EN)
      d_frontend_axi_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  d_frontend_axi_rd_addr$D_IN;
    if (d_frontend_axi_rd_line$EN)
      d_frontend_axi_rd_line <= `BSV_ASSIGNMENT_DELAY
	  d_frontend_axi_rd_line$D_IN;
    if (d_frontend_axi_v_axi_data$EN)
      d_frontend_axi_v_axi_data <= `BSV_ASSIGNMENT_DELAY
	  d_frontend_axi_v_axi_data$D_IN;
    if (d_frontend_axi_wr_req$EN)
      d_frontend_axi_wr_req <= `BSV_ASSIGNMENT_DELAY
	  d_frontend_axi_wr_req$D_IN;
    if (i_backend_axi_line_reg$EN)
      i_backend_axi_line_reg <= `BSV_ASSIGNMENT_DELAY
	  i_backend_axi_line_reg$D_IN;
    if (i_backend_axi_req_reg$EN)
      i_backend_axi_req_reg <= `BSV_ASSIGNMENT_DELAY
	  i_backend_axi_req_reg$D_IN;
    if (i_cache_cache_mem_mem_req$EN)
      i_cache_cache_mem_mem_req <= `BSV_ASSIGNMENT_DELAY
	  i_cache_cache_mem_mem_req$D_IN;
    if (i_cache_cache_mem_prev_line$EN)
      i_cache_cache_mem_prev_line <= `BSV_ASSIGNMENT_DELAY
	  i_cache_cache_mem_prev_line$D_IN;
    if (i_cache_token_hit$EN)
      i_cache_token_hit <= `BSV_ASSIGNMENT_DELAY i_cache_token_hit$D_IN;
    if (i_frontend_axi_cache_wr_req$EN)
      i_frontend_axi_cache_wr_req <= `BSV_ASSIGNMENT_DELAY
	  i_frontend_axi_cache_wr_req$D_IN;
    if (i_frontend_axi_curr_info$EN)
      i_frontend_axi_curr_info <= `BSV_ASSIGNMENT_DELAY
	  i_frontend_axi_curr_info$D_IN;
    if (i_frontend_axi_rd_addr$EN)
      i_frontend_axi_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  i_frontend_axi_rd_addr$D_IN;
    if (i_frontend_axi_rd_line$EN)
      i_frontend_axi_rd_line <= `BSV_ASSIGNMENT_DELAY
	  i_frontend_axi_rd_line$D_IN;
    if (i_frontend_axi_v_axi_data$EN)
      i_frontend_axi_v_axi_data <= `BSV_ASSIGNMENT_DELAY
	  i_frontend_axi_v_axi_data$D_IN;
    if (i_frontend_axi_wr_req$EN)
      i_frontend_axi_wr_req <= `BSV_ASSIGNMENT_DELAY
	  i_frontend_axi_wr_req$D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      d_backend_axi_m_mem_rd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      d_backend_axi_m_mem_wr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      d_frontend_axi_s_core_rd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      d_frontend_axi_s_core_wr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      i_backend_axi_m_mem_rd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      i_backend_axi_m_mem_wr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      i_frontend_axi_s_core_rd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      i_frontend_axi_s_core_wr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (d_backend_axi_m_mem_rd_isRst_isInReset$EN)
	d_backend_axi_m_mem_rd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    d_backend_axi_m_mem_rd_isRst_isInReset$D_IN;
      if (d_backend_axi_m_mem_wr_isRst_isInReset$EN)
	d_backend_axi_m_mem_wr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    d_backend_axi_m_mem_wr_isRst_isInReset$D_IN;
      if (d_frontend_axi_s_core_rd_isRst_isInReset$EN)
	d_frontend_axi_s_core_rd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    d_frontend_axi_s_core_rd_isRst_isInReset$D_IN;
      if (d_frontend_axi_s_core_wr_isRst_isInReset$EN)
	d_frontend_axi_s_core_wr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    d_frontend_axi_s_core_wr_isRst_isInReset$D_IN;
      if (i_backend_axi_m_mem_rd_isRst_isInReset$EN)
	i_backend_axi_m_mem_rd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    i_backend_axi_m_mem_rd_isRst_isInReset$D_IN;
      if (i_backend_axi_m_mem_wr_isRst_isInReset$EN)
	i_backend_axi_m_mem_wr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    i_backend_axi_m_mem_wr_isRst_isInReset$D_IN;
      if (i_frontend_axi_s_core_rd_isRst_isInReset$EN)
	i_frontend_axi_s_core_rd_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    i_frontend_axi_s_core_rd_isRst_isInReset$D_IN;
      if (i_frontend_axi_s_core_wr_isRst_isInReset$EN)
	i_frontend_axi_s_core_wr_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    i_frontend_axi_s_core_wr_isRst_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    d_backend_axi_cnt_burst = 8'hAA;
    d_backend_axi_cnt_wr_rsp = 8'hAA;
    d_backend_axi_line_chunk = 3'h2;
    d_backend_axi_line_reg =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_backend_axi_m_mem_rd_in_rv = 63'h2AAAAAAAAAAAAAAA;
    d_backend_axi_m_mem_rd_isRst_isInReset = 1'h0;
    d_backend_axi_m_mem_rd_out_rv = 37'h0AAAAAAAAA;
    d_backend_axi_m_mem_wr_in_addr_rv = 63'h2AAAAAAAAAAAAAAA;
    d_backend_axi_m_mem_wr_in_data_rv = 38'h2AAAAAAAAA;
    d_backend_axi_m_mem_wr_isRst_isInReset = 1'h0;
    d_backend_axi_m_mem_wr_out_rv = 4'hA;
    d_backend_axi_req_reg =
	323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_backend_axi_state = 2'h2;
    d_backend_axi_tot_burst = 8'hAA;
    d_backend_axi_wr_rsp_complete = 1'h0;
    d_cache_cache_mem_bram_serverAdapter_cnt = 3'h2;
    d_cache_cache_mem_bram_serverAdapter_s1 = 2'h2;
    d_cache_cache_mem_mem_req =
	323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_cache_cache_mem_prev_line =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_cache_cache_mem_state = 2'h2;
    d_cache_miss_req =
	323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_cache_state = 3'h2;
    d_cache_wb_addr = 32'hAAAAAAAA;
    d_cache_write_miss = 1'h0;
    d_frontend_axi_axi_state = 2'h2;
    d_frontend_axi_cache_wr_req =
	390'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_frontend_axi_cnt_bits = 13'h0AAA;
    d_frontend_axi_cnt_req = 32'hAAAAAAAA;
    d_frontend_axi_core_state = 3'h2;
    d_frontend_axi_curr_info = 46'h2AAAAAAAAAAA;
    d_frontend_axi_last_req = 1'h0;
    d_frontend_axi_rd_addr = 32'hAAAAAAAA;
    d_frontend_axi_rd_line =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_frontend_axi_s_core_rd_in_rv = 63'h2AAAAAAAAAAAAAAA;
    d_frontend_axi_s_core_rd_isRst_isInReset = 1'h0;
    d_frontend_axi_s_core_rd_out_rv = 37'h0AAAAAAAAA;
    d_frontend_axi_s_core_wr_in_addr_rv = 63'h2AAAAAAAAAAAAAAA;
    d_frontend_axi_s_core_wr_in_data_rv = 38'h2AAAAAAAAA;
    d_frontend_axi_s_core_wr_isRst_isInReset = 1'h0;
    d_frontend_axi_s_core_wr_out_rv = 4'hA;
    d_frontend_axi_total_req = 32'hAAAAAAAA;
    d_frontend_axi_v_axi_data = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    d_frontend_axi_wr_req = 62'h2AAAAAAAAAAAAAAA;
    i_backend_axi_cnt_burst = 8'hAA;
    i_backend_axi_cnt_wr_rsp = 8'hAA;
    i_backend_axi_line_chunk = 3'h2;
    i_backend_axi_line_reg =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    i_backend_axi_m_mem_rd_in_rv = 63'h2AAAAAAAAAAAAAAA;
    i_backend_axi_m_mem_rd_isRst_isInReset = 1'h0;
    i_backend_axi_m_mem_rd_out_rv = 37'h0AAAAAAAAA;
    i_backend_axi_m_mem_wr_in_addr_rv = 63'h2AAAAAAAAAAAAAAA;
    i_backend_axi_m_mem_wr_in_data_rv = 38'h2AAAAAAAAA;
    i_backend_axi_m_mem_wr_isRst_isInReset = 1'h0;
    i_backend_axi_m_mem_wr_out_rv = 4'hA;
    i_backend_axi_req_reg =
	323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    i_backend_axi_state = 2'h2;
    i_backend_axi_tot_burst = 8'hAA;
    i_backend_axi_wr_rsp_complete = 1'h0;
    i_cache_cache_mem_bram_serverAdapter_cnt = 3'h2;
    i_cache_cache_mem_bram_serverAdapter_s1 = 2'h2;
    i_cache_cache_mem_mem_req =
	323'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    i_cache_cache_mem_prev_line =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    i_cache_cache_mem_state = 2'h2;
    i_cache_rsp_cb_i = 4'hA;
    i_cache_rsp_cb_o = 4'hA;
    i_cache_rsp_fifo_rv =
	258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    i_cache_state = 3'h2;
    i_cache_token_hit = 4'hA;
    i_frontend_axi_axi_state = 2'h2;
    i_frontend_axi_cache_wr_req =
	390'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    i_frontend_axi_cnt_bits = 13'h0AAA;
    i_frontend_axi_cnt_req = 32'hAAAAAAAA;
    i_frontend_axi_core_state = 3'h2;
    i_frontend_axi_curr_info = 46'h2AAAAAAAAAAA;
    i_frontend_axi_last_req = 1'h0;
    i_frontend_axi_rd_addr = 32'hAAAAAAAA;
    i_frontend_axi_rd_line =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    i_frontend_axi_s_core_rd_in_rv = 63'h2AAAAAAAAAAAAAAA;
    i_frontend_axi_s_core_rd_isRst_isInReset = 1'h0;
    i_frontend_axi_s_core_rd_out_rv = 37'h0AAAAAAAAA;
    i_frontend_axi_s_core_wr_in_addr_rv = 63'h2AAAAAAAAAAAAAAA;
    i_frontend_axi_s_core_wr_in_data_rv = 38'h2AAAAAAAAA;
    i_frontend_axi_s_core_wr_isRst_isInReset = 1'h0;
    i_frontend_axi_s_core_wr_out_rv = 4'hA;
    i_frontend_axi_total_req = 32'hAAAAAAAA;
    i_frontend_axi_v_axi_data = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    i_frontend_axi_wr_req = 62'h2AAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (i_cache_cache_mem_bram_serverAdapter_s1[1] &&
	  (!i_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$Q_OUT ||
	   !i_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$Q_OUT ||
	   !i_cache_cache_mem_bram_serverAdapter_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (d_cache_cache_mem_bram_serverAdapter_s1[1] &&
	  (!d_cache_cache_mem_bram_serverAdapter_outData_beforeEnq$Q_OUT ||
	   !d_cache_cache_mem_bram_serverAdapter_outData_beforeDeq$Q_OUT ||
	   !d_cache_cache_mem_bram_serverAdapter_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	  WILL_FIRE_RL_i_backend_axi_mem_get_wr_rsp)
	$display("Error: \"/scratch/jm21dame/flexKI_cache/src/BackendAXI4.bsv\", line 90, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_i_backend_axi_mem_req_rule]\n  and [RL_i_backend_axi_mem_get_wr_rsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_i_backend_axi_mem_req_rule &&
	  WILL_FIRE_RL_i_backend_axi_mem_get_rd)
	$display("Error: \"/scratch/jm21dame/flexKI_cache/src/BackendAXI4.bsv\", line 90, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_i_backend_axi_mem_req_rule]\n  and [RL_i_backend_axi_mem_get_rd] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_i_backend_axi_mem_get_rd &&
	  WILL_FIRE_RL_i_backend_axi_mem_get_wr_rsp)
	$display("Error: \"/scratch/jm21dame/flexKI_cache/src/BackendAXI4.bsv\", line 90, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_i_backend_axi_mem_get_rd] and\n  [RL_i_backend_axi_mem_get_wr_rsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	  WILL_FIRE_RL_d_backend_axi_mem_get_wr_rsp)
	$display("Error: \"/scratch/jm21dame/flexKI_cache/src/BackendAXI4.bsv\", line 90, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_d_backend_axi_mem_req_rule]\n  and [RL_d_backend_axi_mem_get_wr_rsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_d_backend_axi_mem_req_rule &&
	  WILL_FIRE_RL_d_backend_axi_mem_get_rd)
	$display("Error: \"/scratch/jm21dame/flexKI_cache/src/BackendAXI4.bsv\", line 90, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_d_backend_axi_mem_req_rule]\n  and [RL_d_backend_axi_mem_get_rd] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_d_backend_axi_mem_get_rd &&
	  WILL_FIRE_RL_d_backend_axi_mem_get_wr_rsp)
	$display("Error: \"/scratch/jm21dame/flexKI_cache/src/BackendAXI4.bsv\", line 90, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_d_backend_axi_mem_get_rd] and\n  [RL_d_backend_axi_mem_get_wr_rsp] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkCacheSystem

